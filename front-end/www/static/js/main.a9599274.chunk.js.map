{"version":3,"sources":["reportWebVitals.js","router/context/index.jsx","pages/dashboard/_partials/index.jsx","pages/dashboard/ScrollArea/index.jsx","pages/dashboard/SidebarLink/index.jsx","pages/dashboard/menu/index.jsx","services/api/index.jsx","pages/dashboard/userAvatar/index.jsx","components/formInput/date.jsx","components/formInput/index.jsx","components/formInput/password.jsx","components/FieldGroup/index.jsx","pages/gestion de compte/gestion compte patient/index.jsx","components/formInput/select.jsx","services/api/domaine/index.jsx","MyField.js","pages/gestion de compte/gestion compte medecin/_partials/Domaine.jsx","pages/gestion de compte/gestion compte medecin/_partials/SousDomaine.jsx","pages/gestion de compte/gestion compte medecin/index.jsx","components/formInput/image.jsx","pages/gestion de compte/index.jsx","services/api/Update Compte/index.jsx","services/api/gestion de compte/index.jsx","router/_partials/PrivateRoute.js","components/table/TableActions.jsx","components/table/TableContent.jsx","components/table/TablePagination.jsx","services/api/relation/index.jsx","pages/Mes patients/_partials/AjoutPatient.jsx","components/Acte/ActeHistorique/content.jsx","services/api/Historique patient/index.jsx","components/Acte/ActeHistorique/index.jsx","services/api/patient information/index.jsx","components/InformationsSurLeMedecin/index.jsx","services/api/Medecin information/index.jsx","components/Antecedants/descriptionMobile/index.jsx","components/Antecedants/index.jsx","components/formInput/SunEditorInput.jsx","components/Certificat/ShowCertifica.jsx","components/Certificat/CertificatHistorique/content.jsx","components/Certificat/CertificatHistorique/index.jsx","components/Consultation/_partial/DetailConsultation.jsx","services/api/consultation/index.jsx","components/Consultation/index.jsx","components/Examen/ExamenHistorique/content.jsx","components/Examen/ExamenHistorique/index.jsx","components/Lettre/LettreHistorique/content.jsx","components/Lettre/LettreHistorique/index.jsx","components/Ordonnance/OrdonnanceHistorique/content.jsx","components/Ordonnance/OrdonnanceHistorique/index.jsx","components/historique patient/_patials/TableauDynamique.jsx","components/historique patient/index.jsx","components/informationSurPatient/index.jsx","pages/Mes patients/index.jsx","components/calendar/taks/alert.jsx","components/calendar/taks/index.jsx","components/calendar/timeElement/index.jsx","components/calendar/index.jsx","services/api/reservation/index.jsx","MyFieldPassword.js","services/api/auth/index.jsx","pages/calendar/bookingForm/AddNewPatient.jsx","pages/calendar/bookingForm/index.jsx","components/general alert/index.jsx","components/general patients information/_partials/text.jsx","components/general patients information/index.jsx","components/confirmer un rendez vous/index.jsx","services/api/manageTheRoom/index.jsx","pages/calendar/medecin.jsx","services/api/listPatientDashboard/inde.jsx","pages/calendar/patient.jsx","pages/calendar/index.jsx","components/reserver un rendez-vous/calendar/bookingForm/index.jsx","components/reserver un rendez-vous/calendar/taks/index.jsx","components/reserver un rendez-vous/calendar/timeElement/index.jsx","components/reserver un rendez-vous/calendar.jsx","components/reserver un rendez-vous/calendar/index.jsx","components/reserver un rendez-vous/index.jsx","pages/Mon medecin/_partials/AjoutMedecin.jsx","components/InformationsSurLeMedecin/FromData.jsx","pages/Mon medecin/index.jsx","components/patients at the doctor/index.jsx","components/formInput/Textarea.jsx","components/formInput/Prix.jsx","components/Certificat/AddElement.jsx","components/Certificat/editer.jsx","services/api/certificat/index.jsx","components/Certificat/index.jsx","components/Acte/index.jsx","services/api/acte/index.jsx","components/Examen/index.jsx","components/formInput/range.jsx","components/medicament/index.jsx","services/api/list medicament/index.jsx","components/Ordonnance/index.jsx","components/Lettre/index.jsx","components/Antecedants/AntecedantsForm/index.jsx","pages/consultation/_partials/form.jsx","pages/consultation/index.jsx","components/Certificat/CertificatUpdate.jsx","pages/Certificat/index.jsx","pages/Mon rendez vous/index.jsx","pages/Trouver un m√©decin/index.jsx","services/api/Trouver un medecin/index.jsx","components/Acte/_parcial/AjoutActe.jsx","components/Acte/_parcial/UpdateAct.jsx","pages/ListeDact/index.jsx","pages/Liste Medicament/index.jsx","pages/dashboard/activityArea/index.jsx","components/notification/_partials/One notification.jsx","services/api/notification/index.jsx","components/notification/index.jsx","pages/dashboard/index.jsx","pages/log/Login/index.jsx","pages/log/Sing up/index.jsx","pages/log/index.jsx","pages/404/index.jsx","router/_partials/PublicRoute.js","router/index.jsx","app.jsx","theme/globalStyle.js","theme/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TbibyContext","createContext","initialUserValues","id","nom","prenom","isAuthenticated","telephone","email","cin","sexes","photo","fonctionnalite","idMedecin","TheContext","props","userValues","localStorage","getItem","JSON","parse","useState","user","setUser","Provider","value","cleanUser","clear","NavBreadcrumb","path","history","useHistory","patharray","split","shift","fontSize","separator","as","HiChevronRight","color","top","pos","map","url","onClick","push","charAt","toUpperCase","slice","ScrollArea","overflowY","height","minH","maxH","sx","bg","width","mode","borderRadius","SidebarLink","pathname","useLocation","children","linkto","icon","ArrowRight","avatar","rest","marginEnd","bgColor","display","px","py","rounded","cursor","_hover","className","fontWeight","transition","opacity","_groupHover","createIcon","viewBox","d","fill","Menu","useContext","pages","Patientmenu","Fragment","mb","base","page","w","md","bottom","left","p","link","timeStamps","Date","now","generatedToken","Md5","hashStr","navigator","userAgent","toString","axios","QueryClient","realAxios","create","baseURL","headers","UserAvatar","whiteSpace","size","src","name","lineHeight","mr","right","InputDate","startDate","setStartDate","useField","errorMessage","setValue","isValid","isSubmitted","label","required","type","dValue","note","SyncWithVariable","React","setIsTouched","htmlFor","selected","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","onBlur","dateFormat","date","toISOString","MyField","Placeholder","dtValue","isTouched","showError","useEffect","placeholder","onChange","e","target","aria-invalid","aria-required","aria-describedby","MyFieldPassword","showPassword","setshowPassword","View","ViewOff","FieldGroup","title","flexProps","direction","spacing","flexShrink","GestiondeCopmtePatient","gcInfo","age","parent","Code_APCI","validations","rule","isNumber","message","Adresse","Select2","data","colourStyles","control","styles","backgroundColor","option","isDisabled","isFocused","isSelected","isSearchable","changeValue","options","useDomaine","config","useQuery","get","useSousDomaine","params","useMutation","domaine_id","post","mt","AddDomaine","refetch","toast","useToast","onError","error","description","status","duration","isClosable","onSuccess","res","onClose","mutate","isLoading","useDisclosure","isOpen","onOpen","btnRef","useRef","myForm","useForm","values","mx","position","ref","colorScheme","placement","finalFocusRef","connect","onValidSubmit","noValidate","onSubmit","submit","multiple","isPattern","m","variant","borderColor","disabled","SousDomaine","mutateSousD","domaine","GestiondeCopmteMedecin","valueForm","setDomaine","sousDomaine","setSousDomaine","DomaineSelected","setDomaineSelected","param","SelectDomaine","adresse_physique","event","secretaire","ImageFile","setPictures","pictures","leftIcon","document","getElementById","click","files","onchange","style","Accountmanagement","file","showpictures","setShowPictures","gcRefetch","userValue","setItem","stringify","ch","Object","entries","method","setGcInfo","useGestionDeCompte","console","log","newUser","setSexes","useRemovePhoto","RMmutate","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","catch","err","lg","id_cms_privileges","selectSousDomaine","FormData","keys","index","append","_selected","date_naissance","isLength","val","deps","isEmail","isMinLength","align","useColorModeValue","Math","abs","getTime","getUTCFullYear","PrivateRoute","isAuth","otherProps","exact","to","TableActions","chercherFn","buttonText","buttonIcon","buttonhoverTesxt","inputhoverTesxt","inputValue","setInputValue","pt","justify","templateColumns","gap","aria-label","srOnly","pointerEvents","iconSpacing","TableContent","header","content","fntable","length","maxW","sm","textAlign","letterSpacing","overflowX","my","borderWidth","column","scope","row","indexcol","fn","fn2","fn3","TablePagination","total","prev_page_url","next_page_url","setPage","rel","useRelation","medecin_id","patient_id","AjouPatient","setMessage","columns","minW","ContentActe","patient","setTotal","next","setNext","prev","setPrev","setContent","useHistoriqueListActe","isLodingActe","startColor","endColor","HistoriqueActe","usePatentInfo","InformationsSurLeMedecin","medecin","medecinInfo","setMedecinInfo","useMedecinInfo","href","Email","DescriptionMobile","useBreakpointValue","background","Antecedants","isMobile","patientInfo","setPatientInfo","useAntecedants","borderBottomWidth","float","Close","noOfLines","InputSunEditor","editerValue","setEditerValue","Patient","editorRef","paramsPatentInfo","cms_users_id","replaceAll","string","search","replace","join","print","mywindow","window","open","write","text","sexesM","sexesP","decodeMessage","close","focus","addEventListener","disable","lang","showToolbar","setOptions","buttonList","ShowCertifica","structure","patientId","cancelRef","MyForm","current","editor","setContents","motionPreset","leastDestructiveRef","isCentered","ContentCertificat","useHistoriqueListCertificat","isLodingCertificat","HistoriqueCetificat","DetailConsultation","consultation","setConsultation","detatil","setDetatil","useDetatilOfConsultation","detail","pb","Diagnostic","prix","minChildWidth","allowMultiple","flex","valueobject","borderBottom","finalevalue","HistoriqueConsultation","ContentExamen","useHistoriqueListExamen","isLodingExamen","HistoriqueExamen","ContentLetter","useHistoriqueListLettre","HistoriqueLettre","ContentOrdonnance","useHistoriqueListOrdonnance","isLodingOrdonnance","HistoriqueOrdonnance","TableauDynamique","useHistoriqueListConsultation","isLodingConsultation","HistoriquePatient","PatientInfo","ListPatients","setPatientId","useRelationListe","Alert","hoverMassage","setIsOpen","fnTodo","Header","Body","btOK","btNon","ml","Task","isOpenRemove","setIsOpenRemove","onCloseRemove","cancelRefRemove","taskvalue","DeleteMutate","task","setTask","EnteredMutate","usertype","Entered","stopPropagation","remove","draggableId","provided","snapshot","innerRef","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","padding","margin","border","nomprenom","h","start","TimeElement","HoursValue","key","addtask","templateRows","droppableId","droppableProps","parseInt","Calendar","rowNumber","updateTask","Hours","addDays","days","setDate","getDate","headerDates","i","contenu","colSpan","onDragEnd","useUpdateReservation","date_reservation","useDeleteReservation","useSingup","password","AddNewPatient","addPatient","api_status","exists","elementExists","R_password","BookingForm","setNomPrenom","refetchTask","currentDateStart","listPatientDashboardAPIRefetch","end","listPatient","etat","setErrorMessage","setSearch","LodingaAddPatient","restOfConfirmation","selectvalue","G_Alert","submitcolor","TextInfo","GeneralPatientsInformation","Date_Naissance","ConfirmerUnRendezVous","refetchDashboard","refetchlist","state","SPTWRMutate","idR","Check","useValideReservation","CalendarDashboardMedecin","PatientEntrerIsLoading","DeleteIsLoading","isLoadingUpdate","useReservationMListe","setCurrentDateStart","setend","setListPatient","useListPatientDashboardAPI","daysView","setDaysView","ArrowLeft","element","destination","CalendarDashboardPatient","useListReservation","CalendarDashboard","calendarType","setCalendarType","BookingFormReserve","TaskReserve","TimeElementReserve","CalendarReservePara","CalendarReserve","useListReservationEnLigne","ReserverUnRendezVous","AjoutMedecin","MedecinInfo","MonMedecin","useRelationPM","PatientsAtTheDoctor","patientsWaiting","setCurrentPatient","currentPatient","isOpenWaiting","setIsOpenWaiting","onCloseWaiting","cancelRefWaiting","removePatient","rendez_vous_id","ToWaiting","ExternalLink","TextareaForm","Prix","min","AddElement","add","core","targetElement","listDiv","this","setSubmenu","call","self","querySelectorAll","forEach","btn","bind","initMenuTarget","util","createElement","innerHTML","node","addClass","textContent","insertNode","zeroWidthSpace","createTextNode","parentNode","insertBefore","nextSibling","submenuOff","EditerCertificat","undefined","plugins","dataCommand","buttonClass","dataDisplay","borderLeft","Certificat","removeComponentsForm","setTitle","showEditTitle","setShowEditTitle","selectValues","setSelectValues","useGetCertificat","boxShadow","Edit","changeValueOfEditer","Acte","selectValue","setSelectValue","code","setCode","designation","setDesignation","price","setPrice","useGetAllListActe","Examen","InputDateRange","endDate","setEndDate","dates","selectsRange","inline","AjoutMedicament","Ordonnance","useGetListeMedicamentSelect2","ReactDOMServer","renderToStaticMarkup","ord","ordonnances","medicament_id","NBR_FOIS_JOURS","duree_entre_chaque_medicament","lorsqueVousPrenezLeMedicament","ordonnanceImprime","xl","Lettre","useListeMedec","AntecedantsForm","Form","refetchPatientListe","setpatientsWaiting","setId","useCreateConsultation","splice","indexOf","setComponentsForm","componentsForm","addelement","filter","obj","defaultIndex","sort","a","b","Consultation","SPTWRIsLoading","useListOfThePatientInConsultation","CertificatUpdate","CertificatPage","setParams","useGetListCertificat","recherche","MonRendezvous","useConsultationPatient","TrouverUnMedecin","sousDomaineSelected","setSousDomaineSelected","useFindeDoctor","isLoadingFindeDoctor","refetchFindeDoctor","Search","AjoutActe","UpdateAct","ListeDact","useGetListActe","ListeMedicament","useListMedicament","ActivityArea","component","OneNotification","notif","removeElement","useRemoveNotification","seeNotifMutate","useSeeNotification","onMouseEnter","is_read","Notification","notification","setNotification","useNotification","removeAllNotificationMutate","useRemoveAllNotification","array","MobileMenuButton","useMobileMenuState","useBoolean","actions","off","Dashboard","useColorMode","colorMode","toggleColorMode","toggle","handlers","useSwipeable","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","overflow","marginStart","Login","titre","Singup","setFonctionnalite","alt","shadow","Error404","PublicRoute","MainRouter","App","queryClient","QueryClientProvider","client","initialIsOpen","globalStyle","theme","extendTheme","initialColorMode","useSystemColorMode","overwrite","global","customTheme","startApp","ReactDOM","render","StrictMode","cordova"],"mappings":"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","file":"static/js/main.a9599274.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const TbibyContext = createContext();\r\n\r\nconst initialUserValues = {\r\n  id: null,\r\n  nom: null,\r\n  prenom: null,\r\n  isAuthenticated: false,\r\n  telephone: null,\r\n  email: null,\r\n  cin: null,\r\n  sexes: null,\r\n  photo: null,\r\n  fonctionnalite: \"\",\r\n  idMedecin: null,\r\n};\r\n\r\nconst TheContext = (props) => {\r\n  const userValues =\r\n    (localStorage.getItem(\"user\") &&\r\n      JSON.parse(localStorage.getItem(\"user\"))) ||\r\n    initialUserValues;\r\n\r\n  const [user, setUser] = useState(userValues);\r\n  const cleanUser = () => {\r\n    localStorage.clear();\r\n    setUser({});\r\n  };\r\n  return (\r\n    <TbibyContext.Provider value={{ user, setUser, cleanUser }} {...props} />\r\n  );\r\n};\r\n\r\nexport default TheContext;\r\n","import {\r\n  Box,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbProps,\r\n} from \"@chakra-ui/react\";\r\nimport { HiChevronRight } from \"react-icons/hi\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const NavBreadcrumb = ({ path }, props: BreadcrumbProps) => {\r\n  let history = useHistory();\r\n  let patharray = path.split(\"/\");\r\n  patharray.shift();\r\n\r\n  return (\r\n    <Breadcrumb\r\n      fontSize=\"lg\"\r\n      {...props}\r\n      separator={\r\n        <Box\r\n          as={HiChevronRight}\r\n          color=\"gray.400\"\r\n          fontSize=\"md\"\r\n          top=\"2px\"\r\n          pos=\"relative\"\r\n        />\r\n      }\r\n    >\r\n      {patharray.map((url) => (\r\n        <BreadcrumbItem color=\"inherit\" key={url}>\r\n          <BreadcrumbLink\r\n            onClick={() => {\r\n              url != \"dashboard\"\r\n                ? history.push(url)\r\n                : history.push(\"/dashboard\");\r\n            }}\r\n          >\r\n            {url.charAt(0).toUpperCase() + url.slice(1)}\r\n          </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n      ))}\r\n    </Breadcrumb>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Box, BoxProps, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst ScrollArea = (props: BoxProps) => (\r\n  <Box\r\n    overflowY=\"auto\"\r\n    height=\"85vh\"\r\n    minH=\"px\"\r\n    maxH=\"full\"\r\n    {...props}\r\n    sx={{\r\n      \"&::-webkit-scrollbar-track\": {\r\n        bg: \"transparent\",\r\n      },\r\n      \"&::-webkit-scrollbar\": {\r\n        width: \"8px\",\r\n      },\r\n      \"&::-webkit-scrollbar-thumb\": {\r\n        bg: mode(\"green.500\", \"gray.700\"),\r\n        borderRadius: \"20px\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport default ScrollArea;\r\n","import {\r\n  Box,\r\n  createIcon,\r\n  HStack,\r\n  Text,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport {} from \"react-router-dom\";\r\n\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const SidebarLink = (props) => {\r\n  const { pathname } = useLocation();\r\n  let history = useHistory();\r\n\r\n  const { children, linkto, icon = <ArrowRight />, avatar, ...rest } = props;\r\n  return (\r\n    <Box\r\n      as=\"a\"\r\n      marginEnd=\"2\"\r\n      fontSize=\"sm\"\r\n      color=\"white\"\r\n      bgColor={\r\n        pathname == \"/dashboard/\" + linkto ? mode(\"green.300\", \"gray.600\") : ``\r\n      }\r\n      onClick={() => history.push(\"/dashboard/\" + linkto)}\r\n      display=\"block\"\r\n      px=\"3\"\r\n      py=\"2\"\r\n      rounded=\"md\"\r\n      cursor=\"pointer\"\r\n      _hover={{ color: \"white\", bg: mode(\"green.300\", \"gray.600\") }}\r\n      className=\"group\"\r\n      fontWeight=\"medium\"\r\n      transition=\"background .1s ease-out\"\r\n      {...rest}\r\n    >\r\n      <HStack fontSize=\"md\">\r\n        <Box opacity={avatar ? 1 : 0.5} _groupHover={{ opacity: 1 }}>\r\n          {avatar || icon}\r\n        </Box>\r\n        <Text>{children}</Text>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ArrowRight = createIcon({\r\n  viewBox: \"0 0 16 16\",\r\n  path: (\r\n    <path\r\n      d=\"M3.38974 12.6633L9.42974 12.6633C9.86308 12.6633 10.2697 12.4567 10.5164 12.1033L13.1497 8.39C13.3164 8.15667 13.3164 7.85 13.1497 7.61667L10.5097 3.89667C10.2697 3.54334 9.86308 3.33667 9.42974 3.33667L3.38974 3.33667C2.84974 3.33667 2.53641 3.95667 2.84974 4.39667L5.42974 8.00334L2.84974 11.61C2.53641 12.05 2.84974 12.6633 3.38974 12.6633V12.6633Z\"\r\n      fill=\"currentcolor\"\r\n    />\r\n  ),\r\n});\r\n","import React, { Components, useContext } from \"react\";\r\nimport { Stack, Box } from \"@chakra-ui/react\";\r\nimport { SidebarLink } from \"./../SidebarLink\";\r\nimport {\r\n  BsBoxArrowLeft,\r\n  BsSearch,\r\n  BsFillCalendarFill,\r\n  BsFillPersonLinesFill,\r\n  BsFillPeopleFill,\r\n} from \"react-icons/bs\";\r\n\r\nimport {\r\n  BiClipboard,\r\n  BiDonateHeart,\r\n  BiLayer,\r\n  BiCalendarAlt,\r\n  BiPlusMedical,\r\n  BiDetail,\r\n} from \"react-icons/bi\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nconst Menu = () => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  let history = useHistory();\r\n  let logout = () => {\r\n    cleanUser();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  let pages = [];\r\n  let Patientmenu = [\r\n    { url: \"Dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n    { url: \"Historiques\", icon: <BiDetail fontSize=\"20px\" /> },\r\n    { url: \"Trouver un m√©decin\", icon: <BsSearch fontSize=\"20px\" /> },\r\n    { url: \"Mes rendez vous\", icon: <BsFillCalendarFill fontSize=\"20px\" /> },\r\n    { url: \"Mes m√©decins\", icon: <BsFillPersonLinesFill fontSize=\"20px\" /> },\r\n  ];\r\n  if (user.fonctionnalite == \"patient\") {\r\n    pages = Patientmenu;\r\n  } else if (user.fonctionnalite == \"medecin\") {\r\n    pages = [\r\n      { url: \"Dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n\r\n      { url: \"Mes patients\", icon: <BsFillPeopleFill fontSize=\"20px\" /> },\r\n      { url: \"Consultation\", icon: <BiDonateHeart fontSize=\"20px\" /> },\r\n      { url: \"Mod√®le de certificat\", icon: <BiClipboard fontSize=\"20px\" /> },\r\n      { url: \"Liste d'actes\", icon: <BiLayer fontSize=\"20px\" /> },\r\n      { url: \"Liste medicament\", icon: <BiPlusMedical fontSize=\"20px\" /> },\r\n    ];\r\n  } else if (user.fonctionnalite == \"secretaire\") {\r\n    pages = [\r\n      { url: \"dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n      { url: \"Mod√®le de certificat\", icon: <BiClipboard fontSize=\"20px\" /> },\r\n      { url: \"Liste d'actes\", icon: <BiLayer fontSize=\"20px\" /> },\r\n      { url: \"Liste medicament\", icon: <BiPlusMedical fontSize=\"20px\" /> },\r\n      { url: \"Mon historiques\", icon: <BiDetail fontSize=\"20px\" /> },\r\n      { url: \"Mes rendez vous\", icon: <BsFillCalendarFill fontSize=\"20px\" /> },\r\n      { url: \"Mes m√©decins\", icon: <BsFillPersonLinesFill fontSize=\"20px\" /> },\r\n      { url: \"Trouver un m√©decin\", icon: <BsSearch fontSize=\"20px\" /> },\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box mb={{ base: \"70px\" }}>\r\n        {pages.map((page) => (\r\n          <SidebarLink\r\n            key={page.url}\r\n            linkto={page.url == \"Dashboard\" ? `` : page.url}\r\n            icon={page.icon}\r\n          >\r\n            {page.url}\r\n          </SidebarLink>\r\n        ))}\r\n      </Box>\r\n      <Box\r\n        pos=\"fixed\"\r\n        w={{ base: \"62%\", md: \"50%\" }}\r\n        bottom={{ base: \"20px\", md: \"24px\" }}\r\n        left={{ base: \"72px\", md: \"95px\" }}\r\n      >\r\n        <Stack bgColor=\"red.300\" rounded={8}>\r\n          <SidebarLink\r\n            onClick={logout}\r\n            icon={<BsBoxArrowLeft />}\r\n            fontSize=\"xlx\"\r\n            p={4}\r\n          >\r\n            Se d√©connecter\r\n          </SidebarLink>\r\n        </Stack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { default as realAxios } from \"axios\";\r\nimport { Md5 } from \"ts-md5/dist/md5\";\r\nimport { QueryClient } from \"react-query\";\r\n\r\nexport const link = \"http://192.168.137.1:8000\";\r\nexport const userImage = \"/vendor/crudbooster/avatar.jpg\";\r\nconst SECRET_KEY = \"pfetbiby2020\";\r\nconst timeStamps = Date.now();\r\nconst generatedToken = Md5.hashStr(\r\n  SECRET_KEY + timeStamps + navigator.userAgent\r\n).toString();\r\nconst queryClient = new QueryClient();\r\nconst axios = realAxios.create({\r\n  baseURL: link + \"/api/\",\r\n  headers: {\r\n    // \"Content-Type\": \"application/json\",\r\n    \"X-Authorization-Time\": timeStamps,\r\n    \"X-Authorization-Token\": generatedToken,\r\n  },\r\n});\r\nexport default axios;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  HStack,\r\n  Text,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BsGear } from \"react-icons/bs\";\r\nimport { link, userImage } from \"./../../../services/api\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst UserAvatar = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  let history = useHistory();\r\n  const image = user.photo;\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        as=\"div\"\r\n        p=\"3\"\r\n        display=\"block\"\r\n        transition=\"background 0.1s\"\r\n        rounded=\"xl\"\r\n        _hover={{ bg: \"whiteAlpha.200\" }}\r\n        whiteSpace=\"nowrap\"\r\n        onClick={() => {\r\n          history.push(\"/dashboard/gestion de compte\");\r\n        }}\r\n      >\r\n        <HStack>\r\n          <Avatar\r\n            size=\"md\"\r\n            src={!!user.photo ? `${link}${user.photo}` : ``}\r\n            name={user.nom + \" \" + user.prenom}\r\n          />\r\n          <Box lineHeight=\"1\">\r\n            <Text fontWeight=\"semibold\">{user.nom + \" \" + user.prenom}</Text>\r\n          </Box>\r\n          <Box size=\"lg\" mr={8} right=\"0px\">\r\n            <BsGear />\r\n          </Box>\r\n        </HStack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserAvatar;\r\n","import React, { useEffect, useState, useRef, HTMLAttributes } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useField } from \"@formiz/core\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./date-picker.css\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const InputDate = (props) => {\r\n  const makerange = (start, end) => {\r\n    var ans = [];\r\n    for (let i = start; i <= end; i++) {\r\n      ans.push(i);\r\n    }\r\n    return ans;\r\n  };\r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n\r\n  const { label, type, required, note, dValue, SyncWithVariable } = props;\r\n  const [isTouched, setIsTouched] = React.useState(true);\r\n  // const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <React.Fragment>\r\n      <FormControl>\r\n        <FormLabel htmlFor={id}>\r\n          {label}\r\n          {!!required && \" *\"}\r\n        </FormLabel>\r\n\r\n        <DatePicker\r\n          selected={startDate}\r\n          peekNextMonth\r\n          showMonthDropdown\r\n          showYearDropdown\r\n          dropdownMode=\"select\"\r\n          id={id}\r\n          onBlur={() => setIsTouched(true)}\r\n          dateFormat=\"yyyy-MM-dd\"\r\n          selected={startDate}\r\n          value={value || dValue}\r\n          onChange={(date) => {\r\n            !!SyncWithVariable && SyncWithVariable(date);\r\n            setValue(date.toISOString().slice(0, 10), setStartDate(date));\r\n          }}\r\n        />\r\n      </FormControl>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const MyField = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        id={id}\r\n        type={type || \"text\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\n\r\nimport { ViewOffIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Input,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nexport const MyFieldPassword = (props) => {\r\n  const [showPassword, setshowPassword] = useState(false);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <InputGroup>\r\n        <Input\r\n          id={id}\r\n          type={showPassword ? `text` : `password`}\r\n          value={value ?? \"\"}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onBlur={() => setIsTouched(true)}\r\n          aria-invalid={showError}\r\n          aria-required={!!required}\r\n          aria-describedby={showError ? `${id}-error` : null}\r\n        />\r\n        <InputRightElement>\r\n          <Button\r\n            bgColor=\"transparent\"\r\n            size=\"sm\"\r\n            onClick={() => setshowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n          </Button>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { Box, Heading, Stack, StackProps } from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\n\r\nexport const FieldGroup = (props) => {\r\n  const { title, children, ...flexProps } = props;\r\n  return (\r\n    <Stack\r\n      direction={{ base: \"column\", md: \"row\" }}\r\n      spacing=\"6\"\r\n      py=\"4\"\r\n      {...flexProps}\r\n    >\r\n      <Box\r\n      // w={{ base: \"100%\", md: \"200px\", lg: \"200px\" }}\r\n      // minW={{ base: \"3xs\", md: \"10px\", lg: \"xs\" }}\r\n      >\r\n        {title && (\r\n          <Heading as=\"h2\" fontWeight=\"semibold\" fontSize=\"lg\" flexShrink={0}>\r\n            {title}\r\n          </Heading>\r\n        )}\r\n      </Box>\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { isNumber, isPattern } from \"@formiz/validations\";\r\nimport {\r\n  FormControl,\r\n  Button,\r\n  useColorModeValue as mode,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { FieldGroup } from \"./../../../components/FieldGroup\";\r\n\r\nconst GestiondeCopmtePatient = (props) => {\r\n  const { gcInfo, age } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <FieldGroup title=\"information sp√©cifique\">\r\n        <VStack width=\"full\" spacing=\"6\">\r\n          {age() > 18 ? (\r\n            ``\r\n          ) : (\r\n            <MyField\r\n              name=\"parent\"\r\n              label=\"Repr√©sentant l√©gal\"\r\n              Placeholder={gcInfo.parent}\r\n            />\r\n          )}\r\n\r\n          <MyField\r\n            name=\"Code_APCI\"\r\n            label=\"Code APCI\"\r\n            Placeholder={gcInfo.Code_APCI}\r\n            validations={[\r\n              {\r\n                rule: isNumber(),\r\n                message: \"Le code-APCI ne contient que des chiffres\",\r\n              },\r\n            ]}\r\n          />\r\n\r\n          <MyField\r\n            name=\"Adresse\"\r\n            label=\"Adresse\"\r\n            dtValue={gcInfo.Adresse}\r\n            Placeholder={gcInfo.Adresse}\r\n          />\r\n        </VStack>\r\n      </FieldGroup>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GestiondeCopmtePatient;\r\n","import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormHelperText,\r\n  FormLabel,\r\n} from \"@chakra-ui/form-control\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Text } from \"@chakra-ui/layout\";\r\n\r\nexport const Select2 = (props) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n  const { data, name, label, note, required } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n\r\n  const onClick = (e) => {\r\n    setClickCount(clickCount + 1);\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n  const changeValue = (e) => {\r\n    setValue(e);\r\n  };\r\n  const colourStyles = {\r\n    control: (styles) => ({ ...styles, backgroundColor: \"white\" }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isFocused ? mode(\"green\", \"teal\") : \"white\",\r\n        color: !isFocused ? \"#000\" : \"#FFF\",\r\n        cursor: isDisabled ? \"not-allowed\" : \"default\",\r\n      };\r\n    },\r\n  };\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label} {!!required && \" *\"}\r\n      </FormLabel>\r\n\r\n      <Select\r\n        id={id}\r\n        isSearchable\r\n        value={value ?? \"\"}\r\n        name={name}\r\n        placeholder={value}\r\n        onChange={(e) => changeValue(e)}\r\n        options={data}\r\n        onBlur={() => setIsTouched(true)}\r\n        styles={colourStyles}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useDomaine = ({ ...config } = {}) => {\r\n  return useQuery(\"domaine\", () => axios.get(\"dom\"), config);\r\n};\r\nexport const useSousDomaine = ({ params, ...config } = {}) => {\r\n  return useMutation(\r\n    ({ domaine_id }) => axios.post(\"sousdom\", { domaine_id }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useAddDomaine = (config) => {\r\n  return useMutation(({ nom }) => axios.post(\"ad\", { nom }), config);\r\n};\r\nexport const useAddSousDomaine = (config) => {\r\n  return useMutation(\r\n    ({ nom, domaine_id }) => axios.post(\"asd\", { nom, domaine_id }),\r\n    config\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const MyField = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl mt={5}>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        id={id}\r\n        type={type || \"text\"}\r\n        value={value ?? \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { MyField } from \"./../../../../MyField\";\r\nimport { Formiz } from \"@formiz/core\";\r\nimport { useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { isPattern } from \"@formiz/validations\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  useToast,\r\n  DrawerCloseButton,\r\n  DrawerFooter,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { useAddDomaine } from \"../../../../services/api/domaine\";\r\n\r\nconst AddDomaine = (props) => {\r\n  const { refetch } = props;\r\n  const toast = useToast();\r\n\r\n  const { mutate, isLoading } = useAddDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Acte ajout√© avec succ√®s\",\r\n        description: \"Vous pouvez le choisir √† partir de la liste\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      refetch();\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const SubmitAPI = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        mx={2}\r\n        position=\"relative\"\r\n        top=\"31px\"\r\n        // bg={mode(\"blue.400\", \"blue.800\")}\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"teal\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Ajout acte</DrawerHeader>\r\n            <DrawerBody>\r\n              <Formiz connect={myForm} onValidSubmit={SubmitAPI}>\r\n                <form\r\n                  noValidate\r\n                  onSubmit={myForm.submit}\r\n                  multiple\r\n                  // encType=\"multipart/form-data\"\r\n                >\r\n                  <MyField\r\n                    name=\"nom\"\r\n                    label=\"Domaine\"\r\n                    required=\"Il est requis de compl√©ter le champ correspondant au domaine\"\r\n                    validations={[\r\n                      {\r\n                        rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                        message: \"Le nom ne contient que des lettres\",\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Box m={2}>\r\n                    <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                      Annuler\r\n                    </Button>\r\n                    <Button\r\n                      w=\"40%\"\r\n                      type=\"submit\"\r\n                      borderColor=\"green.500\"\r\n                      disabled={!myForm.isValid}\r\n                    >\r\n                      Enregistrer\r\n                      {!myForm.isValid ? `` : `üëå`}\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              </Formiz>\r\n            </DrawerBody>\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddDomaine;\r\n","import React, { useRef } from \"react\";\r\nimport { MyField } from \"./../../../../MyField\";\r\nimport { Formiz } from \"@formiz/core\";\r\nimport { useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { isPattern } from \"@formiz/validations\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  useToast,\r\n  DrawerCloseButton,\r\n  DrawerFooter,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { useAddSousDomaine } from \"../../../../services/api/domaine\";\r\nconst SousDomaine = (props) => {\r\n  const { mutateSousD, domaine } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddSousDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      toast({\r\n        title: \"Sous domaine ajout√© avec succ√®s\",\r\n        description: \"Vous pouvez le choisir √† partir de la liste\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      mutateSousD({ domaine_id: domaine });\r\n\r\n      onClose();\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const SubmitAPI = (values) => {\r\n    values.domaine_id = domaine;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        mx={2}\r\n        position=\"relative\"\r\n        top=\"31px\"\r\n        // bg={mode(\"blue.400\", \"blue.800\")}\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"teal\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Ajout Sous-domaine</DrawerHeader>\r\n            <DrawerBody>\r\n              <Formiz connect={myForm} onValidSubmit={SubmitAPI}>\r\n                <form\r\n                  noValidate\r\n                  onSubmit={myForm.submit}\r\n                  multiple\r\n                  // encType=\"multipart/form-data\"\r\n                >\r\n                  <MyField\r\n                    name=\"nom\"\r\n                    label=\"Sous Domaine\"\r\n                    required=\"Il est requis de compl√©ter le champ correspondant au sous-domaine\"\r\n                    validations={[\r\n                      {\r\n                        rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                        message: \"Le nom ne contient que des lettres\",\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Box m={2}>\r\n                    <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                      Annuler\r\n                    </Button>\r\n                    <Button\r\n                      w=\"40%\"\r\n                      type=\"submit\"\r\n                      borderColor=\"green.500\"\r\n                      disabled={!myForm.isValid}\r\n                    >\r\n                      Enregister\r\n                      {!myForm.isValid ? `` : `üëå`}\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              </Formiz>\r\n            </DrawerBody>\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default SousDomaine;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  useToast,\r\n  useColorModeValue as mode,\r\n  VStack,\r\n  Flex,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { Select2 } from \"../../../components/formInput/select\";\r\nimport { isNumber, isPattern } from \"@formiz/validations\";\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { useDomaine, useSousDomaine } from \"./../../../services/api/domaine\";\r\nimport { FieldGroup } from \"./../../../components/FieldGroup\";\r\nimport AddDomaine from \"./_partials/Domaine\";\r\nimport SousDomaine from \"./_partials/SousDomaine\";\r\n\r\nconst GestiondeCopmteMedecin = (props) => {\r\n  const { gcInfo, valueForm } = props;\r\n\r\n  const [domaine, setDomaine] = useState([]);\r\n  const [sousDomaine, setSousDomaine] = useState([]);\r\n  const [DomaineSelected, setDomaineSelected] = useState(0);\r\n\r\n  const toast = useToast();\r\n  const { isLoading, refetch } = useDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setDomaine(res.data);\r\n    },\r\n  });\r\n  const param = { id: valueForm.SelectDomaine };\r\n  const { isLoading: isLoadingSousD, mutate: mutateSousD } = useSousDomaine({\r\n    param,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSousDomaine(res.data);\r\n    },\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <FieldGroup title=\"Information sp√©cifique\">\r\n        <VStack width=\"full\" spacing=\"6\">\r\n          <MyField\r\n            name=\"adresse_physique\"\r\n            label=\"Adresse\"\r\n            Placeholder={gcInfo.adresse_physique}\r\n\r\n            // validations={[\r\n            //   {\r\n            //     rule: isPattern(\"^[a-zAZ ]*$\"),\r\n            //     message: \"L'adresse physique ne contient que des lettres\",\r\n            //   },\r\n            // ]}\r\n          />\r\n\r\n          <Flex w=\"100%\">\r\n            <Select2\r\n              data={domaine}\r\n              label=\"Domaine\"\r\n              onChange={(event) => {\r\n                setDomaineSelected(event.value);\r\n                setSousDomaine([]);\r\n                mutateSousD({ domaine_id: event.value });\r\n              }}\r\n              name=\"SelectDomaine\"\r\n            />\r\n            <Box>\r\n              <AddDomaine refetch={refetch} />\r\n            </Box>\r\n          </Flex>\r\n          <Flex w=\"100%\">\r\n            <Select2\r\n              onChange={() => refetch()}\r\n              data={sousDomaine}\r\n              label=\"Sous Domaine\"\r\n              name=\"selectSousDomaine\"\r\n            />\r\n            <Box display={DomaineSelected != 0 ? `` : `none`}>\r\n              <SousDomaine\r\n                mutateSousD={mutateSousD}\r\n                domaine={DomaineSelected}\r\n              />\r\n            </Box>\r\n          </Flex>\r\n          <MyField\r\n            name=\"secretaire\"\r\n            label=\"Secr√©taire\"\r\n            note=\"Entrez le cin ou le num√©ro de t√©l√©phone ou l'email de la secr√©taire. Pour supprimer vous devez √©crire 'supprimer'\"\r\n            Placeholder={gcInfo.secretaire}\r\n          />\r\n        </VStack>\r\n      </FieldGroup>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GestiondeCopmteMedecin;\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { HiCloudUpload } from \"react-icons/hi\";\r\nexport const ImageFile = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted } = useField(props);\r\n  const {\r\n    label,\r\n    type,\r\n    required,\r\n    note,\r\n    Placeholder,\r\n    pictures,\r\n    setPictures,\r\n  } = props;\r\n  const onchange = (e) => {\r\n    setPictures(e.target.files[0]);\r\n  };\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        <Button\r\n          leftIcon={<HiCloudUpload />}\r\n          onClick={() => {\r\n            document.getElementById(id).click();\r\n          }}\r\n        >\r\n          Changer la photo {!!required && \" *\"}\r\n        </Button>\r\n      </FormLabel>\r\n      <input\r\n        id={id}\r\n        type=\"file\"\r\n        placeholder={Placeholder || label}\r\n        onChange={(e) => onchange(e)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  isNumber,\r\n  isLength,\r\n  isEmail,\r\n  isPattern,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport {\r\n  Box,\r\n  Radio,\r\n  Stack,\r\n  RadioGroup,\r\n  FormControl,\r\n  Button,\r\n  Spinner,\r\n  Center,\r\n  VStack,\r\n  Avatar,\r\n  HStack,\r\n  useColorModeValue,\r\n  Text,\r\n  Divider,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { InputDate } from \"./../../components/formInput/date\";\r\n\r\nimport { MyField } from \"./../../components/formInput\";\r\nimport { MyFieldPassword } from \"./../../components/formInput/password\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport GestiondeCopmtePatient from \"./gestion compte patient\";\r\nimport GestiondeCopmteMedecin from \"./gestion compte medecin\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useRemovePhoto,\r\n  useUpdateComptePatient,\r\n} from \"./../../services/api/Update Compte\";\r\n//import { useUpdateCompteMedecin } from \"./../../services/api/Update Compte/update_compte_medecin\";\r\nimport { ImageFile } from \"./../../components/formInput/image\";\r\nimport { FieldGroup } from \"./../../components/FieldGroup\";\r\nimport { useGestionDeCompte } from \"./../../services/api/gestion de compte\";\r\nimport { link } from \"./../../services/api\";\r\n\r\nconst Accountmanagement = () => {\r\n  const [pictures, setPictures] = useState(null);\r\n  const [showpictures, setShowPictures] = useState(null);\r\n  const { user, setUser } = useContext(TbibyContext);\r\n\r\n  const { mutate, isLoading } = useUpdateComptePatient({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      gcRefetch();\r\n      let userValue = { ...user, ...res.data };\r\n      localStorage.setItem(\"user\", JSON.stringify(userValue));\r\n      setUser(userValue);\r\n      let ch = \"\";\r\n      for (const [key, value] of Object.entries(res.data)) {\r\n        ch = ch + `|  ${value} |  `;\r\n      }\r\n      if (ch != \"\") {\r\n        toast({\r\n          title: \"Erreur sous la forme\",\r\n          description: ch,\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"Mise √† jour r√©ussie\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  const [gcInfo, setGcInfo] = useState({});\r\n  const toast = useToast();\r\n  const params = { id: user.id };\r\n  const { isLoading: gcLoding, refetch: gcRefetch } = useGestionDeCompte({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      console.log(res);\r\n      console.log(\"user\");\r\n      console.log(user);\r\n      let newUser = { ...res.data };\r\n      newUser.isAuthenticated = true;\r\n      newUser.fonctionnalite = user.fonctionnalite;\r\n      setUser(newUser);\r\n      setGcInfo(res.data);\r\n      setSexes(newUser.sexes);\r\n    },\r\n  });\r\n  const { mutate: RMmutate, isLoading: RMisLoading } = useRemovePhoto({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      gcRefetch();\r\n    },\r\n  });\r\n  const [sexes, setSexes] = React.useState();\r\n  const handleSubmit = (values) => {\r\n    values.id = user.id;\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = user.fonctionnalite;\r\n    values.photo = pictures;\r\n    if (!!values.SelectDomaine) {\r\n      values.SelectDomaine = values.SelectDomaine.value;\r\n    }\r\n    if (!!values.selectSousDomaine) {\r\n      values.selectSousDomaine = values.selectSousDomaine.value;\r\n    }\r\n    const data = new FormData();\r\n    Object.keys(values).map((value, index) => {\r\n      data.append(value, values[value]);\r\n    });\r\n    mutate(data);\r\n  };\r\n\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const age = () => {\r\n    return Math.abs(\r\n      new Date(\r\n        Date.now() -\r\n          new Date(values.date_naissance || gcInfo.date_naissance).getTime()\r\n      ).getUTCFullYear() - 1970\r\n    );\r\n  };\r\n  const getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n  getBase64(pictures)\r\n    .then((res) => setShowPictures(res))\r\n    .catch((err) => console.log(err));\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        px={{ base: \"4\", md: \"3\", lg: \"10\" }}\r\n        py=\"16\"\r\n        // maxWidth=\"xl\"\r\n        mx=\"auto\"\r\n        display={isLoading ? `none` : ``}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form\r\n            noValidate\r\n            onSubmit={myForm.submit}\r\n            multiple\r\n            // encType=\"multipart/form-data\"\r\n          >\r\n            <FieldGroup title=\"informations g√©n√©rales\">\r\n              <VStack width=\"full\" spacing=\"6\">\r\n                <MyField\r\n                  name=\"nom\"\r\n                  label=\"Nom\"\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au nom\"\r\n                  validations={[\r\n                    {\r\n                      rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                      message: \"Le nom ne contient que des lettres\",\r\n                    },\r\n                  ]}\r\n                  Placeholder={gcInfo.nom}\r\n                />\r\n\r\n                <MyField\r\n                  name=\"prenom\"\r\n                  label=\"Pr√©nom\"\r\n                  Placeholder={gcInfo.prenom}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au prenom\"\r\n                  validations={[\r\n                    {\r\n                      rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                      message: \"Le prenom ne contient que des lettres\",\r\n                    },\r\n                  ]}\r\n                />\r\n\r\n                <FormControl>\r\n                  <Center>\r\n                    <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                      <Stack direction=\"row\" size=\"lg\">\r\n                        <Radio value=\"homme\" _selected py={3} px={10}>\r\n                          Homme üë®‚Äçü¶∞\r\n                        </Radio>\r\n                        <Radio value=\"femme\" py={3} px={10}>\r\n                          Femme üë©‚Äçü¶∞\r\n                        </Radio>\r\n                      </Stack>\r\n                    </RadioGroup>\r\n                  </Center>\r\n                </FormControl>\r\n\r\n                <InputDate\r\n                  name=\"date_naissance\"\r\n                  label=\"Date de naissance\"\r\n                  dValue={gcInfo.date_naissance}\r\n                  //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n                />\r\n\r\n                <MyField\r\n                  name=\"cin\"\r\n                  label=\"C.I.N\"\r\n                  Placeholder={gcInfo.cin}\r\n                  validations={[\r\n                    {\r\n                      rule: isNumber(),\r\n                      message:\r\n                        \"La carte d'identit√© ne contient que des chiffres\",\r\n                    },\r\n                    {\r\n                      rule: isLength(8),\r\n                      message:\r\n                        \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                    },\r\n                    {\r\n                      rule: (val) =>\r\n                        !!val || !!values.email || !!values.telephone,\r\n                      message:\r\n                        \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                      deps: [values.email, values.telephone],\r\n                    },\r\n                  ]}\r\n                />\r\n                <MyField\r\n                  name=\"telephone\"\r\n                  label=\"T√©l√©phone\"\r\n                  Placeholder={gcInfo.telephone}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au telephone\"\r\n                  validations={[\r\n                    {\r\n                      rule: isNumber(),\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                    },\r\n                    {\r\n                      rule: isLength(8),\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                    },\r\n                    {\r\n                      rule: (val) => !!val || !!values.cin || !!values.email,\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                      deps: [values.cin, values.email],\r\n                    },\r\n                  ]}\r\n                />\r\n                <MyField\r\n                  name=\"email\"\r\n                  label=\"E-mail\"\r\n                  Placeholder={gcInfo.email}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au mail\"\r\n                  validations={[\r\n                    {\r\n                      rule: isEmail(),\r\n                      message:\r\n                        \"Veuillez v√©rifier le format de l'E-mail(doit contenir @ et .)\",\r\n                    },\r\n                    {\r\n                      rule: (val) =>\r\n                        !!val || !!values.cin || !!values.telephone,\r\n                      message: 'Le champ E-mail doit contenir \"@\" et \".\"',\r\n                      deps: [values.cin, values.telephone],\r\n                    },\r\n                  ]}\r\n                />\r\n\r\n                <MyFieldPassword\r\n                  name=\"password\"\r\n                  label=\"Mot de passe\"\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au mot-de-passe\"\r\n                  type=\"password\"\r\n                  validations={[\r\n                    {\r\n                      rule: isMinLength(6),\r\n                      message:\r\n                        \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                    },\r\n                  ]}\r\n                />\r\n              </VStack>\r\n            </FieldGroup>\r\n            <Divider />\r\n            <FieldGroup title=\"Photo de Profil\">\r\n              <Stack direction=\"row\" spacing=\"10\" align=\"center\" width=\"full\">\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={gcInfo.nom + \" \" + gcInfo.prenom}\r\n                  src={\r\n                    !!showpictures\r\n                      ? showpictures\r\n                      : gcInfo.photo && `${link}${gcInfo.photo}`\r\n                  }\r\n                />\r\n                <Box>\r\n                  <HStack spacing=\"5\">\r\n                    <ImageFile\r\n                      pictures={pictures}\r\n                      setPictures={setPictures}\r\n                      name=\"photo\"\r\n                      label=\"photo\"\r\n                    />\r\n                    <Button\r\n                      display={\r\n                        !!gcInfo.photo || !!showpictures ? `block` : `none`\r\n                      }\r\n                      variant=\"ghost\"\r\n                      colorScheme=\"red\"\r\n                      onClick={() => {\r\n                        (!!showpictures &&\r\n                          setShowPictures(null, setPictures(null))) ||\r\n                          RMmutate({ id: user.id });\r\n                        gcRefetch();\r\n                      }}\r\n                    >\r\n                      Effacer\r\n                    </Button>\r\n                  </HStack>\r\n                  <Text\r\n                    fontSize=\"sm\"\r\n                    mt=\"3\"\r\n                    color={useColorModeValue(\"gray.500\", \"whiteAlpha.600\")}\r\n                  >\r\n                    .jpg, .gif, or .png.\r\n                  </Text>\r\n                </Box>\r\n              </Stack>\r\n            </FieldGroup>\r\n            <Divider />\r\n\r\n            {user.fonctionnalite == \"patient\" ? (\r\n              <GestiondeCopmtePatient gcInfo={gcInfo} age={age} />\r\n            ) : (\r\n              ``\r\n            )}\r\n            {user.fonctionnalite == \"medecin\" ? (\r\n              <GestiondeCopmteMedecin valueForm={values} gcInfo={gcInfo} />\r\n            ) : (\r\n              ``\r\n            )}\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Sauvegarder\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Accountmanagement;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"..\";\r\nimport { link } from \"./..\";\r\nconst headers = {\r\n  // \"Content-type\": \"multipart/form-data\",\r\n};\r\nexport const useUpdateComptePatient = (config) => {\r\n  return useMutation((params) => {\r\n    return axios({\r\n      method: \"POST\",\r\n      url: link + \"/api/ucp\",\r\n      data: params,\r\n      // headers: { ...params.photo.getHeaders() },\r\n    });\r\n  }, config);\r\n};\r\nexport const useRemovePhoto = (params, ...config) => {\r\n  return useMutation((params) => axios.post(\"rmpp\", params), config);\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useGestionDeCompte = ({ params, ...config } = {}) => {\r\n  return useQuery(\"gcf\", () => axios.get(\"gcf\", { params }), config);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { TbibyContext } from \"./../context/index\";\r\n\r\nexport const PrivateRoute = ({ isAuth, ...otherProps }) => {\r\n  const { user } = useContext(TbibyContext);\r\n  if (user.isAuthenticated) {\r\n    if (isAuth) {\r\n      return <Route exact {...otherProps} />;\r\n    } else {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/dashboard\",\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/login\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nexport const TableActions = (props) => {\r\n  const {\r\n    chercherFn,\r\n    buttonText,\r\n    buttonIcon,\r\n    buttonhoverTesxt,\r\n    inputhoverTesxt,\r\n  } = props;\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  return (\r\n    <Stack\r\n      pt={10}\r\n      spacing=\"4\"\r\n      direction={{ base: \"column\", md: \"row\" }}\r\n      justify=\"space-between\"\r\n    >\r\n      <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n        <Tooltip\r\n          label={inputhoverTesxt || ``}\r\n          aria-label={inputhoverTesxt || ``}\r\n        >\r\n          <FormControl w=\"100%\" id=\"search\">\r\n            <InputGroup size=\"sm\">\r\n              <FormLabel srOnly>Filtrer par nom ou par e-mail</FormLabel>\r\n              <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                <BsSearch />\r\n              </InputLeftElement>\r\n              <Input\r\n                rounded=\"base\"\r\n                type=\"search\"\r\n                onChange={(value) => setInputValue(value.target.value)}\r\n                placeholder=\"Filtrer\"\r\n              />\r\n            </InputGroup>\r\n          </FormControl>\r\n        </Tooltip>\r\n\r\n        <Tooltip\r\n          label={buttonhoverTesxt || ``}\r\n          aria-label={buttonhoverTesxt || ``}\r\n        >\r\n          <ButtonGroup size=\"sm\" variant=\"outline\">\r\n            <Button\r\n              w=\"100%\"\r\n              onClick={() => chercherFn(inputValue)}\r\n              iconSpacing=\"1\"\r\n              leftIcon={buttonIcon}\r\n            >\r\n              {buttonText}\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Tooltip>\r\n      </Grid>\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Box,\r\n  Text,\r\n  Heading,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport * as React from \"react\";\r\n\r\nexport const TableContent = (props) => {\r\n  const { header, content, fntable, message } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        display={!!content && content.length != 0 ? `none` : ``}\r\n        maxW=\"2xl\"\r\n        mx=\"auto\"\r\n        px={{ base: \"6\", lg: \"8\" }}\r\n        py={{ base: \"16\", sm: \"20\" }}\r\n        textAlign=\"center\"\r\n      >\r\n        {!!message ? (\r\n          message()\r\n        ) : (\r\n          <>\r\n            <Heading\r\n              as=\"h2\"\r\n              size=\"lg\"\r\n              fontWeight=\"extrabold\"\r\n              letterSpacing=\"tight\"\r\n            >\r\n              Vous n'avez aucune information\r\n            </Heading>\r\n          </>\r\n        )}\r\n      </Box>\r\n      <Table\r\n        overflowX=\"scroll\"\r\n        w=\"100%\"\r\n        display={content.length == 0 ? `none` : ``}\r\n        my=\"8\"\r\n        borderWidth=\"1px\"\r\n        fontSize=\"sm\"\r\n      >\r\n        <Thead bg={mode(\"green.100\", \"gray.800\")}>\r\n          <Tr textAlign=\"center\">\r\n            {header.map((column, index) => (\r\n              <Th\r\n                maxW=\"10%\"\r\n                whiteSpace=\"normal\"\r\n                scope=\"col\"\r\n                color={mode(\"green.900\", \"gray.50\")}\r\n                key={index}\r\n              >\r\n                {column}\r\n              </Th>\r\n            ))}\r\n            {!!fntable ? (\r\n              <Th textAlign=\"center\" color={mode(\"green.900\", \"gray.50\")}>\r\n                acte\r\n              </Th>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {content.map((row, index) => (\r\n            <Tr key={index} whiteSpace=\"normal\">\r\n              {Object.values(row)\r\n                .slice(1)\r\n                .map((column, indexcol) =>\r\n                  indexcol < Object.values(header).length ? (\r\n                    <Td maxW=\"100px\" whiteSpace=\"normal\" key={indexcol}>\r\n                      {column}\r\n                    </Td>\r\n                  ) : null\r\n                )}\r\n              {!!fntable ? (\r\n                <Td textAlign=\"right\">\r\n                  <Box textAlign=\"center\">\r\n                    {!!fntable ? fntable.fn(row) : ``}\r\n                    {!!fntable ? !!fntable.fn2 && fntable.fn2(row) : ``}\r\n                  </Box>\r\n                  <Box textAlign=\"center\">\r\n                    {!!fntable ? !!fntable.fn3 && fntable.fn3(row) : ``}\r\n                  </Box>\r\n                </Td>\r\n              ) : (\r\n                ``\r\n              )}\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  Flex,\r\n  Text,\r\n  Box,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\n\r\nexport const TablePagination = (props) => {\r\n  const { total, prev_page_url, next_page_url, setPage, page } = props;\r\n\r\n  return (\r\n    <Box px={2} display={total == 0 ? `none` : ``}>\r\n      <Flex align=\"center\" justify=\"space-between\">\r\n        <Text color={mode(\"green.600\", \"gray.400\")} fontSize=\"sm\">\r\n          {total} Colonne\r\n        </Text>\r\n        <ButtonGroup variant=\"outline\" size=\"sm\">\r\n          {!!prev_page_url ? (\r\n            <Button as=\"a\" onClick={() => setPage(page - 1)} rel=\"Pr√©c√©dente\">\r\n              Pr√©c√©dente\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n          <Box m={1}> Page {page}</Box>\r\n          {!!next_page_url ? (\r\n            <Button as=\"a\" onClick={() => setPage(page + 1)} rel=\"Suivante\">\r\n              Suivante\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n        </ButtonGroup>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useRelation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id }) =>\r\n      axios.post(\"rmp\", { medecin_id, patient_id }),\r\n    config\r\n  );\r\n};\r\nconst list = () => {\r\n  axios.get();\r\n};\r\nexport const useRelationListe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"Liste de mes patients\", params],\r\n    () => axios.get(\"lrmp\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useRelationPM = ({ params, ...config } = {}) => {\r\n  return useQuery(\"pm\", () => axios.get(\"pm\", { params }), config);\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Stack,\r\n  FormControl,\r\n  Button,\r\n  Text,\r\n  ButtonGroup,\r\n  SimpleGrid,\r\n  Spinner,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useRelation } from \"./../../../services/api/relation\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nconst AjouPatient = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { refetch } = props;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const { mutate, isLoading } = useRelation({\r\n    onError: (error) => {\r\n      setMessage(\r\n        \"V√©rifiez les informations de contact ou la liste que vous avez ins√©r√©es\"\r\n      );\r\n    },\r\n    onSuccess: (res) => {\r\n      setMessage(\"\");\r\n      refetch();\r\n    },\r\n  });\r\n  const myForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.medecin_id = user.id;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={myForm.submit}>\r\n          <Stack\r\n            spacing=\"2\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <SimpleGrid columns={2} spacing={1} w=\"100%\">\r\n              <Tooltip\r\n                label=\"Entrez le cin, l'email ou le t√©l√©phone du patient\"\r\n                aria-label=\"Entrez le cin, l'email ou le t√©l√©phone du patient\"\r\n              >\r\n                <FormControl minW={{ md: \"320px\" }} id=\"search\">\r\n                  <MyField name=\"patient_id\" Placeholder=\"ajouter un patient\" />\r\n                  <Text color=\"tomato\">{message}</Text>\r\n                </FormControl>\r\n              </Tooltip>\r\n              <Tooltip\r\n                label=\"ajouter un patient\"\r\n                aria-label=\"ajouter un patient\"\r\n              >\r\n                <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                  <Button\r\n                    position=\"relative\"\r\n                    top=\"8px\"\r\n                    type=\"submit\"\r\n                    fontSize=\"20px\"\r\n                    p={5}\r\n                    w=\"100%\"\r\n                  >\r\n                    <Spinner\r\n                      display={!isLoading ? `none` : ``}\r\n                      color=\"red.500\"\r\n                    />\r\n                    Ajouter ü§í\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Tooltip>\r\n            </SimpleGrid>\r\n          </Stack>\r\n        </form>\r\n      </Formiz>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AjouPatient;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Stack, Skeleton } from \"@chakra-ui/react\";\r\n\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListActe } from \"../../../services/api/Historique patient\";\r\n\r\nconst ContentActe = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"Code\", \"Designation\", \"note\", \"Date\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  let params = {};\r\n\r\n  if (!!user.email) {\r\n    params = { patient_id: patient.id, page };\r\n  } else {\r\n    params = { medecin_id, patient_id: patient.id, page };\r\n  }\r\n  console.log(params);\r\n  const { isLoading: isLodingActe, refetch: refetchActe } =\r\n    useHistoriqueListActe({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \":Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        setContent((res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n  return (\r\n    <>\r\n      {!isLodingActe ? (\r\n        <>\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Stack mt=\"40px\">\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContentActe;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useHistoriqueListConsultation = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hc\", () => axios.get(\"hc\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hcertif\", params],\r\n    () => axios.get(\"hcertif\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hact\", params],\r\n    () => axios.get(\"hact\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListAntecedants = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hant\", params],\r\n    () => axios.get(\"hant\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListExamen = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hex\", () => axios.get(\"hex\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListOrdonnance = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hor\", () => axios.get(\"hor\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListLettre = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hl\", () => axios.get(\"hl\", { params }), config);\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Spinner,\r\n  useToast,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n  useDisclosure,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport ContentActe from \"./content\";\r\nconst HistoriqueActe = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n  const btnRef = React.useRef();\r\n\r\n  // let header = [\"Code\", \"Designation\", \"note\"];\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n        onClick={onOpen}\r\n      >\r\n        Acte\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Acte</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <ContentActe patient={patient} />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueActe;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const usePatentInfo = ({ params, ...config } = {}) => {\r\n  return useQuery(\"pinfo\", () => axios.get(\"pinfo\", { params }), config);\r\n};\r\n\r\nexport const useAntecedants = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"antecedants\",\r\n    () => axios.get(\"antecedants\", { params }),\r\n    config\r\n  );\r\n};\r\n","import { useMedecinInfo } from \"./../../services/api/Medecin information\";\r\nimport { useToast, Text, Button, Avatar } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport React from \"react\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"../../services/api\";\r\nconst InformationsSurLeMedecin = (props) => {\r\n  const { medecin } = props;\r\n  const [medecinInfo, setMedecinInfo] = useState([]);\r\n  const params = { id: medecin };\r\n  const toast = useToast();\r\n  const { isLoading, refetch } = useMedecinInfo({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setMedecinInfo(res.data);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>{medecinInfo.nom}</Text>\r\n      {medecinInfo.photo && (\r\n        <Avatar\r\n          size=\"xl\"\r\n          name={medecinInfo.nom}\r\n          src={`${link}${medecinInfo.photo}`}\r\n        />\r\n      )}\r\n      <Text display=\"block\" as=\"a\" href={\"tel:\" + medecinInfo.telephone}>\r\n        <Button\r\n          my={1}\r\n          leftIcon={<MdCall />}\r\n          colorScheme=\"green\"\r\n          variant=\"outline\"\r\n        >\r\n          Appelles\r\n        </Button>\r\n      </Text>\r\n\r\n      <Text as=\"a\" href={\"mailto:\" + medecinInfo.email}>\r\n        <Button\r\n          my={1}\r\n          colorScheme=\"green\"\r\n          leftIcon={<EmailIcon />}\r\n          variant=\"outline\"\r\n        >\r\n          Email\r\n        </Button>\r\n      </Text>\r\n      <Text>{medecinInfo.sexes}</Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default InformationsSurLeMedecin;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useMedecinInfo = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"medecininfo\", params],\r\n    () => axios.get(\"medecininfo\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useListeMedec = ({ params, ...config } = {}) => {\r\n  return useQuery(\"liste medecin\", () => axios.get(\"lm\", { params }), config);\r\n};\r\n","import {\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nconst DescriptionMobile = (props) => {\r\n  const { data } = props;\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  return isMobile ? (\r\n    <Text fontSize=\"20px\" color={mode(\"green.700\", \"gray.50\")} m={1}>\r\n      <Popover>\r\n        <PopoverTrigger>\r\n          <Text\r\n            textAlign=\"center\"\r\n            bgColor={mode(\"green.100\", \"gray.500\")}\r\n            _hover={{\r\n              background: mode(\"blue.100\", \"gray.600\"),\r\n            }}\r\n            style={{ cursor: \"pointer\" }}\r\n            borderRadius=\"20px\"\r\n            p={2}\r\n            colorScheme=\"green\"\r\n          >\r\n            Description\r\n          </Text>\r\n        </PopoverTrigger>\r\n        <PopoverContent>\r\n          <PopoverArrow />\r\n          <PopoverCloseButton />\r\n          <PopoverHeader>Plus d'information</PopoverHeader>\r\n          <PopoverBody>{data.description}</PopoverBody>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </Text>\r\n  ) : null;\r\n};\r\nexport default DescriptionMobile;\r\n","import { useAntecedants } from \"../../services/api/patient information\";\r\nimport {\r\n  Button,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  IconButton,\r\n  SkeletonText,\r\n  useToast,\r\n  Text,\r\n  useColorModeValue as mode,\r\n  DrawerFooter,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport InformationsSurLeMedecin from \"./../InformationsSurLeMedecin\";\r\nimport { TableContent } from \"./../table/TableContent\";\r\nimport { TablePagination } from \"./../table/TablePagination\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport DescriptionMobile from \"./descriptionMobile\";\r\nimport { BsHeart } from \"react-icons/bs\";\r\n\r\nconst Antecedants = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const { patient } = props;\r\n  const toast = useToast();\r\n  const params = { patient_id: patient.id };\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [patientInfo, setPatientInfo] = useState([]);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  let header = [\"type\", \"description\", \"Date\"];\r\n  if (isMobile) {\r\n    header = [\"type\"];\r\n  } else {\r\n    header = [\"type\", \"description\", \"Date\"];\r\n  }\r\n  const { isLoading, refetch } = useAntecedants({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setPatientInfo(res.data.data);\r\n    },\r\n  });\r\n\r\n  // console.log(patientInfo);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <Text fontSize=\"20px\" colorScheme={mode(\"green.700\", \"gray.50\")}>\r\n        <Popover>\r\n          <PopoverTrigger>\r\n            <Text\r\n              textAlign=\"center\"\r\n              bgColor={mode(\"green.100\", \"gray.500\")}\r\n              _hover={{\r\n                background: mode(\"blue.100\", \"gray.600\"),\r\n              }}\r\n              style={{ cursor: \"pointer\" }}\r\n              borderRadius=\"20px\"\r\n              p={2}\r\n              colorScheme=\"green\"\r\n            >\r\n              {data.medecin}\r\n            </Text>\r\n          </PopoverTrigger>\r\n\r\n          <PopoverContent>\r\n            <PopoverArrow />\r\n            <PopoverCloseButton />\r\n            <PopoverHeader>Plus d'information</PopoverHeader>\r\n            <PopoverBody>\r\n              <InformationsSurLeMedecin medecin={data.medecin_id} />\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </Text>\r\n    ),\r\n    fn2: (data) => <DescriptionMobile data={data} />,\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <Button colorScheme={mode(\"green\", \"green\")} onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Trouver tous les ant√©c√©dents m√©dicaux`}\r\n          aria-label=\"Trouver tous les ant√©c√©dents m√©dicaux\"\r\n        >\r\n          {isMobile ? <BsHeart fontSize=\"30px\" /> : `Ant√©c√©dents`}\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer placement=\"left\" size=\"xl\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerHeader borderBottomWidth=\"1px\">\r\n            Antecedants\r\n            <IconButton\r\n              float=\"right\"\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              m={1}\r\n              colorScheme=\"red\"\r\n              fontSize=\"10px\"\r\n              icon={<CloseIcon />}\r\n              onClick={() => onClose()}\r\n            />\r\n          </DrawerHeader>\r\n          <DrawerBody display={!isLoading ? `none` : ``}>\r\n            <SkeletonText mt=\"7\" noOfLines={7} spacing=\"7\" />\r\n          </DrawerBody>\r\n          <DrawerBody display={isLoading ? `none` : ``}>\r\n            <TableContent\r\n              header={header}\r\n              content={patientInfo}\r\n              fntable={fntable}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Antecedants;\r\n","import React, { useState, useContext, useRef } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { RiPrinterFill } from \"react-icons/ri\";\r\nimport { usePatentInfo } from \"./../../services/api/patient information\";\r\n\r\nconst InputSunEditor = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n  const {\r\n    label,\r\n    required,\r\n    note,\r\n    Placeholder,\r\n    dtValue,\r\n    Patient,\r\n    editorRef,\r\n    disabled,\r\n  } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  //   const editorRef = useRef();\r\n  const toast = useToast();\r\n\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const paramsPatentInfo = { cms_users_id: Patient.id };\r\n  const { isLoading: isLodingForPatentInfo, refetch: refetchPatentInfo } =\r\n    usePatentInfo({\r\n      params: paramsPatentInfo,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setPatientInfo(res.data);\r\n      },\r\n    });\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n    setValue(content);\r\n  };\r\n  const replaceAll = (string, search, replace) => {\r\n    return string.split(search).join(replace);\r\n  };\r\n  const decodeMessage = (text) => {\r\n    let sexesM = user.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    let sexesP = Patient.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    text = replaceAll(text, \"{sexesPatient}\", sexesP);\r\n    text = replaceAll(text, \"{medecinNomPrenom}\", user.nom + \" \" + user.prenom);\r\n    text = replaceAll(\r\n      text,\r\n      \"{patientNomPrenom}\",\r\n      patientInfo.nom + \" \" + patientInfo.prenom\r\n    );\r\n    text = replaceAll(text, \"{addresPatient}\", Patient.Adresse);\r\n    text = replaceAll(text, \"{sexesmedecin}\", sexesM);\r\n    text = replaceAll(text, \"{specialiteMedecin}\", \"\");\r\n    text = replaceAll(text, \"{domaineMedecin}\", \"\");\r\n    text = replaceAll(\r\n      text,\r\n      \"{datePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? new Date(patientInfo.date_naissance).toISOString().slice(0, 10)\r\n        : ``\r\n    );\r\n    text = replaceAll(\r\n      text,\r\n      \"{thisDate}\",\r\n      new Date().toISOString().slice(0, 10)\r\n    );\r\n\r\n    text = replaceAll(\r\n      text,\r\n      \"{agePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? Math.abs(\r\n            new Date(\r\n              Date.now() - new Date(patientInfo.date_naissance).getTime()\r\n            ).getUTCFullYear() - 1970\r\n          )\r\n        : ``\r\n    );\r\n\r\n    return text;\r\n  };\r\n  const print = () => {\r\n    const mywindow = window.open(\"\", \"PRINT\");\r\n\r\n    mywindow.document.write(decodeMessage(editerValue));\r\n\r\n    mywindow.document.close(); // necessary for IE >= 10\r\n\r\n    mywindow.focus(); // necessary for IE >= 10*/\r\n    mywindow.addEventListener(\"afterprint\", function (event) {\r\n      mywindow.close();\r\n    });\r\n    mywindow.print();\r\n  };\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>{label}</FormLabel>\r\n      <SunEditor\r\n        disable={!!disabled}\r\n        ref={editorRef}\r\n        id={id}\r\n        placeholder={\r\n          Placeholder ||\r\n          \"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n        }\r\n        value={value || dtValue || \"\"}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n        lang=\"fr\"\r\n        name=\"my-editor\"\r\n        height=\"auto\"\r\n        showToolbar={true}\r\n        values={editerValue}\r\n        onChange={handleChange}\r\n        setOptions={{\r\n          height: 200,\r\n          buttonList: [\r\n            [\"undo\", \"redo\"],\r\n            [\r\n              \"font\",\r\n              \"fontSize\",\r\n              \"formatBlock\",\r\n              \":p-More Paragraph-default.more_paragraph\",\r\n            ],\r\n            [\"paragraphStyle\", \"blockquote\"],\r\n            [\r\n              \"bold\",\r\n              \"underline\",\r\n              \"italic\",\r\n              \"strike\",\r\n              \"subscript\",\r\n              \"superscript\",\r\n            ],\r\n            [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n            [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n            [\"removeFormat\"],\r\n          ],\r\n        }}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n      <IconButton\r\n        m={2}\r\n        onClick={() => print()}\r\n        variant=\"outline\"\r\n        colorScheme=\"teal\"\r\n        aria-label=\"Send email\"\r\n        icon={<RiPrinterFill />}\r\n        size=\"lg\"\r\n      />\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\nexport default InputSunEditor;\r\n","import InputSunEditor from \"./../formInput/SunEditorInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nconst ShowCertifica = (props) => {\r\n  const { structure, patientId } = props;\r\n\r\n  const editorRef = useRef();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = useRef();\r\n  const btnRef = useRef();\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {};\r\n  useEffect(() => {\r\n    !!!!editorRef.current && editorRef.current.editor.setContents(structure);\r\n  });\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen} colorScheme={mode(\"green\", \"green\")}>\r\n        Certificat\r\n      </Button>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent minW={{ md: \"700px\", lg: \"90vw\" }}>\r\n          <AlertDialogHeader>Certificat</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <AlertDialogBody>\r\n            <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n              <form noValidate onSubmit={MyForm.submit}>\r\n                <InputSunEditor\r\n                  Patient={{ id: patientId }}\r\n                  disabled={true}\r\n                  editorRef={editorRef}\r\n                  name=\"certif\"\r\n                />\r\n              </form>\r\n            </Formiz>\r\n          </AlertDialogBody>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default ShowCertifica;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Skeleton, useToast, Stack } from \"@chakra-ui/react\";\r\n\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListCertificat } from \"../../../services/api/Historique patient\";\r\nimport ShowCertifica from \"./../ShowCertifica\";\r\nconst ContentCertificat = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"date\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <ShowCertifica structure={data.structure} patientId={data.patient_id} />\r\n    ),\r\n  });\r\n  const params = { medecin_id, patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingCertificat, refetch: refetchCertifcat } =\r\n    useHistoriqueListCertificat({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n  return (\r\n    <>\r\n      {!isLodingCertificat ? (\r\n        <>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Stack mt=\"40px\">\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContentCertificat;\r\n","import React from \"react\";\r\nimport { Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport ContentCertificat from \"./content\";\r\nconst HistoriqueCetificat = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const btnRef = React.useRef();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n        onClick={onOpen}\r\n      >\r\n        Certificat\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Certificat</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <ContentCertificat patient={patient} />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueCetificat;\r\n","import { useHistoriqueListCertificat } from \"../../../services/api/Historique patient\";\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  AccordionIcon,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { Box, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport ShowCertifica from \"../../Certificat/ShowCertifica\";\r\nimport { useDetatilOfConsultation } from \"../../../services/api/consultation\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst DetailConsultation = (props) => {\r\n  const toast = useToast();\r\n  const { data } = props;\r\n  const [consultation, setConsultation] = useState({});\r\n  const [detatil, setDetatil] = useState({});\r\n  const params = { id: data.id };\r\n  const { isLoading, refetch } = useDetatilOfConsultation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setConsultation(res.data.data.consultation);\r\n      setDetatil(res.data.data.detail);\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <Text pb={2} fontSize=\"23px\">\r\n        {consultation != null ? <>Diagnostic: {consultation.Diagnostic}</> : ``}\r\n      </Text>\r\n      <Text pb={2} fontSize=\"23px\">\r\n        {consultation != null ? <>Prix: {consultation.prix}</> : ``}\r\n      </Text>\r\n      <Text>\r\n        {detatil != null ? (\r\n          <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n            <Accordion allowMultiple>\r\n              {Object.keys(detatil).map((value) => {\r\n                if (detatil[value].length != 0)\r\n                  return (\r\n                    <AccordionItem>\r\n                      <AccordionButton bgColor=\"green.100\">\r\n                        <Box flex=\"1\" textAlign=\"left\" fontSize=\"30px\">\r\n                          {value}\r\n                        </Box>\r\n                        <AccordionIcon />\r\n                      </AccordionButton>\r\n                      <AccordionPanel pb={4}>\r\n                        {detatil[value].map((valueobject) => (\r\n                          <Box borderBottom=\"1px\" borderColor=\"gray.200\" pb={2}>\r\n                            {Object.keys(valueobject).map((finalevalue) => (\r\n                              <>\r\n                                <Text>\r\n                                  {value == \"certificat\" ? (\r\n                                    <ShowCertifica\r\n                                      structure={valueobject.structure}\r\n                                      patientId={valueobject.patient_id}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {valueobject[finalevalue] != null ? (\r\n                                        <>\r\n                                          <Text fontSize=\"20px\">\r\n                                            {finalevalue}:\r\n                                          </Text>\r\n                                          <Text fontSize=\"15px\">\r\n                                            {valueobject[finalevalue]}\r\n                                          </Text>\r\n                                        </>\r\n                                      ) : (\r\n                                        ``\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </Text>\r\n                              </>\r\n                            ))}\r\n                          </Box>\r\n                        ))}\r\n                      </AccordionPanel>\r\n                    </AccordionItem>\r\n                  );\r\n              })}\r\n            </Accordion>\r\n          </SimpleGrid>\r\n        ) : (\r\n          ``\r\n        )}\r\n      </Text>\r\n    </>\r\n  );\r\n};\r\nexport default DetailConsultation;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useConsultationPatient = ({ params, ...config } = {}) => {\r\n  return useQuery(\"cp\", () => axios.get(\"cp\", { params }), config);\r\n};\r\n\r\nexport const useListOfThePatientInConsultation = ({\r\n  params,\r\n  ...config\r\n} = {}) => {\r\n  return useQuery(\r\n    \"liste-pattient-wating\",\r\n    () => axios.get(\"pdcm\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useDetatilOfConsultation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"Detatil Of Consultation\",\r\n    () => axios.get(\"cd\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useCreateConsultation = ({ params, ...config } = {}) => {\r\n  return useMutation((params) => axios.post(\"consultation\", params), config);\r\n};\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport DetailConsultation from \"./_partial/DetailConsultation\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiFile } from \"react-icons/bi\";\r\n\r\nconst HistoriqueConsultation = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const { data } = props;\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        m={1}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? <BiFile fontSize=\"30px\" /> : ` Historique Consultation`}\r\n      </Button>\r\n      <Drawer\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Historique consultation</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <DetailConsultation data={data} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueConsultation;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Skeleton, useToast, Stack } from \"@chakra-ui/react\";\r\n\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListExamen } from \"./../../../services/api/Historique patient/index\";\r\nconst ContentExamen = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"Note\", \"Type\", \"Prix\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  let params = {};\r\n\r\n  if (!!user.email) {\r\n    params = { patient_id: patient.id, page };\r\n  } else {\r\n    params = { medecin_id, patient_id: patient.id, page };\r\n  }\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingExamen, refetch: refetchExamen } =\r\n    useHistoriqueListExamen({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n  return (\r\n    <>\r\n      {!isLodingExamen ? (\r\n        <>\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Stack mt=\"40px\">\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContentExamen;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListExamen } from \"../../../services/api/Historique patient\";\r\nimport ContentExamen from \"./content\";\r\nconst HistoriqueExamen = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const btnRef = React.useRef();\r\n\r\n  // let header = [\"Note\", \"Type\", \"Prix\"];\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        onClick={onOpen}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n      >\r\n        Examen\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Examen</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <ContentExamen patient={patient} />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueExamen;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListLettre } from \"./../../../services/api/Historique patient/index\";\r\nconst ContentLetter = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"Description\", \"Date\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n\r\n  let params = { patient_id: patient.id, page };\r\n\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingLettre, refetch: refetchLettre } =\r\n    useHistoriqueListLettre({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \":Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <TableContent header={header} content={content} />\r\n      <TablePagination\r\n        total={total}\r\n        next_page_url={next}\r\n        prev_page_url={prev}\r\n        page={page}\r\n        setPage={setPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default ContentLetter;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport ContentLetter from \"./content\";\r\nconst HistoriqueLettre = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const btnRef = React.useRef();\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n        onClick={onOpen}\r\n      >\r\n        Lettre\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Lettre</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <ContentLetter patient={patient} />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueLettre;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Skeleton, Stack, useToast } from \"@chakra-ui/react\";\r\n\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListOrdonnance } from \"./../../../services/api/Historique patient/index\";\r\nconst ContentOrdonnance = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const { patient } = props;\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"M√©dicament\", \"date fin\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n\r\n  let params = {};\r\n\r\n  if (!!user.email) {\r\n    params = { patient_id: patient.id, page };\r\n  } else {\r\n    params = { medecin_id, patient_id: patient.id, page };\r\n  }\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingOrdonnance, refetch: refetchOrdonnance } =\r\n    useHistoriqueListOrdonnance({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \" Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n\r\n  return (\r\n    <>\r\n      {!isLodingOrdonnance ? (\r\n        <>\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Stack mt=\"40px\">\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n        </Stack>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ContentOrdonnance;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport ContentOrdonnance from \"./content\";\r\nconst HistoriqueOrdonnance = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const btnRef = React.useRef();\r\n\r\n  //   let header = [\"Description\"];\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        onClick={onOpen}\r\n        colorScheme={mode(\"green\", \"green\")}\r\n      >\r\n        Ordonnance\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Ordonnance</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <ContentOrdonnance patient={patient} />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueOrdonnance;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { Box, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { useHistoriqueListConsultation } from \"../../../services/api/Historique patient\";\r\nimport HistoriqueActe from \"../../Acte/ActeHistorique\";\r\nimport Antecedants from \"../../Antecedants\";\r\nimport HistoriqueCertificat from \"../../Certificat/CertificatHistorique\";\r\nimport HistoriqueConsultation from \"../../Consultation\";\r\nimport HistoriqueExamen from \"../../Examen/ExamenHistorique\";\r\nimport HistoriqueLettre from \"../../Lettre/LettreHistorique\";\r\nimport HistoriqueOrdonnance from \"../../Ordonnance/OrdonnanceHistorique\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { Skeleton, useColorModeValue as mode, Stack } from \"@chakra-ui/react\";\r\n\r\nconst TableauDynamique = (props) => {\r\n  let { patient } = props;\r\n  const { user } = useContext(TbibyContext);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([\"\"], [\"\"]);\r\n  const header = [\"date\", \"Diagnostic\"];\r\n  const toast = useToast();\r\n\r\n  let params = {};\r\n  if (!!!patient) {\r\n    params = {\r\n      patient_id: user.id,\r\n      page,\r\n    };\r\n    patient = user;\r\n  } else {\r\n    params = {\r\n      patient_id: patient.id,\r\n      medecin_id: user.id,\r\n      page,\r\n    };\r\n  }\r\n\r\n  const { isLoading: isLodingConsultation, refetch: refetchConsultation } =\r\n    useHistoriqueListConsultation({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        !!res.data.data &&\r\n          res.data.data.map((value) => {\r\n            if (value.Diagnostic == null) {\r\n              value.Diagnostic = \"Aucun diagnostic √©crit\";\r\n            }\r\n          });\r\n        setContent((!!res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <>\r\n        <HistoriqueConsultation data={data} />\r\n      </>\r\n    ),\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n        <HistoriqueCertificat patient={patient} />\r\n        <HistoriqueActe patient={patient} />\r\n        <Antecedants patient={patient} />\r\n        <HistoriqueExamen patient={patient} />\r\n        <HistoriqueOrdonnance patient={patient} />\r\n        <HistoriqueLettre patient={patient} />\r\n      </SimpleGrid>\r\n      {!isLodingConsultation ? (\r\n        <>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Stack mt=\"40px\">\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n          <Skeleton startColor=\"gray.100\" endColor=\"green.500\" height=\"40px\" />\r\n        </Stack>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default TableauDynamique;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport TableauDynamique from \"./_patials/TableauDynamique\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiHistory } from \"react-icons/bi\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst HistoriquePatient = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { patient } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} m={1} colorScheme=\"green\" onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Tout ce que j'ai fait pour ce patient`}\r\n          aria-label=\"Tout ce que j'ai fait pour ce patient\"\r\n        >\r\n          {isMobile ? <BiHistory fontSize=\"30px\" /> : `Historique`}\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Historique patient</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <TableauDynamique patient={patient} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default HistoriquePatient;\r\n","import { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\n\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nconst PatientInfo = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button m={1} colorScheme=\"green\">\r\n          <Tooltip\r\n            label={`Plus d'informations sur ${data.nom + \" \" + data.prenom}`}\r\n            aria-label={`Plus d'informations sur ${\r\n              data.nom + \" \" + data.prenom\r\n            }`}\r\n          >\r\n            {isMobile ? <BiInfoCircle fontSize=\"30px\" /> : `Informations`}\r\n          </Tooltip>\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <Portal>\r\n        <PopoverContent borderColor=\"green\">\r\n          <PopoverArrow />\r\n          <PopoverHeader>{data.nom + \" \" + data.prenom} </PopoverHeader>\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            {data.photo && (\r\n              <Box>\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={data.nom + \" \" + data.prenom}\r\n                  src={`${link}${data.photo}`}\r\n                />\r\n              </Box>\r\n            )}\r\n            {data.Adresse && <Text>Adresse : {data.Adresse} </Text>}\r\n            {data.Code_APCI && <Text>Code_APCI : {data.Code_APCI} </Text>}\r\n            {data.email != \"\" && data.email != null ? (\r\n              <Text as=\"a\" href={\"mailto:\" + data.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            {data.telephone != \"\" && data.telephone != null ? (\r\n              <Text display=\"block\" as=\"a\" href={\"tel:\" + data.telephone}>\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            {data.cin && <Text>cin : {data.cin} </Text>}\r\n          </PopoverBody>\r\n          <PopoverFooter>\r\n            Ce sont des informations personnelles sur votre patient\r\n          </PopoverFooter>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n};\r\nexport default PatientInfo;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Box, Spinner, useToast, Heading } from \"@chakra-ui/react\";\r\nimport { TableActions } from \"./../../components/table/TableActions\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport AjouPatient from \"./_partials/AjoutPatient\";\r\nimport { useRelationListe } from \"./../../services/api/relation\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport HistoriquePatient from \"../../components/historique patient\";\r\nimport PatientInfo from \"./../../components/informationSurPatient\";\r\nconst ListPatients = () => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const params = { medecin_id, patient_id: patientId, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading, refetch } = useRelationListe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <PatientInfo data={data} />,\r\n    fn2: (data) => <HistoriquePatient patient={data} />,\r\n  });\r\n  let header = [\"Nom\", \"Prenom\"];\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          vous n'avez aucun patient\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <Box>\r\n            <AjouPatient refetch={refetch} />\r\n\r\n            <TableActions\r\n              buttonText=\"Chercher\"\r\n              buttonIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n              chercherFn={setPatientId}\r\n              buttonhoverTesxt={`Rechercher üîé`}\r\n              inputhoverTesxt={`√©cris quoi que ce soit pour indiquer sur la personne que tu veux trouver`}\r\n            />\r\n\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListPatients;\r\n","import { Button, IconButton } from \"@chakra-ui/button\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\n\r\nconst Alert = (props) => {\r\n  const {\r\n    hoverMassage,\r\n    target,\r\n    isOpen,\r\n    setIsOpen,\r\n    cancelRef,\r\n    onClose,\r\n    fnTodo,\r\n    Header,\r\n    Body,\r\n    icon,\r\n    colorScheme,\r\n    bg,\r\n    btOK,\r\n    btNon,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <Tooltip\r\n        label={!!hoverMassage && hoverMassage}\r\n        aria-label={!!hoverMassage && hoverMassage}\r\n      >\r\n        <IconButton\r\n          size=\"sm\"\r\n          m={1}\r\n          bg={bg}\r\n          colorScheme={colorScheme}\r\n          // fontSize=\"10px\"\r\n          icon={icon}\r\n          onClick={() => setIsOpen(true)}\r\n        />\r\n      </Tooltip>\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {Header}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{Body}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose} colorScheme=\"green\">\r\n                {btNon}\r\n              </Button>\r\n\r\n              <Button\r\n                colorScheme=\"green\"\r\n                onClick={(event) => fnTodo(event, target)}\r\n                ml={3}\r\n              >\r\n                {btOK}\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default Alert;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport Alert from \"./alert\";\r\nimport {\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Task = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  const [isOpenRemove, setIsOpenRemove] = useState(false);\r\n  const onCloseRemove = () => setIsOpenRemove(false);\r\n  const cancelRefRemove = useRef();\r\n\r\n  const { taskvalue, task, setTask, DeleteMutate, EnteredMutate, usertype } =\r\n    props;\r\n\r\n  const Entered = (event) => {\r\n    event.stopPropagation();\r\n    EnteredMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const remove = (event) => {\r\n    event.stopPropagation();\r\n    DeleteMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const detail = (event) => {\r\n    event.stopPropagation();\r\n  };\r\n  const getItemStyle = (isDragging, draggableStyle) => ({\r\n    ...draggableStyle,\r\n    userSelect: \"none\",\r\n    padding: 3,\r\n    margin: `0 0 0px 0`,\r\n  });\r\n  return (\r\n    <Draggable\r\n      key={taskvalue.id}\r\n      draggableId={taskvalue.id.toString()}\r\n      index={taskvalue.id}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <Popover>\r\n          <PopoverTrigger>\r\n            <Box\r\n              onClick={(event) => detail(event)}\r\n              ref={provided.innerRef}\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              style={\r\n                (\"none\",\r\n                getItemStyle(\r\n                  snapshot.isDragging,\r\n                  provided.draggableProps.style\r\n                ))\r\n              }\r\n              border=\"2px\"\r\n              borderRadius=\"20px\"\r\n              bgColor={snapshot.isDragging ? `#3b8a5b` : `#b3e6c8`}\r\n              borderColor=\"green.200\"\r\n              mx={3}\r\n              px={2}\r\n              children={\r\n                <Box color=\"gray.800\" fontSize=\"17px\">\r\n                  <Alert\r\n                    hoverMassage=\"Supprimer ce r√©servatitien\"\r\n                    Header=\"Supprimer la r√©servation\"\r\n                    Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                    icon={<CloseIcon />}\r\n                    colorScheme=\"teal\"\r\n                    bg=\"red.300\"\r\n                    fnTodo={remove}\r\n                    btOK=\"Effacer\"\r\n                    btNon=\"Annuler\"\r\n                    isOpen={isOpen}\r\n                    setIsOpen={setIsOpen}\r\n                    onClose={onClose}\r\n                    cancelRef={cancelRef}\r\n                  />\r\n                  {taskvalue.nomprenom}\r\n                  {\r\n                    usertype == \"medecin\" || usertype == \"secretaire\" ? (\r\n                      <Alert\r\n                        hoverMassage=\"Envoyer ce patient au m√©decin\"\r\n                        Header=\"Confirmer\"\r\n                        Body={`Voulez-vous confirmer que ${taskvalue.nomprenom} d√©butera sa consultation ? `}\r\n                        icon={<BsBoxArrowInRight w={4} h={4} />}\r\n                        bg=\"blue.300\"\r\n                        btOK=\"oui\"\r\n                        btNon=\"Non\"\r\n                        fnTodo={Entered}\r\n                        isOpen={isOpenRemove}\r\n                        setIsOpen={setIsOpenRemove}\r\n                        onClose={onCloseRemove}\r\n                        cancelRef={cancelRefRemove}\r\n                      />\r\n                    ) : (\r\n                      ``\r\n                    )\r\n                    // (\r\n                    //   <Alert\r\n                    //     Header=\"Supprimer la r√©servation\"\r\n                    //     Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                    //     icon={<CloseIcon />}\r\n                    //     fnTodo={remove}\r\n                    //     isOpen={isOpen}\r\n                    //     setIsOpen={setIsOpen}\r\n                    //     onClose={onClose}\r\n                    //     cancelRef={cancelRef}\r\n                    //   />\r\n                    // )\r\n                  }\r\n                </Box>\r\n              }\r\n            />\r\n          </PopoverTrigger>\r\n          <PopoverContent bg={mode(\"green.50\", \"gray.800\")}>\r\n            <PopoverHeader fontWeight=\"semibold\">\r\n              {taskvalue.nomprenom}\r\n            </PopoverHeader>\r\n            <PopoverBody>\r\n              Votre rendez-vous est le {taskvalue.start.slice(0, 10) + \" \"}√†\r\n              {\" \" + taskvalue.start.slice(11, 19)}\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Popover>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\nexport default Task;\r\n","import { Box, Flex, Text } from \"@chakra-ui/layout\";\r\nimport { Grid } from \"@chakra-ui/layout\";\r\nimport { GridItem } from \"@chakra-ui/layout\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport Task from \"../taks\";\r\n\r\nconst TimeElement = (props) => {\r\n  const {\r\n    usertype,\r\n    HoursValue,\r\n    key,\r\n    value,\r\n    DeleteMutate,\r\n    addtask,\r\n    task,\r\n    EnteredMutate,\r\n    setTask,\r\n  } = props;\r\n\r\n  return (\r\n    <Box\r\n      key={key}\r\n      h=\"160px\"\r\n      fontSize=\"20px\"\r\n      border=\"1px\"\r\n      borderColor={mode(\"green.200\", \"cyan.800\")}\r\n    >\r\n      <Grid\r\n        h=\"100%\"\r\n        templateRows=\"repeat(4, 1fr)\"\r\n        border=\"3px\"\r\n        borderColor=\"red.200\"\r\n        gap={0}\r\n      >\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"00\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.50\", \"cyan.600\")}\r\n              // bgColor={snapshot.isDraggingOver ? \"green.100\" : `gray.50`}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"00\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"00\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"15\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.100\", \"cyan.700\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"15\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"15\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"30\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.200\", \"cyan.800\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"30\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"30\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"45\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.300\", \"cyan.900\")}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    (parseInt(HoursValue.slice(0, 2)) < 9)\r\n                    ? `0${parseInt(HoursValue.slice(0, 2)) + 1}:00`\r\n                    : parseInt(HoursValue.slice(0, 2)) + 1 + \":00\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"45\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"45\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\nexport default TimeElement;\r\n","import { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport TimeElement from \"./timeElement\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nfunction Calendar(props) {\r\n  const {\r\n    usertype,\r\n    EnteredMutate,\r\n    rowNumber,\r\n    date,\r\n    DeleteMutate,\r\n    task,\r\n    updateTask,\r\n    setTask,\r\n    addtask,\r\n  } = props;\r\n\r\n  //const [, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const Hours = [\r\n    // \"00:00\",\r\n    // \"01:00\",\r\n    // \"02:00\",\r\n    // \"03:00\",\r\n    // \"04:00\",\r\n    // \"05:00\",\r\n    // \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    // \"19:00\",\r\n    // \"20:00\",\r\n    // \"21:00\",\r\n    // \"22:00\",\r\n    // \"23:00\",\r\n  ];\r\n\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n\r\n  const contenu = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    contenu.push(\r\n      <Box>\r\n        <Center\r\n          w=\"100%\"\r\n          key={`key${index}`}\r\n          border=\"1px\"\r\n          borderColor={mode(\"green.200\", \"cyan.900\")}\r\n          bgColor={mode(\"green.300\", \"cyan.900\")}\r\n          color={mode(\"green.800\", \"gray.50\")}\r\n          h={10}\r\n          align=\"center\"\r\n        >\r\n          {value.toISOString().slice(0, 10)}\r\n        </Center>\r\n        {Hours.map((HoursValue) => (\r\n          <TimeElement\r\n            EnteredMutate={EnteredMutate}\r\n            usertype={usertype}\r\n            DeleteMutate={DeleteMutate}\r\n            key={HoursValue.slice(0, 4)}\r\n            HoursValue={HoursValue}\r\n            value={value}\r\n            addtask={addtask}\r\n            task={task}\r\n            setTask={setTask}\r\n          />\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={0}>\r\n        <GridItem colSpan={1}>\r\n          <Box\r\n            w=\"100%\"\r\n            border=\"1px\"\r\n            bgColor={mode(\"green.300\", \"cyan.900\")}\r\n            borderColor={mode(\"green.200\", \"cyan.900\")}\r\n          >\r\n            <Center h={10} align=\"center\"></Center>\r\n            {Hours.map((value) => (\r\n              <Center\r\n                border=\"1px\"\r\n                borderColor={mode(\"green.200\", \"cyan.900\")}\r\n                bgColor={mode(\"green.300\", \"cyan.900\")}\r\n                color={mode(\"green.800\", \"gray.50\")}\r\n                h=\"160px\"\r\n                key={value}\r\n                px={2}\r\n                fontSize=\"20px\"\r\n              >\r\n                {value}\r\n              </Center>\r\n            ))}\r\n          </Box>\r\n        </GridItem>\r\n        <GridItem colSpan={9} w=\"100%\">\r\n          <Grid\r\n            w=\"100%\"\r\n            templateColumns={\"repeat(\" + parseInt(rowNumber) + \", 1fr)\"}\r\n            gap={0}\r\n          >\r\n            <DragDropContext onDragEnd={(result) => updateTask(result)}>\r\n              {contenu}\r\n            </DragDropContext>\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"..\";\r\nexport const useCreateReservation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id, etat, date_reservation }) =>\r\n      axios.post(\"cr\", { medecin_id, patient_id, etat, date_reservation }),\r\n    config\r\n  );\r\n};\r\nexport const usePatientCreateReservation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id, etat, date_reservation }) =>\r\n      axios.post(\"pcr\", { medecin_id, patient_id, etat, date_reservation }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateReservation = (config) => {\r\n  return useMutation(\r\n    ({ id, date_reservation }) =>\r\n      axios.post(\"updater\", {\r\n        id,\r\n        date_reservation,\r\n      }),\r\n    config\r\n  );\r\n};\r\nexport const useDeleteReservation = (config) => {\r\n  return useMutation(({ id }) => axios.post(\"deleter\", { id }), config);\r\n};\r\nexport const useReservationMListe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de rendeves des parents en dashboard\"],\r\n    () => axios.get(\"listrm\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useListReservation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de r√©servation on dashboard\", params],\r\n    () => axios.get(\"lrd\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useListReservationEnLigne = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de r√©servation En Ligne on dashboard\", params],\r\n    () => axios.get(\"lrde\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useValideReservation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"valider un rendez vous \", params],\r\n    () => axios.get(\"vr\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\n\r\nimport { ViewOffIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Input,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nexport const MyFieldPassword = (props) => {\r\n  const [showPassword, setshowPassword] = useState(false);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl mt={5}>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <InputGroup>\r\n        <Input\r\n          id={id}\r\n          type={showPassword ? `text` : `password`}\r\n          value={value ?? \"\"}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onBlur={() => setIsTouched(true)}\r\n          aria-invalid={showError}\r\n          aria-required={!!required}\r\n          aria-describedby={showError ? `${id}-error` : null}\r\n        />\r\n        <InputRightElement>\r\n          <Button size=\"sm\" onClick={() => setshowPassword(!showPassword)}>\r\n            {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n          </Button>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useLogin = (config) => {\r\n  return useMutation(\r\n    ({ user, password }) => axios.post(\"login\", { user, password }),\r\n    config\r\n  );\r\n};\r\nexport const useSingup = (config) => {\r\n  return useMutation(\r\n    ({\r\n      cin,\r\n      email,\r\n      id_cms_privileges,\r\n      nom,\r\n      password,\r\n      prenom,\r\n      telephone,\r\n      sexes,\r\n      date_naissance,\r\n    }) =>\r\n      axios.post(\"singup\", {\r\n        cin,\r\n        email,\r\n        id_cms_privileges,\r\n        nom,\r\n        password,\r\n        prenom,\r\n        telephone,\r\n        sexes,\r\n        date_naissance,\r\n      }),\r\n    config\r\n  );\r\n};\r\n","import {\r\n  Center,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Spinner,\r\n  Button,\r\n  useToast,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { MyField } from \"./../../../MyField\";\r\nimport {\r\n  isLength,\r\n  isPattern,\r\n  isNumber,\r\n  isEmail,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport { InputDate } from \"./../../../components/formInput/date\";\r\nimport { MyFieldPassword } from \"./../../../MyFieldPassword\";\r\nimport React, { useState } from \"react\";\r\nimport { useSingup } from \"./../../../services/api/auth\";\r\n\r\nconst AddNewPatient = (props) => {\r\n  const { medecin_id, addPatient } = props;\r\n  const [fonctionnalite, setFonctionnalite] = useState(\"patient\");\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const [sexes, setSexes] = useState(\"homme\");\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useSingup({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      res = res.data;\r\n      if (res.api_status == 1) {\r\n        if (res.exists) {\r\n          toast({\r\n            title: res.elementExists + \" existe d√©ja\",\r\n            description: \"choisir un autre \" + res.elementExists + \" üí≠\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \" ‚ú® \",\r\n            description: \"üéâ Compte a √©t√© enregistr√©\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n          addPatient({ medecin_id, patient_id: res.id });\r\n        }\r\n      }\r\n    },\r\n  });\r\n  const handleSubmit = (values) => {\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = fonctionnalite;\r\n    delete values.R_password;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Stack\r\n        maxW={400}\r\n        display={isLoading ? `none` : ``}\r\n        margin=\"auto\"\r\n        spacing={5}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={myForm.submit}>\r\n            <MyField\r\n              name=\"nom\"\r\n              label=\"Nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le nom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"prenom\"\r\n              label=\"Pr√©nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le prenom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"homme\" py={3} mx={5}>\r\n                      Homme üë®‚Äçü¶∞\r\n                    </Radio>\r\n                    <Radio value=\"femme\" py={3} mx={5}>\r\n                      Femme üë©‚Äçü¶∞\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n            <InputDate\r\n              name=\"date_naissance\"\r\n              label=\"Date de naissance\"\r\n              //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n            />\r\n\r\n            <MyField\r\n              name=\"email\"\r\n              label=\"E-mail\"\r\n              validations={[\r\n                {\r\n                  rule: isEmail(),\r\n                  message: \"Veuillez v√©rifier le format de l'E-mail\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.telephone,\r\n                  message: 'Le champ E-mail doit contenir \"@\" et \".\" ',\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"cin\"\r\n              label=\"C.I.N\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message: \"La carte d'identit√© ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.email || !!values.telephone,\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.email, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"telephone\"\r\n              label=\"T√©l√©phone\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.email,\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.cin, values.email],\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ \"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: isMinLength(6),\r\n                  message:\r\n                    \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"R_password\"\r\n              label=\"R√©p√©ter le mot de passe\"\r\n              required=\"Il est requis de compl√©ter le champ correspondant au r√©p√©ter mot de passe\"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: (val) => val == values.password,\r\n                  message: \"Le mot de passe r√©p√©t√© doit √™tre le m√™me.\",\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Cr√©er mon compte\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddNewPatient;\r\n","import { Box, Center } from \"@chakra-ui/layout\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Select2 } from \"../../../components/formInput/select\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  RadioGroup,\r\n  Radio,\r\n  Stack,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useCreateReservation } from \"../../../services/api/reservation\";\r\nimport { useRelation } from \"../../../services/api/relation\";\r\nimport AddNewPatient from \"./AddNewPatient\";\r\nconst BookingForm = (props) => {\r\n  const toast = useToast();\r\n  const [NomPrenom, setNomPrenom] = useState(\"\");\r\n  const {\r\n    medecin_id,\r\n    refetchTask,\r\n    currentDateStart,\r\n    listPatientDashboardAPIRefetch,\r\n    cancelRef,\r\n    isOpen,\r\n    onClose,\r\n    end,\r\n    listPatient,\r\n  } = props;\r\n  const { mutate, isLoading } = useCreateReservation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n      onClose();\r\n    },\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const { mutate: addPatient, isLoading: LodingaAddPatient } = useRelation({\r\n    onError: (error) => {\r\n      setErrorMessage(\"V√©rifier les informations de votre patient.\");\r\n    },\r\n    onSuccess: (res) => {\r\n      setErrorMessage(\"\");\r\n      setSearch(\"old\");\r\n      listPatientDashboardAPIRefetch();\r\n    },\r\n  });\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    if (search == \"new\") {\r\n      addPatient({ medecin_id, patient_id: values.user });\r\n    } else {\r\n      setNomPrenom(values.selectvalue.label);\r\n      restOfConfirmation(currentDateStart, end, values.selectvalue.value);\r\n    }\r\n  };\r\n\r\n  const [search, setSearch] = useState(\"old\");\r\n  const restOfConfirmation = (start, end, patient_id) => {\r\n    start = start.replace(\"T\", \" \") + \":00\";\r\n    mutate({\r\n      medecin_id,\r\n      patient_id,\r\n      etat: \"en attente\",\r\n      date_reservation: start,\r\n    });\r\n  };\r\n  return (\r\n    <Box>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent minW={{ md: \"700px\" }}>\r\n          <AlertDialogHeader>Confirmer la r√©servation</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <Spinner\r\n            display={!isLoading && !LodingaAddPatient ? `none` : ``}\r\n            size=\"xl\"\r\n            m=\"auto\"\r\n            color=\"red.500\"\r\n          />\r\n          <AlertDialogBody\r\n            display={isLoading || LodingaAddPatient ? `none` : ``}\r\n          >\r\n            <Center>\r\n              <RadioGroup onChange={setSearch} value={search}>\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"old\">Patient associ√© </Radio>\r\n                  <Radio value=\"new\">Patient non-associ√©</Radio>\r\n                  <Radio value=\"create\">Inscrire un patient</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </Center>\r\n            <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n              <form noValidate onSubmit={MyForm.submit}>\r\n                <Text pb={2} px={5}>\r\n                  {search != \"create\"\r\n                    ? `R√©servation d'un rendez-vous le ${\r\n                        currentDateStart.slice(0, 10) + \" \"\r\n                      } √† ${currentDateStart.slice(11, 19)} pour : `\r\n                    : ``}\r\n                  {search == \"new\" ? (\r\n                    <Box>\r\n                      <MyField\r\n                        name=\"user\"\r\n                        label=\"Email ou CIN ou Telephone\"\r\n                        required=\"email ou CIN or Telephone\"\r\n                      />\r\n                      <Text color=\"tomato\">{errorMessage}</Text>\r\n                    </Box>\r\n                  ) : search == \"old\" ? (\r\n                    <Select2\r\n                      required={\"S√©lect un patient.\"}\r\n                      data={listPatient}\r\n                      // label=\"Notre patient\"\r\n                      name=\"selectvalue\"\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )}\r\n                </Text>\r\n                {search != \"create\" ? (\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      display={isLoading ? `none` : ``}\r\n                      ref={cancelRef}\r\n                      onClick={onClose}\r\n                    >\r\n                      Non\r\n                    </Button>\r\n                    <Button\r\n                      display={isLoading ? `none` : ``}\r\n                      disabled={!MyForm.isValid}\r\n                      type=\"submit\"\r\n                      ml={3}\r\n                    >\r\n                      Oui\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                ) : (\r\n                  ``\r\n                )}\r\n              </form>\r\n            </Formiz>\r\n            {search == \"create\" ? (\r\n              <Box maxH=\"60vh\" w=\"100%\" overflowY=\"scroll\">\r\n                <AddNewPatient\r\n                  addPatient={addPatient}\r\n                  medecin_id={medecin_id}\r\n                />\r\n              </Box>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </AlertDialogBody>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\nexport default BookingForm;\r\n","import { useState, useRef } from \"react\";\r\nimport { Button, IconButton } from \"@chakra-ui/button\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nconst G_Alert = (props) => {\r\n  const {\r\n    target,\r\n    fnTodo,\r\n    Header,\r\n    Body,\r\n    icon,\r\n    colorScheme,\r\n    bg,\r\n    btOK,\r\n    btNon,\r\n    submitcolor,\r\n  } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  return (\r\n    <>\r\n      <IconButton\r\n        size=\"md\"\r\n        m={1}\r\n        bg={bg}\r\n        colorScheme={colorScheme}\r\n        fontSize=\"10px\"\r\n        icon={icon}\r\n        onClick={() => setIsOpen(true)}\r\n      />\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {Header}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{Body}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose}>\r\n                {btNon}\r\n              </Button>\r\n\r\n              <Button\r\n                colorScheme={colorScheme}\r\n                onClick={() => {\r\n                  fnTodo(target);\r\n                  onClose();\r\n                }}\r\n                ml={3}\r\n              >\r\n                {btOK}\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default G_Alert;\r\n","import { Box, Text, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst TextInfo = (props) => {\r\n  const { data, type } = props;\r\n  if (data == null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Box>\r\n      <Text\r\n        fontSize=\"xl\"\r\n        borderBottom=\"1px\"\r\n        borderColor={mode(\"green.300\", \"gray.500\")}\r\n        px={2}\r\n        display=\"inline\"\r\n        color={mode(\"green.700\", \"gray.50\")}\r\n      >\r\n        {type}:\r\n      </Text>\r\n      <Text fontSize=\"xl\" px={2} display=\"inline\" color=\"gray.500\">\r\n        {data}\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\nexport default TextInfo;\r\n","import { usePatentInfo } from \"./../../services/api/patient information\";\r\nimport {\r\n  Center,\r\n  useToast,\r\n  Button,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Avatar,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  IconButton,\r\n  Text,\r\n  DrawerFooter,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport TextInfo from \"./_partials/text\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BsInfoCircle } from \"react-icons/bs\";\r\n\r\nconst GeneralPatientsInformation = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const { patient } = props;\r\n  const toast = useToast();\r\n  const params = { cms_users_id: patient.id };\r\n  const { isLoading, refetch } = usePatentInfo({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setPatientInfo(res.data);\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  return (\r\n    <React.Fragment>\r\n      <Button colorScheme=\"green\" onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Obtenez les informations g√©n√©rales sur ${patientInfo.nom} ${patientInfo.prenom}`}\r\n          aria-label={`Obtenez les informations g√©n√©rales sur ${patientInfo.nom} ${patientInfo.prenom}`}\r\n        >\r\n          {isMobile ? <BsInfoCircle fontSize=\"30px\" /> : `Informations`}\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer placement=\"left\" size=\"md\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerHeader borderBottomWidth=\"1px\">\r\n            Information de patient\r\n            <IconButton\r\n              float=\"right\"\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              m={1}\r\n              colorScheme=\"red\"\r\n              fontSize=\"10px\"\r\n              icon={<CloseIcon />}\r\n              onClick={() => onClose()}\r\n            />\r\n          </DrawerHeader>\r\n          <DrawerBody display={!isLoading ? `none` : ``}>\r\n            <SkeletonCircle size=\"12\" />\r\n            <SkeletonText mt=\"7\" noOfLines={7} spacing=\"7\" />\r\n          </DrawerBody>\r\n          <DrawerBody display={isLoading ? `none` : ``}>\r\n            <Avatar\r\n              my={3}\r\n              size=\"xl\"\r\n              src={\r\n                !!patientInfo.photo\r\n                  ? `${link}${patientInfo.photo}`\r\n                  : `${link}${userImage}`\r\n              }\r\n              name={patient.nomprenom}\r\n            />\r\n            <TextInfo data={patientInfo.nom} type=\"Nom\" />\r\n            <TextInfo data={patientInfo.prenom} type=\"Prenom\" />\r\n            <TextInfo data={patientInfo.cin} type=\"C.I.N\" />\r\n            <TextInfo data={patientInfo.Date_Naissance} type=\"Date naissance\" />\r\n            <TextInfo data={patientInfo.email} type=\"E-mail\" />\r\n            {!!patientInfo.email ? (\r\n              <Text as=\"a\" href={\"mailto:\" + patientInfo.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <TextInfo data={patientInfo.sexes} type=\"Sexe\" />\r\n            <TextInfo data={patientInfo.telephone} type=\"Telephone\" />\r\n\r\n            {!!patientInfo.telephone ? (\r\n              <Text\r\n                display=\"block\"\r\n                as=\"a\"\r\n                href={\"tel:\" + patientInfo.telephone}\r\n              >\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GeneralPatientsInformation;\r\n","import {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Heading,\r\n  Link as LinkChakra,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useRef, useContext, useState } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useDeleteReservation,\r\n  useValideReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport { TableContent } from \"./../table/TableContent\";\r\nimport { TablePagination } from \"./../table/TablePagination\";\r\nimport { CheckIcon, CloseIcon } from \"@chakra-ui/icons\";\r\nimport G_Alert from \"./../general alert\";\r\nimport { useSendPatientToWaitingRoomEnligne } from \"../../services/api/manageTheRoom\";\r\nimport GeneralPatientsInformation from \"./../general patients information/index\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\n\r\nconst ConfirmerUnRendezVous = (props) => {\r\n  const { refetchDashboard } = props;\r\n  const { user } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([]);\r\n  const [header, setHeader] = useState([\"nom prenom\", \"Date\"]);\r\n  const { mutate: SPTWRMutate, isLoading: SPTWRIsLoading } =\r\n    useSendPatientToWaitingRoomEnligne({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchDashboard();\r\n        refetchlist();\r\n      },\r\n    });\r\n  const params = { medecin_id: user.id };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchlist();\r\n        refetchDashboard();\r\n      },\r\n    });\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const [fntable, setFntable] = useState({\r\n    fn2: (data) => (\r\n      <G_Alert\r\n        Header=\"Supprimer la proposition r√©servation\"\r\n        Body={`Voulez-vous vraiment supprimer cette proposition de r√©servation avec ${data.nomprenom}`}\r\n        icon={<CloseIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"red.300\"\r\n        target={{ id: data.idR }}\r\n        fnTodo={DeleteMutate}\r\n        btOK=\"Effacer\"\r\n        btNon=\"Annuler\"\r\n      />\r\n      // <Button mx={1} onClick={() => console.log(data.id)}>\r\n      //   remove\r\n      // </Button>\r\n    ),\r\n    fn: (data) => (\r\n      <G_Alert\r\n        Header=\"Valider la r√©servation\"\r\n        Body={`Voulez-vous vraiment valider cette proposition de r√©servation avec ${data.nomprenom}`}\r\n        icon={<CheckIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"green.300\"\r\n        target={{ id: data.idR, etat: \"en attente\", state: \"valide\" }}\r\n        fnTodo={SPTWRMutate}\r\n        btOK=\"Valide\"\r\n        submitcolor=\"gray.50\"\r\n        btNon=\"Annuler\"\r\n      />\r\n    ),\r\n    fn3: (data) => <GeneralPatientsInformation patient={data} />,\r\n  });\r\n  const { isLoading, refetch: refetchlist } = useValideReservation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n      refetchDashboard();\r\n    },\r\n  });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucune r√©servation de la part d'aucun patient\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        position=\"absolute\"\r\n        bottom=\"7%\"\r\n        right=\"4%\"\r\n        ref={btnRef}\r\n        colorScheme=\"teal\"\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? `` : `Valider un rendez vous `}\r\n        {content.length != 0 ? `üì´` : `üì™`}\r\n      </Button>\r\n      <Drawer\r\n        size=\"lg\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>üì´ Valider un rendez vous </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <Box display={isLoading ? `none` : ``}>\r\n                <TableContent\r\n                  header={header}\r\n                  content={content}\r\n                  fntable={fntable}\r\n                  message={message}\r\n                />\r\n                <TablePagination\r\n                  total={total}\r\n                  next_page_url={next}\r\n                  prev_page_url={prev}\r\n                  page={page}\r\n                  setPage={setPage}\r\n                />\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default ConfirmerUnRendezVous;\r\n","import { useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const usePatientEntrer = (config) => {\r\n  return useMutation(\r\n    ({ id, etat }) => axios.post(\"pe\", { id, etat: \"patient avec le m√©decin\" }),\r\n    config\r\n  );\r\n};\r\nexport const useSendPatientToWaitingRoom = (config) => {\r\n  return useMutation(\r\n    ({ id, etat }) => axios.post(\"sptwr\", { id, etat: \"en attente\" }),\r\n    config\r\n  );\r\n};\r\nexport const useSendPatientToWaitingRoomEnligne = (config) => {\r\n  return useMutation(\r\n    ({ id, etat, state }) =>\r\n      axios.post(\"sptwr\", { id, etat: \"en attente\", state }),\r\n    config\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Spinner, Tooltip } from \"@chakra-ui/react\";\r\n\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport Calendar from \"./../../components/calendar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport BookingForm from \"./bookingForm\";\r\nimport { useListPatientDashboardAPI } from \"../../services/api/listPatientDashboard/inde\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport { usePatientEntrer } from \"./../../services/api/manageTheRoom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ConfirmerUnRendezVous from \"./../../components/confirmer un rendez vous\";\r\nimport {\r\n  useReservationMListe,\r\n  useUpdateReservation,\r\n  useDeleteReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { InputDate } from \"../../components/formInput/date\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nconst CalendarDashboardMedecin = () => {\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const [task, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n\r\n  const id = user.idMedecin || user.id;\r\n  const [params, setParams] = useState({ medecin_id: id });\r\n  const { mutate: EnteredMutate, isLoading: PatientEntrerIsLoading } =\r\n    usePatientEntrer({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n        if (user.fonctionnalite == \"medecin\") {\r\n          history.push(\"/dashboard/consultation\");\r\n        }\r\n      },\r\n    });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { mutate, isLoading: isLoadingUpdate } = useUpdateReservation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n    },\r\n  });\r\n  const { isLoading, refetch: refetchTask } = useReservationMListe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\r\n  const cancelRef = React.useRef();\r\n  const [end, setend] = useState(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [listPatient, setListPatient] = useState([]);\r\n  const {\r\n    isLoading: listPatientDashboardAPIIsLoading,\r\n    refetch: listPatientDashboardAPIRefetch,\r\n  } = useListPatientDashboardAPI({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setListPatient(res.data);\r\n    },\r\n  });\r\n\r\n  const addtask = (event, start, end) => {\r\n    event.stopPropagation();\r\n    setend(end);\r\n    setCurrentDateStart(start);\r\n    onOpen();\r\n  };\r\n  const updateTask = (element) => {\r\n    mutate({\r\n      id: element.draggableId,\r\n      date_reservation:\r\n        element.destination.droppableId.replace(\"T\", \" \") + \":00\",\r\n    });\r\n  };\r\n\r\n  //view\r\n  const [daysView, setDaysView] = useState(1);\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n\r\n  const handleSubmit = (values) => {};\r\n  return (\r\n    <Box>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <Spinner\r\n          display={\r\n            !isLoadingUpdate && !DeleteIsLoading && !PatientEntrerIsLoading\r\n              ? `none`\r\n              : ``\r\n          }\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box\r\n          display={\r\n            isLoadingUpdate || DeleteIsLoading || PatientEntrerIsLoading\r\n              ? `none`\r\n              : ``\r\n          }\r\n        >\r\n          <Flex py={2}>\r\n            <Button\r\n              colorScheme=\"green\"\r\n              ml={2}\r\n              onClick={() => addDays(date, daysView * -1)}\r\n            >\r\n              <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n                <ArrowLeftIcon />\r\n              </Tooltip>\r\n            </Button>\r\n            <Spacer />\r\n            {!isMobile ? (\r\n              <Tooltip\r\n                label=\"Affich√© en mode 1 jours\"\r\n                aria-label=\"Affich√© en mode 1 jours\"\r\n              >\r\n                <Button mx={2} onClick={() => setDaysView(1)}>\r\n                  Par 1 jour\r\n                </Button>\r\n              </Tooltip>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Box w=\"120px\" position=\"relative\" top=\"-7px\" mx={2}>\r\n              <InputDate SyncWithVariable={setDate} name=\"date\" />\r\n            </Box>\r\n            <Tooltip\r\n              label=\"Aller √† aujourd'hui\"\r\n              aria-label=\"Aller √† aujourd'hui\"\r\n            >\r\n              <Button\r\n                mx={2}\r\n                onClick={() => {\r\n                  setDate(new Date());\r\n                }}\r\n              >\r\n                Aujourd'hui\r\n              </Button>\r\n            </Tooltip>\r\n\r\n            <ConfirmerUnRendezVous refetchDashboard={refetchTask} />\r\n            {!isMobile ? (\r\n              <Tooltip\r\n                label=\"Affich√© en mode 2 jours\"\r\n                aria-label=\"Affich√© en mode 2 jours\"\r\n              >\r\n                <Button mx={2} onClick={() => setDaysView(2)}>\r\n                  Par 2 jour\r\n                </Button>\r\n              </Tooltip>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Spacer />\r\n            <Button\r\n              colorScheme=\"green\"\r\n              mr={2}\r\n              onClick={() => addDays(date, daysView)}\r\n            >\r\n              <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n                <ArrowRightIcon />\r\n              </Tooltip>\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n        <Calendar\r\n          EnteredMutate={EnteredMutate}\r\n          usertype={user.fonctionnalite}\r\n          DeleteMutate={DeleteMutate}\r\n          task={task}\r\n          setTask={setTask}\r\n          date={date}\r\n          rowNumber={daysView}\r\n          updateTask={updateTask}\r\n          addtask={addtask}\r\n        />\r\n\r\n        <BookingForm\r\n          listPatientDashboardAPIRefetch={listPatientDashboardAPIRefetch}\r\n          listPatient={listPatient}\r\n          currentDateStart={currentDateStart}\r\n          cancelRef={cancelRef}\r\n          onClose={onClose}\r\n          isOpen={isOpen}\r\n          refetchTask={refetchTask}\r\n          medecin_id={id}\r\n          setTask={setTask}\r\n          end={end}\r\n        />\r\n      </Formiz>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CalendarDashboardMedecin;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useListPatientDashboardAPI = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"listpatientdashboard\", params],\r\n    () => axios.get(\"listpatientdashboard\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\n\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport Calendar from \"./../../components/calendar\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport {\r\n  useListReservation,\r\n  useDeleteReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { InputDate } from \"../../components/formInput/date\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\n\r\nconst CalendarDashboardPatient = () => {\r\n  const toast = useToast();\r\n  const { user } = useContext(TbibyContext);\r\n  const [task, setTask] = useState([]);\r\n\r\n  const params = { patient_id: user.id };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { isLoading, refetch: refetchTask } = useListReservation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const [end, setend] = useState(\"\");\r\n\r\n  const addtask = (event, start, end) => {};\r\n  const updateTask = (element) => {\r\n    toast({\r\n      title: \"Vous ne pouvez pas changer votre r√©servation\",\r\n      description: \" Vous devez appelez votre m√©decin pour le faire\",\r\n      status: \"success\",\r\n      duration: `4000`,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  //view\r\n  const [daysView, setDaysView] = useState(1);\r\n  const [date, setDate] = useState(new Date());\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n  const handleSubmit = (values) => {};\r\n\r\n  return (\r\n    <Box>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <Spinner\r\n          display={!DeleteIsLoading ? `none` : ``}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={DeleteIsLoading ? `none` : ``}>\r\n          <Flex py={2}>\r\n            <Button\r\n              ml={2}\r\n              colorScheme=\"green\"\r\n              onClick={() => addDays(date, daysView * -1)}\r\n            >\r\n              <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n                <ArrowLeftIcon />\r\n              </Tooltip>\r\n            </Button>\r\n            <Spacer />\r\n            {!isMobile ? (\r\n              <Button mx={2} onClick={() => setDaysView(1)}>\r\n                Par jour\r\n              </Button>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Box w=\"120px\" position=\"relative\" top=\"-7px\" mx={2}>\r\n              <InputDate SyncWithVariable={setDate} name=\"date\" />\r\n            </Box>\r\n            <Button mx={2} onClick={() => setDate(new Date())}>\r\n              Aujourd'hui\r\n            </Button>\r\n            {!isMobile ? (\r\n              <Button mx={2} onClick={() => setDaysView(2)}>\r\n                Par 2 jour\r\n              </Button>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Spacer />\r\n            <Button\r\n              colorScheme=\"green\"\r\n              mr={2}\r\n              onClick={() => addDays(date, daysView)}\r\n            >\r\n              <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n                <ArrowRightIcon />\r\n              </Tooltip>\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n        <Calendar\r\n          usertype={user.fonctionnalite}\r\n          DeleteMutate={DeleteMutate}\r\n          task={task}\r\n          setTask={setTask}\r\n          date={date}\r\n          rowNumber={daysView}\r\n          updateTask={updateTask}\r\n          addtask={addtask}\r\n        />\r\n      </Formiz>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CalendarDashboardPatient;\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport { Box, Center } from \"@chakra-ui/layout\";\r\nimport CalendarDashboardMedecin from \"./medecin\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport CalendarDashboardPatient from \"./patient\";\r\nimport { Radio, RadioGroup } from \"@chakra-ui/react\";\r\nimport { Stack } from \"@chakra-ui/react\";\r\n\r\nconst CalendarDashboard = () => {\r\n  const [calendarType, setCalendarType] = useState(\"cabine\");\r\n  const { user } = useContext(TbibyContext);\r\n  if (user.fonctionnalite == \"secretaire\") {\r\n    return (\r\n      <Box>\r\n        <Center>\r\n          <RadioGroup onChange={setCalendarType} value={calendarType}>\r\n            <Stack direction=\"row\" spacing={50}>\r\n              <Radio value=\"cabine\">Dhasboard cabinet </Radio>\r\n              <Radio value=\"moi\">Mon dashboard</Radio>\r\n            </Stack>\r\n          </RadioGroup>\r\n        </Center>\r\n        {calendarType == \"cabine\" ? (\r\n          <CalendarDashboardMedecin />\r\n        ) : (\r\n          <CalendarDashboardPatient />\r\n        )}\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box>\r\n        {user.fonctionnalite == \"medecin\" ? (\r\n          <CalendarDashboardMedecin />\r\n        ) : (\r\n          <CalendarDashboardPatient />\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CalendarDashboard;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useState, useContext } from \"react\";\r\nimport { Text, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { usePatientCreateReservation } from \"./../../../../services/api/reservation\";\r\nimport { TbibyContext } from \"./../../../../router/context\";\r\nconst BookingFormReserve = (props) => {\r\n  const [NomPrenom, setNomPrenom] = useState(\"\");\r\n  const {\r\n    medecin_id,\r\n    refetchTask,\r\n    currentDateStart,\r\n    cancelRef,\r\n    isOpen,\r\n    onClose,\r\n    data,\r\n    end,\r\n  } = props;\r\n  const toast = useToast();\r\n\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { mutate, isLoading } = usePatientCreateReservation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n      onClose();\r\n    },\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    restOfConfirmation(currentDateStart, end, user.id);\r\n  };\r\n\r\n  const [search, setSearch] = useState(\"old\");\r\n  const restOfConfirmation = (start, end, patient_id) => {\r\n    start = start.replace(\"T\", \" \") + \":00\";\r\n    mutate({\r\n      medecin_id: data.id,\r\n      patient_id,\r\n      etat: \"en ligne\",\r\n      date_reservation: start,\r\n    });\r\n  };\r\n  return (\r\n    <Box>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent>\r\n          <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n            <form noValidate onSubmit={MyForm.submit}>\r\n              <AlertDialogHeader>Confirmer la r√©servation</AlertDialogHeader>\r\n              <AlertDialogCloseButton />\r\n              <Spinner\r\n                display={!isLoading ? `none` : ``}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <AlertDialogBody display={isLoading ? `none` : ``}>\r\n                <Text pb={2} px={5}>\r\n                  R√©servation d'un rendez-vous le{\" \"}\r\n                  {currentDateStart.slice(0, 10) + \" \"}√†\r\n                  {\" \" + currentDateStart.slice(11, 19)}?\r\n                </Text>\r\n              </AlertDialogBody>\r\n              <AlertDialogFooter>\r\n                <Button\r\n                  display={isLoading ? `none` : ``}\r\n                  ref={cancelRef}\r\n                  onClick={onClose}\r\n                >\r\n                  Non\r\n                </Button>\r\n                <Button\r\n                  display={isLoading ? `none` : ``}\r\n                  disabled={!MyForm.isValid}\r\n                  type=\"submit\"\r\n                  ml={3}\r\n                >\r\n                  Oui\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </form>\r\n          </Formiz>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\nexport default BookingFormReserve;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport {\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport { useState, useRef, useContext } from \"react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { TbibyContext } from \"./../../../../router/context/index\";\r\nimport Alert from \"./../../../calendar/taks/alert\";\r\n\r\nconst TaskReserve = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  const [isOpenRemove, setIsOpenRemove] = useState(false);\r\n  const onCloseRemove = () => setIsOpenRemove(false);\r\n  const cancelRefRemove = useRef();\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { taskvalue, task, setTask, DeleteMutate, EnteredMutate, usertype } =\r\n    props;\r\n\r\n  const Entered = (event) => {\r\n    event.stopPropagation();\r\n    EnteredMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const remove = (event) => {\r\n    event.stopPropagation();\r\n    DeleteMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const detail = (event) => {\r\n    event.stopPropagation();\r\n  };\r\n  const getItemStyle = (isDragging, draggableStyle) => ({\r\n    ...draggableStyle,\r\n    userSelect: \"none\",\r\n    padding: 3,\r\n    margin: `0 0 0px 0`,\r\n  });\r\n\r\n  if (user.nom + \" \" + user.prenom == taskvalue.nomprenom) {\r\n    if (taskvalue.etat == \"en attente\") {\r\n      return (\r\n        <>\r\n          <Box\r\n            border=\"2px\"\r\n            borderRadius=\"20px\"\r\n            bgColor=\"green.200\"\r\n            borderColor=\"green.200\"\r\n            mx={3}\r\n            px={2}\r\n            children={\r\n              <Box color=\"gray.800\" fontSize=\"17px\">\r\n                {taskvalue.nomprenom}\r\n              </Box>\r\n            }\r\n          />\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <Draggable\r\n          key={taskvalue.id}\r\n          draggableId={taskvalue.id.toString()}\r\n          index={taskvalue.id}\r\n        >\r\n          {(provided, snapshot) => (\r\n            <Popover>\r\n              <PopoverTrigger>\r\n                <Box\r\n                  onClick={(event) => detail(event)}\r\n                  ref={provided.innerRef}\r\n                  {...provided.draggableProps}\r\n                  {...provided.dragHandleProps}\r\n                  style={\r\n                    (\"none\",\r\n                    getItemStyle(\r\n                      snapshot.isDragging,\r\n                      provided.draggableProps.style\r\n                    ))\r\n                  }\r\n                  border=\"2px\"\r\n                  borderRadius=\"20px\"\r\n                  bgColor={snapshot.isDragging ? `#3b8a5b` : `#b3e6c8`}\r\n                  borderColor=\"green.200\"\r\n                  mx={3}\r\n                  px={2}\r\n                  children={\r\n                    <Box color=\"gray.800\" fontSize=\"17px\">\r\n                      <Alert\r\n                        Header=\"Supprimer la r√©servation\"\r\n                        Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                        icon={<CloseIcon />}\r\n                        colorScheme=\"teal\"\r\n                        bg=\"red.300\"\r\n                        fnTodo={remove}\r\n                        btOK=\"Effacer\"\r\n                        btNon=\"Annuler\"\r\n                        isOpen={isOpen}\r\n                        setIsOpen={setIsOpen}\r\n                        onClose={onClose}\r\n                        cancelRef={cancelRef}\r\n                      />\r\n                      {taskvalue.nomprenom}\r\n                      {usertype == \"medecin\" ? (\r\n                        <Alert\r\n                          Header=\"Confirmer\"\r\n                          Body={`Voulez-vous confirmer que ${taskvalue.nomprenom} d√©butera sa consultation ? `}\r\n                          icon={<BsBoxArrowInRight />}\r\n                          bg=\"blue.300\"\r\n                          btOK=\"oui\"\r\n                          btNon=\"Non\"\r\n                          fnTodo={Entered}\r\n                          isOpen={isOpenRemove}\r\n                          setIsOpen={setIsOpenRemove}\r\n                          onClose={onCloseRemove}\r\n                          cancelRef={cancelRefRemove}\r\n                        />\r\n                      ) : null}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </PopoverTrigger>\r\n              <PopoverContent bg={mode(\"green.50\", \"gray.800\")}>\r\n                <PopoverHeader fontWeight=\"semibold\">\r\n                  {taskvalue.nomprenom}\r\n                </PopoverHeader>\r\n                <PopoverBody>\r\n                  Votre rendez-vous est le {taskvalue.start.slice(0, 10) + \" \"}√†\r\n                  {\" \" + taskvalue.start.slice(11, 19)}\r\n                </PopoverBody>\r\n              </PopoverContent>\r\n            </Popover>\r\n          )}\r\n        </Draggable>\r\n      );\r\n    }\r\n  } else {\r\n    return (\r\n      <>\r\n        <Box\r\n          border=\"2px\"\r\n          borderRadius=\"20px\"\r\n          bgColor=\"green.200\"\r\n          borderColor=\"green.200\"\r\n          mx={3}\r\n          px={2}\r\n          children={\r\n            <Box color=\"gray.800\" fontSize=\"17px\">\r\n              Patiente\r\n            </Box>\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n};\r\nexport default TaskReserve;\r\n","import { Box, Flex, Text } from \"@chakra-ui/layout\";\r\nimport { Grid } from \"@chakra-ui/layout\";\r\nimport { GridItem } from \"@chakra-ui/layout\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport TaskReserve from \"../taks\";\r\n\r\nconst TimeElementReserve = (props) => {\r\n  const {\r\n    usertype,\r\n    HoursValue,\r\n    key,\r\n    value,\r\n    DeleteMutate,\r\n    addtask,\r\n    task,\r\n    EnteredMutate,\r\n    setTask,\r\n  } = props;\r\n\r\n  return (\r\n    <Box\r\n      key={key}\r\n      h=\"160px\"\r\n      fontSize=\"20px\"\r\n      border=\"1px\"\r\n      borderColor={mode(\"green.200\", \"gray.800\")}\r\n    >\r\n      <Grid\r\n        h=\"100%\"\r\n        templateRows=\"repeat(4, 1fr)\"\r\n        border=\"3px\"\r\n        borderColor=\"red.200\"\r\n        gap={0}\r\n      >\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"00\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.50\", \"gray.600\")}\r\n              // bgColor={snapshot.isDraggingOver ? \"green.100\" : `gray.50`}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"00\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"00\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"15\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.100\", \"gray.700\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"15\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"15\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"30\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.200\", \"gray.800\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"30\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"30\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"45\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.300\", \"gray.900\")}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    (parseInt(HoursValue.slice(0, 2)) < 9)\r\n                    ? `0${parseInt(HoursValue.slice(0, 2)) + 1}:00`\r\n                    : parseInt(HoursValue.slice(0, 2)) + 1 + \":00\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"45\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"45\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\nexport default TimeElementReserve;\r\n","import { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport TimeElementReserve from \"./calendar/timeElement/index\";\r\nfunction CalendarReservePara(props) {\r\n  const {\r\n    usertype,\r\n    EnteredMutate,\r\n    rowNumber,\r\n    date,\r\n    DeleteMutate,\r\n    task,\r\n    updateTask,\r\n    setTask,\r\n    addtask,\r\n  } = props;\r\n\r\n  //const [, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const Hours = [\r\n    // \"00:00\",\r\n    // \"01:00\",\r\n    // \"02:00\",\r\n    // \"03:00\",\r\n    // \"04:00\",\r\n    // \"05:00\",\r\n    // \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    // \"19:00\",\r\n    // \"20:00\",\r\n    // \"21:00\",\r\n    // \"22:00\",\r\n    // \"23:00\",\r\n  ];\r\n\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n\r\n  const contenu = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    contenu.push(\r\n      <Box>\r\n        <Center\r\n          w=\"100%\"\r\n          key={index}\r\n          border=\"1px\"\r\n          borderColor={mode(\"green.200\", \"gray.800\")}\r\n          bgColor={mode(\"green.300\", \"gray.600\")}\r\n          color={mode(\"green.800\", \"gray.50\")}\r\n          h={10}\r\n          align=\"center\"\r\n        >\r\n          {value.toISOString().slice(0, 10)}\r\n        </Center>\r\n        {Hours.map((HoursValue) => (\r\n          <TimeElementReserve\r\n            EnteredMutate={EnteredMutate}\r\n            usertype={usertype}\r\n            DeleteMutate={DeleteMutate}\r\n            key={HoursValue.slice(0, 4)}\r\n            HoursValue={HoursValue}\r\n            value={value}\r\n            addtask={addtask}\r\n            task={task}\r\n            setTask={setTask}\r\n          />\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={0}>\r\n        <GridItem colSpan={1}>\r\n          <Box\r\n            w=\"100%\"\r\n            border=\"1px\"\r\n            bgColor={mode(\"green.300\", \"gray.600\")}\r\n            borderColor={mode(\"green.200\", \"gray.800\")}\r\n          >\r\n            <Center h={10} align=\"center\"></Center>\r\n            {Hours.map((value) => (\r\n              <Center\r\n                border=\"1px\"\r\n                borderColor={mode(\"green.200\", \"gray.800\")}\r\n                bgColor={mode(\"green.300\", \"gray.600\")}\r\n                color={mode(\"green.800\", \"gray.50\")}\r\n                h=\"160px\"\r\n                key={value}\r\n                px={2}\r\n                fontSize=\"20px\"\r\n              >\r\n                {value}\r\n              </Center>\r\n            ))}\r\n          </Box>\r\n        </GridItem>\r\n        <GridItem colSpan={9} w=\"100%\">\r\n          <Grid\r\n            w=\"100%\"\r\n            templateColumns={\"repeat(\" + parseInt(rowNumber) + \", 1fr)\"}\r\n            gap={0}\r\n          >\r\n            <DragDropContext onDragEnd={(result) => updateTask(result)}>\r\n              {contenu}\r\n            </DragDropContext>\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CalendarReservePara;\r\n","import { useUpdateReservation } from \"../../../services/api/reservation\";\r\nimport { useToast, Button, Tooltip } from \"@chakra-ui/react\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  useDeleteReservation,\r\n  useListReservationEnLigne,\r\n} from \"./../../../services/api/reservation\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport BookingFormReserve from \"./bookingForm/index\";\r\nimport CalendarReservePara from \"./../calendar\";\r\nimport { TbibyContext } from \"./../../../router/context/index\";\r\nconst CalendarReserve = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { data } = props;\r\n  const params = { medecin_id: data.id, patient_id: user.id };\r\n  const toast = useToast();\r\n  const [task, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const [date, setDate] = useState(new Date());\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const [daysView, setDaysView] = useState(1);\r\n  const [end, setend] = useState(\"\");\r\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef();\r\n\r\n  const { isLoading, refetch: refetchTask } = useListReservationEnLigne({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { mutate, isLoading: isLoadingUpdate } = useUpdateReservation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n    },\r\n  });\r\n  const updateTask = (element) => {\r\n    mutate({\r\n      id: element.draggableId,\r\n      date_reservation:\r\n        element.destination.droppableId.replace(\"T\", \" \") + \":00\",\r\n    });\r\n  };\r\n\r\n  const addtask = (event, start, end) => {\r\n    event.stopPropagation();\r\n    setend(end);\r\n    setCurrentDateStart(start);\r\n    onOpen();\r\n  };\r\n  return (\r\n    <Box>\r\n      <Spinner\r\n        display={!isLoadingUpdate && !DeleteIsLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box display={isLoadingUpdate || DeleteIsLoading ? `none` : ``}>\r\n        <Flex py={2}>\r\n          <Button\r\n            ml={2}\r\n            colorScheme=\"green\"\r\n            onClick={() => addDays(date, daysView * -1)}\r\n          >\r\n            <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n              <ArrowLeftIcon />\r\n            </Tooltip>\r\n          </Button>\r\n          <Spacer />\r\n          {!isMobile ? (\r\n            <Button mx={2} onClick={() => setDaysView(1)}>\r\n              Par jour\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n\r\n          <Button mx={2} onClick={() => setDate(new Date())}>\r\n            Aujourd'hui\r\n          </Button>\r\n          {!isMobile ? (\r\n            <Button mx={2} onClick={() => setDaysView(2)}>\r\n              Par 2 jour\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n          <Spacer />\r\n          <Button\r\n            mr={2}\r\n            colorScheme=\"green\"\r\n            onClick={() => addDays(date, daysView)}\r\n          >\r\n            <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n              <ArrowRightIcon />\r\n            </Tooltip>\r\n          </Button>\r\n        </Flex>\r\n      </Box>\r\n\r\n      <CalendarReservePara\r\n        usertype={\"reservie\"}\r\n        DeleteMutate={DeleteMutate}\r\n        task={task}\r\n        setTask={setTask}\r\n        date={date}\r\n        rowNumber={daysView}\r\n        updateTask={updateTask}\r\n        addtask={addtask}\r\n      />\r\n\r\n      <BookingFormReserve\r\n        data={data}\r\n        currentDateStart={currentDateStart}\r\n        cancelRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        refetchTask={refetchTask}\r\n        medecin_id={data.id}\r\n        setTask={setTask}\r\n        end={end}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\nexport default CalendarReserve;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport CalendarReserve from \"./calendar/index\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiHomeHeart } from \"react-icons/bi\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nconst ReserverUnRendezVous = (props) => {\r\n  const { data } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  return (\r\n    <>\r\n      <Tooltip\r\n        label=\"Consultez la salle d'attente\"\r\n        aria-label=\"Consultez la salle d'attente\"\r\n      >\r\n        <Button ref={btnRef} size=\"sm\" my={3} onClick={onOpen}>\r\n          {isMobile ? <BiHomeHeart fontSize=\"30px\" /> : `Rendez-vous `}\r\n        </Button>\r\n      </Tooltip>\r\n      <Drawer\r\n        size=\"full\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>\r\n              Salle d'attente {data.nom} {data.prenom} ü™ë{\" \"}\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <CalendarReserve data={data} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default ReserverUnRendezVous;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Stack,\r\n  FormControl,\r\n  Button,\r\n  Text,\r\n  ButtonGroup,\r\n  SimpleGrid,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useRelation } from \"../../../services/api/relation\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nconst AjoutMedecin = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { refetch } = props;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const { mutate, isLoading } = useRelation({\r\n    onError: (error) => {\r\n      setMessage(\r\n        \"V√©rifiez les informations de contact ou la liste que vous avez ins√©r√©es\"\r\n      );\r\n    },\r\n    onSuccess: (res) => {\r\n      setMessage(\"\");\r\n      refetch();\r\n    },\r\n  });\r\n  const myForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.patient_id = user.id;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={myForm.submit}>\r\n          <Stack\r\n            spacing=\"2\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <SimpleGrid columns={2} spacing={10} w=\"100%\">\r\n              <FormControl minW={{ md: \"320px\" }} id=\"search\">\r\n                <MyField\r\n                  name=\"medecin_id\"\r\n                  Placeholder=\"Entrez l'email ou le t√©l√©phone du m√©decin\"\r\n                />\r\n                <Text color=\"tomato\">{message}</Text>\r\n              </FormControl>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  position=\"relative\"\r\n                  top=\"8px\"\r\n                  type=\"submit\"\r\n                  fontSize=\"20px\"\r\n                  p={5}\r\n                  w=\"100%\"\r\n                >\r\n                  <Spinner display={!isLoading ? `none` : ``} color=\"red.500\" />\r\n                  Ajouter ü©∫\r\n                </Button>\r\n              </ButtonGroup>\r\n            </SimpleGrid>\r\n          </Stack>\r\n        </form>\r\n      </Formiz>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AjoutMedecin;\r\n","import { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\n\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n} from \"@chakra-ui/react\";\r\nconst MedecinInfo = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button mx={1}>\r\n          {isMobile ? <BiInfoCircle fontSize=\"30px\" /> : `Info`}\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <Portal>\r\n        <PopoverContent>\r\n          <PopoverArrow />\r\n          <PopoverHeader>\r\n            {data.nom && data.nom + \" \" + data.prenom}\r\n            {data.nomprenom && data.nomprenom}{\" \"}\r\n          </PopoverHeader>\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            {data.photo && (\r\n              <Box>\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={data.nom + \" \" + data.prenom}\r\n                  src={`${link}${data.photo}`}\r\n                />\r\n              </Box>\r\n            )}\r\n\r\n            {data.Adresse && <Text>Adresse : {data.Adresse} </Text>}\r\n            {data.Code_APCI && <Text>Code_APCI : {data.Code_APCI} </Text>}\r\n            {data.email && (\r\n              <Text as=\"a\" href={\"mailto:\" + data.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            )}\r\n            {data.telephone && (\r\n              <Text display=\"block\" as=\"a\" href={\"tel:\" + data.telephone}>\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            )}\r\n          </PopoverBody>\r\n          <PopoverFooter>\r\n            Ce sont des informations personnelles sur votre patient\r\n          </PopoverFooter>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n};\r\nexport default MedecinInfo;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  useToast,\r\n  Spinner,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Button,\r\n  Avatar,\r\n  Text,\r\n  PopoverFooter,\r\n  Heading,\r\n  Link as LinkChakra,\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { TableContent } from \"../../components/table/TableContent\";\r\nimport { TablePagination } from \"../../components/table/TablePagination\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport { useRelationPM } from \"./../../services/api/relation\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport ReserverUnRendezVous from \"../../components/reserver un rendez-vous\";\r\nimport AjoutMedecin from \"./_partials/AjoutMedecin\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\n\r\nconst MonMedecin = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n\r\n  const params = { patient_id: user.id, page: page };\r\n  const { isLoading, refetch } = useRelationPM({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <MedecinInfo data={data} />,\r\n    fn2: (data) => <ReserverUnRendezVous data={data} />,\r\n  });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucun m√©decin dans votre liste.\r\n        </Heading>\r\n        <Text mt=\"4\" fontSize=\"lg\">\r\n          Si vous voulez trouver un m√©decin,entrer ses coordonn√©es dans le barre\r\n          ci-dessus\r\n        </Text>\r\n        <Text mt fontSize=\"lg\">\r\n          (C.I.N , E-mail, Num¬∞t√©l)\r\n        </Text>\r\n      </>\r\n    );\r\n  };\r\n  let header = [\"Nom Prenom\", \"domaine\"];\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <AjoutMedecin refetch={refetch} />\r\n\r\n          <Box>\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MonMedecin;\r\n","import { Box, Center, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport Alert from \"./../calendar/taks/alert\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nimport { useColorModeValue as mode, Heading } from \"@chakra-ui/react\";\r\n\r\nconst PatientsAtTheDoctor = (props) => {\r\n  const {\r\n    patientsWaiting,\r\n    setCurrentPatient,\r\n    DeleteMutate,\r\n    currentPatient,\r\n    SPTWRMutate,\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n\r\n  const [isOpenWaiting, setIsOpenWaiting] = useState(false);\r\n  const onCloseWaiting = () => setIsOpenWaiting(false);\r\n  const cancelRefWaiting = useRef();\r\n\r\n  const removePatient = (event, target) => {\r\n    event.stopPropagation();\r\n\r\n    DeleteMutate({ id: target });\r\n    if (target == currentPatient.rendez_vous_id) {\r\n      setCurrentPatient({});\r\n    }\r\n    onClose();\r\n  };\r\n  const ToWaiting = (event, target) => {\r\n    event.stopPropagation();\r\n    SPTWRMutate({ id: target });\r\n    if (target == currentPatient.rendez_vous_id) {\r\n      setCurrentPatient({});\r\n    }\r\n    onCloseWaiting();\r\n  };\r\n  if (patientsWaiting.length != 0) {\r\n    return (\r\n      <SimpleGrid columns={{ base: 1, md: 3, lg: 5 }} spacing={2}>\r\n        {patientsWaiting.map((data) => (\r\n          <Box\r\n            _hover={{ cursor: \"pointer\" }}\r\n            bg={mode(\"green.100\", \"gray.800\")}\r\n            key={`${data.id}`}\r\n            borderRadius=\"20px\"\r\n            textAlign=\"center\"\r\n            p={2}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setCurrentPatient(data);\r\n            }}\r\n          >\r\n            {data.nomprenom}\r\n            <Box>\r\n              <Alert\r\n                hoverMassage=\"Supprimer la r√©servation\"\r\n                Header=\"Supprimer la r√©servation\"\r\n                Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${data.nomprenom}`}\r\n                icon={<CloseIcon w={4} h={4} />}\r\n                colorScheme=\"teal\"\r\n                bg=\"red.300\"\r\n                target={data.rendez_vous_id}\r\n                fnTodo={removePatient}\r\n                btOK=\"Effacer\"\r\n                btNon=\"Annuler\"\r\n                isOpen={isOpen}\r\n                setIsOpen={setIsOpen}\r\n                onClose={onClose}\r\n                cancelRef={cancelRef}\r\n              />\r\n              <Alert\r\n                hoverMassage=\"Envoyer cette patient √† la salle d'attente\"\r\n                Header=\"envoyer √† la salle d'attente\"\r\n                Body={`√ätes-vous s√ªr que vous voulez envoyer ${data.nomprenom} √† la salle d'attente`}\r\n                icon={<ExternalLinkIcon w={4} h={4} />}\r\n                colorScheme=\"teal\"\r\n                bg=\"green.300\"\r\n                target={data.rendez_vous_id}\r\n                fnTodo={ToWaiting}\r\n                btOK=\"Effacer\"\r\n                btNon=\"Annuler\"\r\n                isOpen={isOpenWaiting}\r\n                setIsOpen={setIsOpenWaiting}\r\n                onClose={onCloseWaiting}\r\n                cancelRef={cancelRefWaiting}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        ))}\r\n      </SimpleGrid>\r\n    );\r\n  } else {\r\n    return (\r\n      <Center>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Aucun patient pour le moment\r\n        </Heading>\r\n      </Center>\r\n    );\r\n  }\r\n};\r\nexport default PatientsAtTheDoctor;\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Textarea,\r\n} from \"@chakra-ui/react\";\r\nexport const TextareaForm = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Textarea\r\n        id={id}\r\n        type={type || \"text\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const Prix = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        min={0}\r\n        id={id}\r\n        type={type || \"number\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) =>\r\n          e.target.value < 0 ? setValue(0) : setValue(e.target.value)\r\n        }\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","const AddElement = {\r\n  // @Required\r\n  // plugin name\r\n  name: \"Element\",\r\n\r\n  // @Required\r\n  // data display\r\n  display: \"submenu\",\r\n\r\n  // @Required\r\n  // add function - It is called only once when the plugin is first run.\r\n  // This function generates HTML to append and register the event.\r\n  // arguments - (core : core object, targetElement : clicked button element)\r\n  add: function (core, targetElement) {\r\n    // Generate submenu HTML\r\n    // Always bind \"core\" when calling a plugin function\r\n    let listDiv = this.setSubmenu.call(core);\r\n\r\n    // You must bind \"core\" object when registering an event.\r\n    /** add event listeners */\r\n    var self = this;\r\n    listDiv.querySelectorAll(\".se-btn-list\").forEach(function (btn) {\r\n      btn.addEventListener(\"click\", self.onClick.bind(core));\r\n    });\r\n\r\n    // @Required\r\n    // You must add the \"submenu\" element using the \"core.initMenuTarget\" method.\r\n    /** append target button menu */\r\n    core.initMenuTarget(this.name, targetElement, listDiv);\r\n  },\r\n\r\n  setSubmenu: function () {\r\n    const listDiv = this.util.createElement(\"DIV\");\r\n    listDiv.className = \"se-submenu se-list-layer\";\r\n    listDiv.innerHTML = `<div class=\"se-list-inner se-list-font-size\">\r\n                            <ul class=\"se-list-basic\">\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{patientNomPrenom}\">\r\n                                      Nom et prenom du patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{sexesPatient}\">\r\n                                      Mr or MMr Patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{agePatient}\">\r\n                                    √Çge du patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{datePatient}\">\r\n                                    date de naissance patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{addresPatient}\">\r\n                                    Address patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{sexesmedecin}\">\r\n                                      Mr or MMr medecin\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{medecinNomPrenom}\">\r\n                                    Nom et prenom du medecin\r\n                                    </button>\r\n                                </li>\r\n                              \r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{thisDate}\">\r\n                                    date de cette journ√©e\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{specialiteMedecin}\">\r\n                                    specialite medecin\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{domaineMedecin}\">\r\n                                    domain medecin\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                        </div>`;\r\n\r\n    return listDiv;\r\n  },\r\n  onClick: function (e) {\r\n    const value = e.target.value;\r\n    const node = this.util.createElement(\"span\");\r\n    this.util.addClass(node, \"se-custom-tag\");\r\n    node.textContent = value;\r\n    this.insertNode(node);\r\n    const zeroWidthSpace = this.util.createTextNode(this.util.zeroWidthSpace);\r\n    node.parentNode.insertBefore(zeroWidthSpace, node.nextSibling);\r\n    this.submenuOff();\r\n  },\r\n};\r\n\r\nexport default AddElement;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\r\nimport AddElement from \"./AddElement\";\r\nimport \"./editer.css\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { MyField } from \"../formInput\";\r\nimport { useAddCertificatType } from \"./../../services/api/certificat\";\r\nimport { useToast, Spinner, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst EditerCertificat = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddCertificatType({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      }); // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n  const editorRef = useRef();\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.structure = editerValue;\r\n    values.cms_users_id = user.id;\r\n    mutate(values);\r\n  };\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un certificat\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"full\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Cr√©ez votre type de certificat</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"type\"\r\n                        label=\"nom de certif\"\r\n                        required=\"vous devez saisir le nom de la certification\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <SunEditor\r\n                      ref={editorRef}\r\n                      lang=\"fr\"\r\n                      name=\"my-editor\"\r\n                      height=\"auto\"\r\n                      placeholder=\"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n                      showToolbar={true}\r\n                      values={editerValue}\r\n                      onChange={handleChange}\r\n                      setOptions={{\r\n                        plugins: [AddElement],\r\n                        buttonList: [\r\n                          [\"undo\", \"redo\"],\r\n                          [\r\n                            \"font\",\r\n                            \"fontSize\",\r\n                            \"formatBlock\",\r\n                            \":p-More Paragraph-default.more_paragraph\",\r\n                          ],\r\n                          [\"paragraphStyle\", \"blockquote\"],\r\n                          [\r\n                            \"bold\",\r\n                            \"underline\",\r\n                            \"italic\",\r\n                            \"strike\",\r\n                            \"subscript\",\r\n                            \"superscript\",\r\n                          ],\r\n                          [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n                          [\"removeFormat\"],\r\n                          [\"image\"],\r\n                          [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n                          [\r\n                            {\r\n                              name: \"Element\",\r\n                              dataCommand: \"Element\",\r\n                              buttonClass: \"\",\r\n                              title: \"Element\",\r\n                              dataDisplay: \"submenu\",\r\n                              innerHTML:\r\n                                '<div style=\"width: 70px;\">Mod√®le</div>',\r\n                            },\r\n                          ],\r\n                          [\"fullScreen\"],\r\n                        ],\r\n                      }}\r\n                    />\r\n                    <Box p={2} borderLeft=\"1px\" my={2}>\r\n                      Utiliser le boutton 'mod√®le' pour cr√©er vos propres\r\n                      certificats . Exemple : si vou ajoutez 'patientNomPr√©nom'\r\n                      , lors de votre consulation le nom de votre patient sera\r\n                      ajout√© automatiquement en utilisant votre certificat\r\n                      mod√©lis√©e.\r\n                    </Box>\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default EditerCertificat;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useAddCertificatType = (config) => {\r\n  return useMutation(\r\n    ({ type, structure, cms_users_id }) =>\r\n      axios.post(\"addct\", { type, structure, cms_users_id }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateCertificatType = (config) => {\r\n  return useMutation(\r\n    ({ type, structure, cms_users_id, id }) =>\r\n      axios.post(\"uct\", { type, structure, cms_users_id, id }),\r\n    config\r\n  );\r\n};\r\nexport const useGetCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\"gc\", () => axios.get(\"gc\", { params }), config);\r\n};\r\n\r\nexport const useGetListCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\"ltc\", () => axios.get(\"ltc\", { params }), config);\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState, useRef, useContext } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport EditerCertificat from \"./editer\";\r\nimport { useGetCertificat } from \"../../services/api/certificat\";\r\nimport { useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { usePatentInfo } from \"./../../services/api/patient information\";\r\nimport InputSunEditor from \"../formInput/SunEditorInput\";\r\nexport const Certificat = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n  const editorRef = useRef();\r\n  // editorRef.current.editor.setContents(editerValue);\r\n\r\n  const { id, removeComponentsForm, Patient, name, key } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n  const [selectValues, setSelectValues] = useState([]);\r\n  const params = { cms_users_id: user.id };\r\n  const { isLoading, refetch } = useGetCertificat({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValues(res.data);\r\n    },\r\n  });\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const paramsPatentInfo = { cms_users_id: Patient.id };\r\n  const { isLoading: isLodingForPatentInfo, refetch: refetchPatentInfo } =\r\n    usePatentInfo({\r\n      params: paramsPatentInfo,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setPatientInfo(res.data);\r\n      },\r\n    });\r\n  // console.log(patientInfo);\r\n\r\n  const replaceAll = (string, search, replace) => {\r\n    return string.split(search).join(replace);\r\n  };\r\n\r\n  const decodeMessage = (text) => {\r\n    let sexesM = user.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    let sexesP = Patient.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    text = replaceAll(text, \"{sexesPatient}\", sexesP);\r\n    text = replaceAll(text, \"{medecinNomPrenom}\", user.nom + \" \" + user.prenom);\r\n    text = replaceAll(\r\n      text,\r\n      \"{patientNomPrenom}\",\r\n      patientInfo.nom + \" \" + patientInfo.prenom\r\n    );\r\n    text = replaceAll(text, \"{addresPatient}\", Patient.Adresse);\r\n    text = replaceAll(text, \"{sexesmedecin}\", sexesM);\r\n    text = replaceAll(text, \"{specialiteMedecin}\", \"\");\r\n    text = replaceAll(text, \"{domaineMedecin}\", \"\");\r\n    text = replaceAll(\r\n      text,\r\n      \"{datePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? new Date(patientInfo.date_naissance).toISOString().slice(0, 10)\r\n        : ``\r\n    );\r\n    text = replaceAll(\r\n      text,\r\n      \"{thisDate}\",\r\n      new Date().toISOString().slice(0, 10)\r\n    );\r\n\r\n    text = replaceAll(\r\n      text,\r\n      \"{agePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? Math.abs(\r\n            new Date(\r\n              Date.now() - new Date(patientInfo.date_naissance).getTime()\r\n            ).getUTCFullYear() - 1970\r\n          )\r\n        : ``\r\n    );\r\n\r\n    return text;\r\n  };\r\n\r\n  const changeValueOfEditer = (e) => {\r\n    refetch();\r\n    setEditerValue(e.value);\r\n    editorRef.current.editor.setContents(decodeMessage(e.value));\r\n  };\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const print = () => {\r\n    const mywindow = window.open(\"\", \"PRINT\");\r\n\r\n    mywindow.document.write(decodeMessage(editerValue));\r\n\r\n    mywindow.document.close(); // necessary for IE >= 10\r\n\r\n    mywindow.focus(); // necessary for IE >= 10*/\r\n    mywindow.addEventListener(\"afterprint\", function (event) {\r\n      mywindow.close();\r\n    });\r\n    mywindow.print();\r\n  };\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\" key={\"c\" + key}>\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Certificat`}\r\n\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <EditerCertificat user={user} />\r\n\r\n        <Box py={2}>\r\n          <InputSunEditor\r\n            required={\r\n              \"Vous devez √©crire un certificat ou simplement le supprimer\"\r\n            }\r\n            name={name}\r\n            editorRef={editorRef}\r\n            Patient={Patient}\r\n          />\r\n        </Box>\r\n\r\n        <Box py={2}>\r\n          <Select2\r\n            label=\"Type de certificat\"\r\n            data={selectValues}\r\n            onChange={(e) => changeValueOfEditer(e)}\r\n            name=\"selectvalue\"\r\n          />\r\n        </Box>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Divider } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode, useToast } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../formInput\";\r\nimport { Prix } from \"../formInput/Prix\";\r\nimport { useGetAllListActe, useGetOnetActe } from \"../../services/api/acte\";\r\nexport const Acte = (props) => {\r\n  const { id, removeComponentsForm, name, key } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [code, setCode] = useState(\"\");\r\n  const [designation, setDesignation] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const { isLoading, refetch } = useGetAllListActe({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data);\r\n    },\r\n  });\r\n  const { mutate, isLoading: isLoadingGetActe } = useGetOnetActe({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setCode(res.data.code);\r\n      setDesignation(res.data.designation);\r\n      setPrice(res.data.price);\r\n    },\r\n  });\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\" key={\"a\" + key}>\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Acte`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <Select2\r\n          label=\"S√©lectionner une acte\"\r\n          data={selectValue}\r\n          onChange={(e) => mutate({ id: e.value })}\r\n          name=\"selectvalue\"\r\n        />\r\n        <MyField name={`${name}.code`} label=\"Code\" dtValue={code} />\r\n        <TextareaForm\r\n          name={`${name}.designation`}\r\n          label=\"Diagnostic\"\r\n          dtValue={designation}\r\n        />\r\n        <TextareaForm name={`${name}.note`} label=\"Note\" dtValue=\"\" />\r\n        <Prix name={`${name}.prix`} label=\"Prix\" dtValue={price} />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useCreateActe = (config) => {\r\n  return useMutation(\r\n    ({ code, designation, price }) =>\r\n      axios.post(\"add_act\", { code, designation, price }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateActe = (config) => {\r\n  return useMutation(\r\n    ({ code, designation, price, id }) =>\r\n      axios.post(\"uact\", { code, designation, price, id }),\r\n    config\r\n  );\r\n};\r\nexport const useGetListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\"la\", () => axios.get(\"la\", { params }), config);\r\n};\r\nexport const useGetAllListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"get acte (select2)\", params],\r\n    () => axios.get(\"gac\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useGetOnetActe = (config) => {\r\n  return useMutation(({ id }) => axios.post(\"ga\", { id }), config);\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Divider } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../formInput\";\r\nimport { Prix } from \"../formInput/Prix\";\r\nexport const Examen = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Examen`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <MyField\r\n          name={`${name}.type`}\r\n          label=\"Type d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n        <TextareaForm\r\n          name={`${name}.note`}\r\n          label=\"Note d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n        <Prix\r\n          name={`${name}.prix`}\r\n          label=\"Prix d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useRef, HTMLAttributes } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useField } from \"@formiz/core\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./date-picker.css\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const InputDateRange = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n\r\n  const { label, required } = props;\r\n  const [isTouched, setIsTouched] = React.useState(true);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(null);\r\n  const onChange = (dates) => {\r\n    const [start, end] = dates;\r\n    setStartDate(start);\r\n    setEndDate(end);\r\n    if (!!start && !!end) {\r\n      setValue(\r\n        start.toISOString().slice(0, 10) + \"|\" + end.toISOString().slice(0, 10)\r\n      );\r\n    }\r\n  };\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <React.Fragment>\r\n      <FormControl>\r\n        <FormLabel htmlFor={id}>\r\n          {label}\r\n          {!!required && \" *\"}\r\n        </FormLabel>\r\n\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={onChange}\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          selectsRange\r\n          inline\r\n          aria-required={!!required}\r\n          onBlur={() => setIsTouched(true)}\r\n        />\r\n      </FormControl>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useAddMedicament } from \"../../services/api/list medicament\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { MyField } from \"../formInput\";\r\n\r\nconst AjoutMedicament = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddMedicament({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Medicament ajout√© avec succ√®s\",\r\n        description: \"Vous pouvez l'utiliser maintenant dans la consultation\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un medicament\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Ajouter un medicament</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AjoutMedicament;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useListMedicament = ({ params, ...config } = {}) => {\r\n  return useQuery(\"listem\", () => axios.get(\"listem\", { params }), config);\r\n};\r\nexport const useAddMedicament = (config) => {\r\n  return useMutation(\r\n    ({ designation }) => axios.post(\"addm\", { designation }),\r\n    config\r\n  );\r\n};\r\nexport const useGetListeMedicamentSelect2 = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"Liste Medicament (select2)\",\r\n    () => axios.get(\"lms2\", { params }),\r\n    config\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Center, Code } from \"@chakra-ui/layout\";\r\nimport React, { useState } from \"react\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport {\r\n  useColorModeValue as mode,\r\n  SimpleGrid,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { RiPrinterFill } from \"react-icons/ri\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { InputDateRange } from \"./../formInput/range\";\r\nimport { useGetListeMedicamentSelect2 } from \"./../../services/api/list medicament\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { MyField } from \"./../formInput\";\r\nimport AjoutMedicament from \"./../medicament\";\r\nimport { useField } from \"@formiz/core\";\r\nexport const Ordonnance = (props) => {\r\n  const { id, removeComponentsForm, name, MyForm } = props;\r\n  const toast = useToast();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const { values } = MyForm;\r\n  const ordonnanceImprime = () => {\r\n    let ord = values.ordonnances;\r\n    return (\r\n      <Box>\r\n        {ord != [] && ord != null\r\n          ? ord.map((value) => (\r\n              <>\r\n                {value != null ? (\r\n                  <Box>\r\n                    {!!value.medicament_id &&\r\n                      `Medicament :  ${value.medicament_id.label}`}\r\n\r\n                    {!!value.NBR_FOIS_JOURS &&\r\n                      ` | Quantit√© :  ${value.NBR_FOIS_JOURS.label}`}\r\n                    {!!value.duree_entre_chaque_medicament &&\r\n                      ` | Dur√©e entre chaque medicament :  ${value.duree_entre_chaque_medicament}`}\r\n\r\n                    {!!value.lorsqueVousPrenezLeMedicament &&\r\n                      ` | Utilisation :  ${value.lorsqueVousPrenezLeMedicament}`}\r\n                  </Box>\r\n                ) : (\r\n                  ``\r\n                )}\r\n              </>\r\n            ))\r\n          : ``}\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  const print = () => {\r\n    const mywindow = window.open(\"\", \"PRINT\");\r\n\r\n    mywindow.document.write(\r\n      ReactDOMServer.renderToStaticMarkup(ordonnanceImprime())\r\n    );\r\n\r\n    mywindow.document.close(); // necessary for IE >= 10\r\n\r\n    mywindow.focus(); // necessary for IE >= 10*/\r\n    mywindow.addEventListener(\"afterprint\", function (event) {\r\n      mywindow.close();\r\n    });\r\n    mywindow.print();\r\n  };\r\n\r\n  const { refetch } = useGetListeMedicamentSelect2({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data);\r\n    },\r\n  });\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Medicament`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <Input\r\n          placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n          display={showEditTitle ? `none` : `inline`}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <Center>\r\n          <AjoutMedicament refetch={refetch} />\r\n        </Center>\r\n        {MyForm.isValid ? (\r\n          <Button\r\n            onClick={print}\r\n            variant=\"outline\"\r\n            colorScheme=\"teal\"\r\n            size=\"lg\"\r\n          >\r\n            <RiPrinterFill />\r\n          </Button>\r\n        ) : (\r\n          <Center pt={3}>\r\n            <Code colorScheme=\"red\" p={2}>\r\n              remplissez les champs n√©cessaire puis imprimer l'ordonnance\r\n            </Code>\r\n          </Center>\r\n        )}\r\n        <InputDateRange\r\n          name={`${name}.duree`}\r\n          label=\"Dur√©e\"\r\n          required=\"le champ dur√©e est obligatoire\"\r\n        />\r\n        <Select2\r\n          label=\"S√©lectionner une medicament\"\r\n          data={selectValue}\r\n          name={`${name}.medicament_id`}\r\n          required=\" üíäle champ nom de medicament est obligatoire\"\r\n        />\r\n        <MyField\r\n          name={`${name}.duree_entre_chaque_medicament`}\r\n          label=\"Dur√©e entre chaque medicament\"\r\n        />\r\n        <SimpleGrid columns={{ lg: 1, xl: 2 }} spacing={2}>\r\n          <Select2\r\n            name={`${name}.NBR_FOIS_JOURS`}\r\n            label=\"Nombre de fois par jour\"\r\n            data={[\r\n              { label: \"1\", value: 1 },\r\n              { label: \"2\", value: 2 },\r\n              { label: \"3\", value: 3 },\r\n              { label: \"4\", value: 4 },\r\n              { label: \"5\", value: 5 },\r\n              { label: \"6\", value: 6 },\r\n              { label: \"7\", value: 7 },\r\n              { label: \"8\", value: 8 },\r\n              { label: \"9\", value: 9 },\r\n              { label: \"10\", value: 10 },\r\n            ]}\r\n          />\r\n          <MyField\r\n            name={`${name}.lorsqueVousPrenezLeMedicament`}\r\n            label=\"Utilisation des m√©dicaments\"\r\n          />\r\n        </SimpleGrid>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState, useContext } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useListeMedec } from \"../../services/api/Medecin information\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"./../../router/context/index\";\r\nexport const Lettre = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n  const params = { id: user.id };\r\n  const { isLoading, refetch } = useListeMedec({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data || []);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Lettre`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <Input\r\n          placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n          display={showEditTitle ? `none` : `inline`}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <Select2\r\n          selectValue=\"true\"\r\n          label=\"S√©lectionner un med√©cin\"\r\n          data={selectValue}\r\n          name={`${name}.medecin_destiantaire_id`}\r\n        />\r\n        <TextareaForm\r\n          name={`${name}.description`}\r\n          label=\"Contenu de lettre\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { TextareaForm } from \"./../../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../../formInput\";\r\nexport const AntecedantsForm = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Antecedant`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <MyField name={`${name}.type`} label=\"type de antecedant\" />\r\n        <TextareaForm\r\n          name={`${name}.description`}\r\n          label=\"description de antecedant\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { TextareaForm } from \"./../../../components/formInput/Textarea\";\r\nimport {\r\n  Accordion,\r\n  Box,\r\n  Button,\r\n  CloseButton,\r\n  Divider,\r\n  SimpleGrid,\r\n  useToast,\r\n  Spinner,\r\n  useColorModeValue as mode,\r\n  Code,\r\n  Center,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { Prix } from \"./../../../components/formInput/Prix\";\r\nimport { Certificat } from \"../../../components/Certificat\";\r\nimport { Acte } from \"../../../components/Acte\";\r\nimport { Examen } from \"../../../components/Examen\";\r\nimport { Ordonnance } from \"./../../../components/Ordonnance\";\r\nimport { Lettre } from \"./../../../components/Lettre\";\r\nimport { AntecedantsForm } from \"./../../../components/Antecedants/AntecedantsForm\";\r\nimport { useCreateConsultation } from \"./../../../services/api/consultation\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst Form = (props) => {\r\n  const toast = useToast();\r\n  const { user } = useContext(TbibyContext);\r\n  const {\r\n    Patient,\r\n    setCurrentPatient,\r\n    refetchPatientListe,\r\n    patientsWaiting,\r\n    setpatientsWaiting,\r\n  } = props;\r\n\r\n  const [id, setId] = useState(0);\r\n  const { mutate, isLoading } = useCreateConsultation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      patientsWaiting.splice(patientsWaiting.indexOf(Patient), 1);\r\n      setpatientsWaiting([...patientsWaiting]);\r\n      refetchPatientListe();\r\n      setCurrentPatient({});\r\n      setComponentsForm([]);\r\n      toast({\r\n        title: \"Enregistr√© avec succ√®s ‚úîÔ∏è\",\r\n        description: \"votre consultation enregistr√© avec succ√®s \",\r\n        status: \"success\",\r\n        duration: `3000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n  });\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n\r\n  const handleSubmit = () => {\r\n    values.rendez_vous_id = Patient.rendez_vous_id;\r\n    values.patient_id = Patient.id;\r\n    values.medecin_id = user.id;\r\n    mutate(values);\r\n  };\r\n  const [componentsForm, setComponentsForm] = useState([]);\r\n  const addelement = (element) => {\r\n    setId(id + 1);\r\n    setComponentsForm([...componentsForm, element]);\r\n  };\r\n  const removeComponentsForm = (id) => {\r\n    setComponentsForm([\r\n      ...componentsForm.filter(function (obj) {\r\n        return obj.id !== id;\r\n      }),\r\n    ]);\r\n  };\r\n  return (\r\n    <Box>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box overflowX=\"auto\" display={isLoading ? `none` : ``}>\r\n        <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={MyForm.submit}>\r\n            <TextareaForm name=\"Diagnostic\" label=\"Diagnostic\" />\r\n\r\n            <Divider my={5} />\r\n            <Box display={componentsForm.length > 0 ? `block` : `none`}>\r\n              D√©tail\r\n              <CloseButton\r\n                onClick={() => setComponentsForm([])}\r\n                colorScheme=\"red\"\r\n                bgColor=\"red.200\"\r\n                float=\"right\"\r\n                boxShadow=\"dark-lg\"\r\n              />\r\n            </Box>\r\n            <Accordion\r\n              defaultIndex={[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\r\n              allowMultiple\r\n            >\r\n              {componentsForm\r\n                .sort((a, b) => a - b)\r\n                .map(({ id, type }, index) => {\r\n                  if (type === \"certificat\") {\r\n                    return (\r\n                      <Certificat\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`certificats[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"acte\") {\r\n                    return (\r\n                      <Acte\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        index={index}\r\n                        name={`actes[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"examen\") {\r\n                    return (\r\n                      <Examen\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`examens[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"antecedants\") {\r\n                    return (\r\n                      <AntecedantsForm\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`antecedants[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"ordonnance\") {\r\n                    return (\r\n                      <Ordonnance\r\n                        id={id}\r\n                        key={id}\r\n                        MyForm={MyForm}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`ordonnances[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"lettre\") {\r\n                    return (\r\n                      <Lettre\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`lettres[${index}]`}\r\n                      />\r\n                    );\r\n                  }\r\n                })}\r\n            </Accordion>\r\n            <Box py={3}>\r\n              <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"certificat\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Certificat\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"acte\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Acte\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"examen\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Examen\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"antecedants\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Antecedants\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"ordonnance\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Medicament\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"lettre\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Lettre\r\n                </Button>\r\n              </SimpleGrid>\r\n            </Box>\r\n            <Divider my={5} />\r\n            <Box right={0}>\r\n              <Prix\r\n                name=\"prix\"\r\n                required={\r\n                  \"Vous devez √©crire une valeur pour votre consultation\"\r\n                }\r\n                label=\"prix consultation\"\r\n                value={0}\r\n              />\r\n            </Box>\r\n            {!MyForm.isValid ? (\r\n              <Center mt={5}>\r\n                <Code colorScheme=\"red\">\r\n                  Remplissez les champs n√©cessaires puis enregistrer\r\n                </Code>\r\n              </Center>\r\n            ) : (\r\n              ` `\r\n            )}\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green\"\r\n                colorScheme=\"green\"\r\n                disabled={!MyForm.isValid}\r\n              >\r\n                Enregistrer\r\n                {!MyForm.isValid ? `` : ` ‚úîÔ∏è `}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default Form;\r\n","import { Box, Center, Text, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport React, { useContext, useState, useRef } from \"react\";\r\nimport { useListOfThePatientInConsultation } from \"../../services/api/consultation\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useToast,\r\n  Spinner,\r\n  useColorModeValue as mode,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { useDeleteReservation } from \"./../../services/api/reservation\";\r\nimport { useSendPatientToWaitingRoom } from \"./../../services/api/manageTheRoom\";\r\nimport PatientsAtTheDoctor from \"../../components/patients at the doctor\";\r\nimport GeneralPatientsInformation from \"../../components/general patients information\";\r\nimport Antecedants from \"./../../components/Antecedants\";\r\nimport Form from \"./_partials/form\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport HistoriquePatient from \"./../../components/historique patient/index\";\r\n\r\nconst Consultation = () => {\r\n  const toast = useToast();\r\n  const [patientsWaiting, setpatientsWaiting] = useState([]);\r\n  const [currentPatient, setCurrentPatient] = useState({});\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const params = { medecin_id: user.id };\r\n  const { mutate: SPTWRMutate, isLoading: SPTWRIsLoading } =\r\n    useSendPatientToWaitingRoom({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  const { isLoading, refetch } = useListOfThePatientInConsultation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setpatientsWaiting(res.data);\r\n    },\r\n  });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={isLoading || DeleteIsLoading || SPTWRIsLoading ? `` : `none`}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        w=\"100%\"\r\n        p={5}\r\n        display={isLoading || DeleteIsLoading || SPTWRIsLoading ? `none` : ``}\r\n      >\r\n        <PatientsAtTheDoctor\r\n          SPTWRMutate={SPTWRMutate}\r\n          currentPatient={currentPatient}\r\n          DeleteMutate={DeleteMutate}\r\n          setCurrentPatient={setCurrentPatient}\r\n          patientsWaiting={patientsWaiting}\r\n        />\r\n      </Box>\r\n      <Box pb={5} display={!!currentPatient.nomprenom == \"\" ? `none` : `block`}>\r\n        <Center\r\n          p={5}\r\n          bg={mode(\"green.100\", \"gray.800\")}\r\n          mx=\"auto\"\r\n          boxShadow=\"xl\"\r\n          w={{ base: \"100%\", md: \"95%\" }}\r\n          borderRadius=\"20px\"\r\n        >\r\n          <Text fontSize=\"xl\"> {currentPatient.nomprenom}</Text>\r\n          <Button\r\n            position=\"relative\"\r\n            p={0}\r\n            m={0}\r\n            left={[\"5vw\", \"20vw\", \"10vw\", \"20vw\"]}\r\n            colorScheme=\"green\"\r\n            onClick={() => setCurrentPatient({})}\r\n          >\r\n            <CloseIcon w={4} h={4} />\r\n          </Button>\r\n        </Center>\r\n\r\n        <Box\r\n          mx=\"auto\"\r\n          boxShadow=\"lg\"\r\n          bg={mode(\"green.50\", \"gray.800\")}\r\n          w={{ base: \"90%\", md: \"92%\" }}\r\n        >\r\n          <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n            <Box m={5} textAlign=\"center\">\r\n              <GeneralPatientsInformation patient={currentPatient} />\r\n            </Box>\r\n            <Box m={5} textAlign=\"center\">\r\n              <Antecedants patient={currentPatient} />\r\n            </Box>\r\n            <Box m={5} textAlign=\"center\">\r\n              <HistoriquePatient patient={currentPatient} />\r\n            </Box>\r\n          </SimpleGrid>\r\n\r\n          <Box p={5}>\r\n            <Form\r\n              setCurrentPatient={setCurrentPatient}\r\n              Patient={currentPatient}\r\n              refetchPatientListe={refetch}\r\n              patientsWaiting={patientsWaiting}\r\n              setpatientsWaiting={setpatientsWaiting}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Consultation;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\r\nimport AddElement from \"./AddElement\";\r\nimport \"./editer.css\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { MyField } from \"../formInput\";\r\nimport { useUpdateCertificatType } from \"./../../services/api/certificat\";\r\nimport { useToast, Spinner, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { BiSync } from \"react-icons/bi\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nconst CertificatUpdate = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { refetch, data, type, id, cms_users_id } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useUpdateCertificatType({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [editerValue, setEditerValue] = useState(data);\r\n  useEffect(() => {\r\n    setEditerValue(data);\r\n  }, [data]);\r\n  const btnRef = React.useRef();\r\n  const editorRef = useRef();\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.structure = editerValue;\r\n    values.id = id;\r\n    values.type = type;\r\n    values.cms_users_id = cms_users_id;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? <BiSync fontSize=\"30px\" /> : `Mettre √† jour`}\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"full\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Cr√©ez votre type de certificat</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <SunEditor\r\n                      ref={editorRef}\r\n                      lang=\"fr\"\r\n                      name=\"my-editor\"\r\n                      height=\"auto\"\r\n                      placeholder=\"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n                      showToolbar={true}\r\n                      setContents={editerValue}\r\n                      values={editerValue}\r\n                      onChange={handleChange}\r\n                      setOptions={{\r\n                        plugins: [AddElement],\r\n                        buttonList: [\r\n                          [\"undo\", \"redo\"],\r\n                          [\r\n                            \"font\",\r\n                            \"fontSize\",\r\n                            \"formatBlock\",\r\n                            \":p-More Paragraph-default.more_paragraph\",\r\n                          ],\r\n                          [\"paragraphStyle\", \"blockquote\"],\r\n                          [\r\n                            \"bold\",\r\n                            \"underline\",\r\n                            \"italic\",\r\n                            \"strike\",\r\n                            \"subscript\",\r\n                            \"superscript\",\r\n                          ],\r\n                          [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n                          [\"removeFormat\"],\r\n                          [\"image\"],\r\n                          [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n                          [\r\n                            {\r\n                              name: \"Element\",\r\n                              dataCommand: \"Element\",\r\n                              buttonClass: \"\",\r\n                              title: \"Element\",\r\n                              dataDisplay: \"submenu\",\r\n                              innerHTML:\r\n                                '<div style=\"width: 70px;\">Mod√®le</div>',\r\n                            },\r\n                          ],\r\n                          [\"fullScreen\"],\r\n                        ],\r\n                      }}\r\n                    />\r\n                    <Box p={2} borderLeft=\"1px\" my={2}>\r\n                      Utiliser le boutton 'mod√®le' pour cr√©er vos propres\r\n                      certificats . Exemple : si vou ajoutez 'patientNomPr√©nom'\r\n                      , lors de votre consulation le nom de votre patient sera\r\n                      ajout√© automatiquement en utilisant votre certificat\r\n                      mod√©lis√©e.\r\n                    </Box>\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CertificatUpdate;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport EditerCertificat from \"./../../components/Certificat/editer\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { useGetListCertificat } from \"./../../services/api/certificat\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport CertificatUpdate from \"./../../components/Certificat/CertificatUpdate\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nconst CertificatPage = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const id = user.idMedecin || user.id;\r\n  const [params, setParams] = useState({ id: id, page });\r\n  const { isLoading, refetch } = useGetListCertificat({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <CertificatUpdate\r\n        refetch={refetch}\r\n        data={data.structure}\r\n        type={data.type}\r\n        id={data.id}\r\n        cms_users_id={data.cms_users_id}\r\n      />\r\n    ),\r\n  });\r\n  let header = [\"Nom\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <EditerCertificat refetch={refetch} user={user} />\r\n        </Center>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <Stack\r\n            pt={10}\r\n            spacing=\"4\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n              <Tooltip\r\n                label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n                aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              >\r\n                <FormControl w=\"100%\" id=\"search\">\r\n                  <InputGroup size=\"sm\">\r\n                    <FormLabel srOnly>Filtrer:</FormLabel>\r\n                    <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                      <BsSearch />\r\n                    </InputLeftElement>\r\n                    <Input\r\n                      rounded=\"base\"\r\n                      type=\"search\"\r\n                      onChange={(value) => setInputValue(value.target.value)}\r\n                      placeholder=\"Filtrer\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n              </Tooltip>\r\n\r\n              <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n                <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                  <Button\r\n                    w=\"100%\"\r\n                    onClick={() => {\r\n                      setParams({ id: id, page, recherche: inputValue });\r\n                    }}\r\n                    iconSpacing=\"1\"\r\n                    leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                  >\r\n                    {\"Chercher\"}\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Stack>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CertificatPage;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  useToast,\r\n  Spinner,\r\n  Heading,\r\n  Text,\r\n  Link as Linkurl,\r\n  Button,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Avatar,\r\n  PopoverFooter,\r\n} from \"@chakra-ui/react\";\r\nimport { useConsultationPatient } from \"./../../services/api/consultation\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { useDeleteReservation } from \"./../../services/api/reservation\";\r\nimport G_Alert from \"../../components/general alert\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { link } from \"./../../services/api\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\n\r\nconst MonRendezvous = () => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"], [\"\"]]);\r\n  const params = { patient_id: user.id, page };\r\n\r\n  const { isLoading, refetch } = useConsultationPatient({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucun rendez vous\r\n        </Heading>\r\n        <Text mt=\"4\" fontSize=\"lg\">\r\n          si vous voulez r√©server un rendez-vous , consulter le lien suivant :\r\n        </Text>\r\n        <Linkurl>\r\n          Reserver un rendez-vous <ExternalLinkIcon mx=\"2px\" />\r\n        </Linkurl>\r\n      </>\r\n    );\r\n  };\r\n  const [fntable, setFntable] = useState({\r\n    fn2: (data) => (\r\n      <G_Alert\r\n        Header=\"Supprimer la r√©servation\"\r\n        Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${data.nomprenom}`}\r\n        icon={<CloseIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"red.300\"\r\n        target={{ id: data.id }}\r\n        fnTodo={DeleteMutate}\r\n        btOK=\"Effacer\"\r\n        btNon=\"Annuler\"\r\n      />\r\n    ),\r\n    fn: (data) => <MedecinInfo data={data} />,\r\n  });\r\n  let header = [\"Nom Prenom\", \"Date\"];\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <Box overflowX=\"auto\">\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MonRendezvous;\r\n","import { Select2 } from \"./../../components/formInput/select\";\r\nimport { useState } from \"react\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { useSousDomaine } from \"../../services/api/domaine\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { EmailIcon, SearchIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Box,\r\n  useToast,\r\n  Heading,\r\n  Spinner,\r\n  Center,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Avatar,\r\n  Text,\r\n  PopoverFooter,\r\n} from \"@chakra-ui/react\";\r\nimport { useDomaine } from \"./../../services/api/domaine\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport { useFindeDoctor } from \"./../../services/api/Trouver un medecin\";\r\nimport ReserverUnRendezVous from \"../../components/reserver un rendez-vous\";\r\nimport { TableActions } from \"./../../components/table/TableActions\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\nconst TrouverUnMedecin = (props) => {\r\n  let header = [\"Nom Prenom\", \"domaine\"];\r\n\r\n  const [content, setContent] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [domaine, setDomaine] = useState([]);\r\n  const [DomaineSelected, setDomaineSelected] = useState(-1);\r\n  const [sousDomaineSelected, setSousDomaineSelected] = useState(-1);\r\n  const [sousDomaine, setSousDomaine] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const toast = useToast();\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n  const params = {\r\n    search,\r\n    DomaineSelected,\r\n    sousDomaineSelected,\r\n    page,\r\n  };\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <ReserverUnRendezVous data={data} />,\r\n    fn2: (data) => <MedecinInfo data={data} />,\r\n  });\r\n  const { isLoading: isLoadingFindeDoctor, refetch: refetchFindeDoctor } =\r\n    useFindeDoctor({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        setContent((!!res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n  const { isLoading, refetch } = useDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setDomaine(res.data);\r\n      refetchFindeDoctor();\r\n    },\r\n  });\r\n  const param = { id: values.SelectDomaine };\r\n  const { isLoading: isLoadingSousD, mutate: mutateSousD } = useSousDomaine({\r\n    param,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSousDomaine(res.data);\r\n      refetchFindeDoctor();\r\n    },\r\n  });\r\n  const handleSubmit = (values) => {\r\n    // console.log(values);\r\n  };\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Aucun medecin n'existe sous cette sp√©cialit√©\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={MyForm.submit}>\r\n          <Grid\r\n            p={3}\r\n            templateColumns={{ base: \"repeat(1, 1fr)\", md: \"repeat(3, 1fr)\" }}\r\n            gap={3}\r\n          >\r\n            <Select2\r\n              data={domaine}\r\n              label=\"Domaine\"\r\n              onChange={(event) => {\r\n                setDomaineSelected(event.value);\r\n                setSousDomaine([]);\r\n                setSousDomaineSelected(-1);\r\n                mutateSousD({ domaine_id: event.value });\r\n              }}\r\n              name=\"SelectDomaine\"\r\n            />\r\n            <Select2\r\n              onChange={(event) => {\r\n                setSousDomaineSelected(event.value);\r\n                refetch();\r\n              }}\r\n              data={sousDomaine}\r\n              label=\"Sous Domaine\"\r\n              name=\"selectSousDomaine\"\r\n            />\r\n            <Button\r\n              top=\"45%\"\r\n              onClick={() => {\r\n                setSousDomaineSelected(-1);\r\n                setDomaineSelected(-1);\r\n              }}\r\n            >\r\n              Tous les m√©decins\r\n            </Button>\r\n          </Grid>\r\n          <Box>\r\n            <Center>\r\n              <Spinner\r\n                display={!isLoadingFindeDoctor ? `none` : ``}\r\n                textAlign=\"center\"\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n            </Center>\r\n            <Box display={isLoadingFindeDoctor ? `none` : ``}>\r\n              <TableActions\r\n                buttonText=\"Chercher\"\r\n                buttonIcon={<SearchIcon />}\r\n                chercherFn={setSearch}\r\n              />\r\n              <TableContent\r\n                header={header}\r\n                content={content}\r\n                fntable={fntable}\r\n                message={message}\r\n              />\r\n              <TablePagination\r\n                total={total}\r\n                next_page_url={next}\r\n                prev_page_url={prev}\r\n                page={page}\r\n                setPage={setPage}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </form>\r\n      </Formiz>\r\n    </>\r\n  );\r\n};\r\nexport default TrouverUnMedecin;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useFindeDoctor = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"Trouver un medecin\", params],\r\n    () => axios.get(\"tm\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Prix } from \"../../formInput/Prix\";\r\nimport { useCreateActe } from \"./../../../services/api/acte\";\r\nimport { MyField } from \"./../../formInput\";\r\n\r\nconst AjoutActe = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useCreateActe({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type d'acte ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir dans 'Liste d'acte'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un acte\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>D√©finit votre acte</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <Prix\r\n                        name=\"price\"\r\n                        label=\"Prix\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AjoutActe;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Prix } from \"../../formInput/Prix\";\r\nimport { MyField } from \"./../../formInput\";\r\nimport { useUpdateActe } from \"../../../services/api/acte\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiSync } from \"react-icons/bi\";\r\n\r\nconst UpdateAct = (props) => {\r\n  const { data, refetch } = props;\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useUpdateActe({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.id = data.id;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? <BiSync fontSize=\"30px\" /> : `Mettre √† jour`}\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent\r\n          //  bgColor={mode(\"green.50\", \"gray.700\")}\r\n          >\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Mettre √† jour votre acte</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        dtValue={data.code}\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        dtValue={data.designation}\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <Prix\r\n                        dtValue={data.price}\r\n                        name=\"price\"\r\n                        label=\"Prix\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default UpdateAct;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport AjoutActe from \"../../components/Acte/_parcial/AjoutActe\";\r\nimport { useGetListActe } from \"../../services/api/acte\";\r\nimport UpdateAct from \"./../../components/Acte/_parcial/UpdateAct\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\nconst ListeDact = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [params, setParams] = useState({ page });\r\n  const { isLoading, refetch } = useGetListActe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <UpdateAct data={data} refetch={refetch} />,\r\n  });\r\n  let header = [\"code\", \"designation\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <AjoutActe refetch={refetch} user={user} />\r\n        </Center>\r\n        <Stack\r\n          pt={10}\r\n          spacing=\"4\"\r\n          direction={{ base: \"column\", md: \"row\" }}\r\n          justify=\"space-between\"\r\n        >\r\n          <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n            <Tooltip\r\n              label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n            >\r\n              <FormControl w=\"100%\" id=\"search\">\r\n                <InputGroup size=\"sm\">\r\n                  <FormLabel srOnly>Filtrer:</FormLabel>\r\n                  <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                    <BsSearch />\r\n                  </InputLeftElement>\r\n                  <Input\r\n                    rounded=\"base\"\r\n                    type=\"search\"\r\n                    onChange={(value) => setInputValue(value.target.value)}\r\n                    placeholder=\"Filtrer\"\r\n                  />\r\n                </InputGroup>\r\n              </FormControl>\r\n            </Tooltip>\r\n\r\n            <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  w=\"100%\"\r\n                  onClick={() => {\r\n                    setParams({ page, recherche: inputValue });\r\n                    // refetch();\r\n                  }}\r\n                  iconSpacing=\"1\"\r\n                  leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                >\r\n                  {\"Chercher\"}\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Stack>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default ListeDact;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { useListMedicament } from \"../../services/api/list medicament\";\r\nimport AjoutMedicament from \"./../../components/medicament\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\n\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\nconst ListeMedicament = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [params, setParams] = useState({ page });\r\n  const { isLoading, refetch } = useListMedicament({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  let header = [\"nom\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <AjoutMedicament refetch={refetch} />\r\n        </Center>\r\n        <Stack\r\n          pt={10}\r\n          spacing=\"4\"\r\n          direction={{ base: \"column\", md: \"row\" }}\r\n          justify=\"space-between\"\r\n        >\r\n          <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n            <Tooltip\r\n              label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n            >\r\n              <FormControl w=\"100%\" id=\"search\">\r\n                <InputGroup size=\"sm\">\r\n                  <FormLabel srOnly>Filtrer:</FormLabel>\r\n                  <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                    <BsSearch />\r\n                  </InputLeftElement>\r\n                  <Input\r\n                    rounded=\"base\"\r\n                    type=\"search\"\r\n                    onChange={(value) => setInputValue(value.target.value)}\r\n                    placeholder=\"Filtrer\"\r\n                  />\r\n                </InputGroup>\r\n              </FormControl>\r\n            </Tooltip>\r\n\r\n            <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  w=\"100%\"\r\n                  onClick={() => {\r\n                    setParams({ page, recherche: inputValue });\r\n                    // refetch();\r\n                  }}\r\n                  iconSpacing=\"1\"\r\n                  leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                >\r\n                  {\"Chercher\"}\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Stack>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default ListeMedicament;\r\n","import React, { useContext } from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport Accountmanagement from \"./../../gestion de compte/\";\r\nimport { PrivateRoute } from \"./../../../router/_partials/PrivateRoute\";\r\nimport ListPatients from \"./../../Mes patients\";\r\nimport CalendarDashboard from \"./../../calendar\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nimport MonMedecin from \"./../../Mon medecin\";\r\nimport Consultation from \"../../consultation\";\r\nimport CertificatPage from \"../../Certificat\";\r\nimport MonRendezvous from \"./../../Mon rendez vous\";\r\nimport TrouverUnMedecin from \"../../Trouver un m√©decin\";\r\nimport ListeDact from \"../../ListeDact\";\r\nimport ListeMedicament from \"./../../Liste Medicament\";\r\nimport TableauDynamique from \"./../../../components/historique patient/_patials/TableauDynamique\";\r\nconst ActivityArea = () => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        flex=\"1\"\r\n        borderWidth=\"2px\"\r\n        rounded=\"xl\"\r\n        // overflowX=\"scroll\"\r\n        px={{ base: 0, md: 1 }}\r\n        py={{ base: 2, md: 1 }}\r\n      >\r\n        <PrivateRoute\r\n          path=\"/dashboard\"\r\n          component={CalendarDashboard}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n\r\n        <PrivateRoute\r\n          path=\"/dashboard/Consultation\"\r\n          component={Consultation}\r\n          isAuth={user.fonctionnalite == \"medecin\"}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mod√®le de certificat\"\r\n          component={CertificatPage}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Liste d'actes\"\r\n          component={ListeDact}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Gestion de compte\"\r\n          component={Accountmanagement}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes rendez vous\"\r\n          component={MonRendezvous}\r\n          isAuth={\r\n            user.fonctionnalite == \"patient\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Historiques\"\r\n          component={TableauDynamique}\r\n          isAuth={\r\n            user.fonctionnalite == \"patient\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes patients\"\r\n          component={ListPatients}\r\n          isAuth={user.fonctionnalite == \"medecin\"}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes m√©decins\"\r\n          component={MonMedecin}\r\n          isAuth={\r\n            user.fonctionnalite == \"patient\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Trouver un m√©decin\"\r\n          component={TrouverUnMedecin}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Liste medicament\"\r\n          component={ListeMedicament}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ActivityArea;\r\n","import { Box, Divider, useToast } from \"@chakra-ui/react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { useRemoveNotification } from \"./../../../services/api/notification\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { useSeeNotification } from \"./../../../services/api/notification\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst OneNotification = (props) => {\r\n  let history = useHistory();\r\n  const { notif, refetch, removeElement } = props;\r\n  const toast = useToast();\r\n  const handleClick = () => {\r\n    history.push(notif.url || \"/dashboard\");\r\n  };\r\n\r\n  const { isLoading, mutate } = useRemoveNotification({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetch();\r\n\r\n      //   setNotification(res.data);\r\n    },\r\n  });\r\n  const { mutate: seeNotifMutate } = useSeeNotification({\r\n    onSuccess: (res) => {\r\n      refetch();\r\n    },\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        p={2}\r\n        onClick={() => handleClick()}\r\n        onMouseEnter={() => {\r\n          if (notif.is_read == 0) {\r\n            seeNotifMutate({ id: notif.id });\r\n            notif.is_read = 1;\r\n          }\r\n        }}\r\n        color={mode(\"green.900\", \"gray.100\")}\r\n        bgColor={notif.is_read == 1 ? `` : mode(\"green.50\", \"gray.500\")}\r\n      >\r\n        <Box float=\"right\" fontSize=\"10px\" colorScheme=\"red\">\r\n          <IconButton\r\n            size=\"xs\"\r\n            m={1}\r\n            bg=\"red.300\"\r\n            colorScheme=\"teal\"\r\n            fontSize=\"10px\"\r\n            icon={<CloseIcon />}\r\n            onClick={(event) => {\r\n              removeElement(notif);\r\n              event.stopPropagation();\r\n              mutate({ id: notif.id });\r\n            }}\r\n          />\r\n        </Box>\r\n        {notif.content}\r\n      </Box>\r\n      <Divider />\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default OneNotification;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useNotification = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"notification\",\r\n    () => axios.get(\"notification\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useRemoveNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"rmnot\", { id }), config);\r\n};\r\nexport const useRemoveAllNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"rmanotif\", { id }), config);\r\n};\r\nexport const useSeeNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"vnotif\", { id }), config);\r\n};\r\n","import { useNotification } from \"./../../services/api/notification\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Tag,\r\n  Text,\r\n  TagLabel,\r\n  Divider,\r\n  useToast,\r\n  Button,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport OneNotification from \"./_partials/One notification\";\r\nimport { useRemoveAllNotification } from \"./../../services/api/notification\";\r\nconst Notification = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const toast = useToast();\r\n  const [notification, setNotification] = useState([]);\r\n  const params = { id: user.id };\r\n  const { isLoading, refetch } = useNotification({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setNotification(res.data);\r\n    },\r\n  });\r\n  const { mutate: removeAllNotificationMutate } = useRemoveAllNotification({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n  });\r\n  const removeElement = (element) => {\r\n    let array = [...notification];\r\n    array.splice(array.indexOf(element), 1);\r\n    // console.log(array);\r\n    setNotification(array);\r\n  };\r\n  return notification.length ? (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Tag\r\n          mx={3}\r\n          size=\"lg\"\r\n          colorScheme=\"gray\"\r\n          borderRadius=\"full\"\r\n          _hover={{ cursor: \"pointer\" }}\r\n        >\r\n          <Tooltip label=\"Notification\" aria-label=\"Notification\">\r\n            üîî\r\n          </Tooltip>\r\n\r\n          <TagLabel>\r\n            {notification.length != 0 ? notification.length : ``}\r\n          </TagLabel>\r\n        </Tag>\r\n      </PopoverTrigger>\r\n      <PopoverContent mx={2}>\r\n        <PopoverArrow />\r\n        <PopoverCloseButton />\r\n        <PopoverHeader>\r\n          <Text fontSize=\"2xl\"> Notification</Text>\r\n          {notification.length != 0 ? (\r\n            <Button\r\n              fontSize=\"13px\"\r\n              onClick={() => {\r\n                removeAllNotificationMutate({ id: user.id });\r\n                setNotification([]);\r\n              }}\r\n              float=\"right\"\r\n              mr={2}\r\n            >\r\n              Effacer tout\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n        </PopoverHeader>\r\n        <PopoverBody overflowY=\"scroll\" maxH=\"70vh\">\r\n          {notification.map((element) => (\r\n            <OneNotification\r\n              removeElement={removeElement}\r\n              refetch={refetch}\r\n              notif={element}\r\n            ></OneNotification>\r\n          ))}\r\n        </PopoverBody>\r\n        <Divider />\r\n      </PopoverContent>\r\n    </Popover>\r\n  ) : null;\r\n};\r\nexport default Notification;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Tooltip,\r\n  useBoolean,\r\n  useBreakpointValue,\r\n  useColorMode,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { NavBreadcrumb } from \"./_partials\";\r\nimport * as React from \"react\";\r\nimport { HiMenu, HiX } from \"react-icons/hi\";\r\nimport ScrollArea from \"./ScrollArea\";\r\nimport Menu from \"./menu\";\r\nimport UserAvatar from \"./userAvatar\";\r\nimport ActivityArea from \"./activityArea\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Notification from \"./../../components/notification\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nconst Dashboard = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const { pathname } = useLocation();\r\n  const { isOpen, toggle, actions } = useMobileMenuState();\r\n  const handlers = useSwipeable({\r\n    onSwipedLeft: () => toggle(),\r\n    onSwipedRight: () => toggle(),\r\n    preventDefaultTouchmoveEvent: true,\r\n    trackMouse: true,\r\n  });\r\n  return (\r\n    <Flex\r\n      {...handlers}\r\n      height=\"100vh\"\r\n      w=\"100vw\"\r\n      bg={mode(\"green.500\", \"inherit\")}\r\n      overflow=\"hidden\"\r\n      sx={{ \"--sidebar-width\": \"245px\" }}\r\n    >\r\n      <Box\r\n        as=\"nav\"\r\n        display=\"block\"\r\n        flex=\"1\"\r\n        width=\"var(--sidebar-width)\"\r\n        left=\"0\"\r\n        py=\"5\"\r\n        px=\"1\"\r\n        color=\"gray.200\"\r\n        position=\"fixed\"\r\n      >\r\n        <Box fontSize=\"sm\" lineHeight=\"tall\">\r\n          <UserAvatar />\r\n          <ScrollArea pt=\"5\" pb=\"6\">\r\n            <Menu toggle={toggle} />\r\n          </ScrollArea>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        flex=\"1\"\r\n        p={{ base: \"0\", md: \"6\" }}\r\n        marginStart={{ md: \"var(--sidebar-width)\" }}\r\n        position=\"relative\"\r\n        left={isOpen ? \"var(--sidebar-width)\" : \"0\"}\r\n        transition=\"left 0.2s\"\r\n      >\r\n        <Box\r\n          maxW=\"2560px\"\r\n          bg={mode(\"white\", \"gray.700\")}\r\n          height=\"100%\"\r\n          // pb=\"0\"\r\n          rounded={{ md: \"lg\" }}\r\n        >\r\n          <Flex direction=\"column\" height=\"full\">\r\n            <Flex\r\n              w=\"full\"\r\n              py=\"4\"\r\n              justify=\"space-between\"\r\n              align=\"center\"\r\n              px=\"10\"\r\n            >\r\n              <Flex align=\"center\" minH=\"8\">\r\n                <MobileMenuButton onClick={toggle} isOpen={isOpen} />\r\n                <NavBreadcrumb path={pathname} />\r\n              </Flex>\r\n              <Flex align=\"center\" minH=\"8\">\r\n                <Notification />\r\n                <Box\r\n                  display=\"inline\"\r\n                  _hover={{ cursor: \"pointer\" }}\r\n                  onClick={toggleColorMode}\r\n                >\r\n                  <Tooltip label=\"Mode sombre\" aria-label=\"Mode sombre\">\r\n                    {colorMode === \"light\" ? \"‚òÄÔ∏è\" : \"üåô\"}\r\n                  </Tooltip>\r\n                </Box>\r\n              </Flex>\r\n            </Flex>\r\n            <Flex\r\n              direction=\"column\"\r\n              flex=\"1\"\r\n              overflow=\"auto\"\r\n              px={{ base: 1, md: 6, lg: 8 }}\r\n            >\r\n              <ScrollArea>\r\n                <ActivityArea />\r\n              </ScrollArea>\r\n            </Flex>\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst MobileMenuButton = (props) => {\r\n  const { onClick, isOpen } = props;\r\n  return (\r\n    <Box\r\n      display={{ base: \"block\", md: \"none\" }}\r\n      ml=\"-8\"\r\n      mr=\"2\"\r\n      as=\"button\"\r\n      type=\"button\"\r\n      rounded=\"md\"\r\n      p=\"1\"\r\n      fontSize=\"xl\"\r\n      color=\"gray.500\"\r\n      _hover={{ bg: \"gray.100\" }}\r\n      onClick={onClick}\r\n    >\r\n      <Box srOnly>{isOpen ? \"Close Menu\" : \"Open Menu\"}</Box>\r\n      {isOpen ? <HiX /> : <HiMenu />}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useMobileMenuState = () => {\r\n  const [isOpen, actions] = useBoolean();\r\n  const isMobile = useBreakpointValue({ base: true, md: false });\r\n  React.useEffect(() => {\r\n    if (isMobile == false) {\r\n      actions.off();\r\n    }\r\n  }, [isMobile, actions]);\r\n  return { isOpen, ...actions };\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nimport {\r\n  useToast,\r\n  Box,\r\n  Text,\r\n  FormControl,\r\n  Button,\r\n  Spinner,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"../../../components/formInput/\";\r\nimport { MyFieldPassword } from \"../../../components/formInput/password\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLogin } from \"./../../../services/api/auth\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const { setUser } = useContext(TbibyContext);\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useLogin({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      let data = { ...res.data };\r\n      if (Object.entries(res.data).length !== 0 && data.status == \"Active\") {\r\n        data.isAuthenticated = true;\r\n        localStorage.setItem(\"user\", JSON.stringify(data));\r\n        setUser(data);\r\n        toast({\r\n          title:\r\n            \"üë®‚Äç‚öïÔ∏è Bienvenue \" +\r\n            (data.sexes == \"homme\" ? `Mr ` : `Mrs `) +\r\n            data.nom,\r\n          description: \" Vous √™tes maintenant connect√© √† votre compte.\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      } else {\r\n        toast({\r\n          titre: \"V√©rifiez vos informationsüîê\",\r\n          description:\r\n            \"Entrez votre e-mail, t√©l√©phone ou CIN et votre mot de passe\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      }\r\n      history.push(\"/dashboard\");\r\n    },\r\n  });\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box display={isLoading ? `none` : ``}>\r\n        <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={MyForm.submit}>\r\n            <MyField\r\n              name=\"user\"\r\n              label=\"Nom d'utilisateur\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              note=\"Connectez-vous avec  N¬∞ T√©l√©phone ou votre N¬∞ C.I.N ou E-mail\"\r\n            />\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              type=\"password\"\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!MyForm.isValid}\r\n              >\r\n                Se connecter\r\n                {!MyForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n\r\n        <Text mt=\"4\" align=\"center\" maxW=\"md\" fontWeight=\"medium\">\r\n          <Box\r\n            marginStart=\"1\"\r\n            color={mode(\"blue.600\", \"blue.200\")}\r\n            _hover={{ color: \"blue.600\" }}\r\n            display={{ base: \"block\", sm: \"revert\" }}\r\n          >\r\n            <Link to=\"singup\">Cr√©ez votre compte ‚ú®</Link>\r\n          </Box>\r\n        </Text>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Formiz, useForm } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  Radio,\r\n  Stack,\r\n  RadioGroup,\r\n  Button,\r\n  Center,\r\n  useToast,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  isEmail,\r\n  isLength,\r\n  isNumber,\r\n  isPattern,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport { InputDate } from \"./../../../components/formInput/date\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport { MyFieldPassword } from \"../../../components/formInput/password\";\r\nimport React, { useState } from \"react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSingup } from \"./../../../services/api/auth\";\r\nimport { Code } from \"@chakra-ui/layout\";\r\n\r\nconst Singup = () => {\r\n  let history = useHistory();\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useSingup({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      res = res.data;\r\n      if (res.api_status == 1) {\r\n        if (res.exists) {\r\n          toast({\r\n            title: res.elementExists + \" existe d√©ja\",\r\n            description: \"choisir un autre \" + res.elementExists + \" üí≠\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \" ‚ú® \",\r\n            description: \"üéâVotre compte a √©t√© enregistr√©\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n          history.push(\"/login\");\r\n        }\r\n      }\r\n    },\r\n  });\r\n  const [fonctionnalite, setFonctionnalite] = useState(\"patient\");\r\n  const [sexes, setSexes] = useState(\"homme\");\r\n\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const handleSubmit = (values) => {\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = fonctionnalite;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Stack\r\n        maxW={400}\r\n        display={isLoading ? `none` : ``}\r\n        margin=\"auto\"\r\n        spacing={5}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={myForm.submit}>\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup\r\n                  onChange={setFonctionnalite}\r\n                  value={fonctionnalite}\r\n                  name=\"id_cms_privileges\"\r\n                >\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"patient\" py={3} mx={5}>\r\n                      üôã‚Äç‚ôÇ Patient\r\n                    </Radio>\r\n                    <Radio value=\"medecin\" py={3} mx={5}>\r\n                      ü©∫ M√©decin\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n\r\n            <MyField\r\n              name=\"nom\"\r\n              label=\"Nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le nom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"prenom\"\r\n              label=\"Pr√©nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le prenom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"homme\" py={3} mx={5}>\r\n                      Homme üë®‚Äçü¶∞\r\n                    </Radio>\r\n                    <Radio value=\"femme\" py={3} mx={5}>\r\n                      Femme üë©‚Äçü¶∞\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n            <InputDate\r\n              name=\"date_naissance\"\r\n              label=\"Date de naissance\"\r\n              //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n            />\r\n\r\n            <MyField\r\n              name=\"email\"\r\n              label=\"E-mail\"\r\n              validations={[\r\n                {\r\n                  rule: isEmail(),\r\n                  message: \"Veuillez v√©rifier le format de l'E-mail\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.telephone,\r\n                  message: 'Le champ E-mail doit contenir \"@\" et \".\" ',\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"cin\"\r\n              label=\"C.I.N\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message: \"La carte d'identit√© ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.email || !!values.telephone,\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.email, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"telephone\"\r\n              label=\"T√©l√©phone\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.email,\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.cin, values.email],\r\n                },\r\n              ]}\r\n            />\r\n            <Code colorScheme=\"cyan\" my={5} fontSize=\"15px\">\r\n              Vous devez entrer votre email OU votre C.I.N OU votre num√©ro de\r\n              t√©l√©phone afin que vous puissiez suivre\r\n            </Code>\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ \"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: isMinLength(6),\r\n                  message:\r\n                    \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"R_password\"\r\n              label=\"R√©p√©ter le mot de passe\"\r\n              required=\"Il est requis de compl√©ter le champ correspondant au r√©p√©ter mot de passe\"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: (val) => val == values.password,\r\n                  message: \"Le mot de passe r√©p√©t√© doit √™tre le m√™me.\",\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Cr√©er mon compte\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n        <Center>\r\n          <Link to=\"login\">\r\n            Se connecter\r\n            <ExternalLinkIcon mx=\"2px\" />\r\n          </Link>\r\n        </Center>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Singup;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  useColorModeValue as mode,\r\n  Heading,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport Login from \"./Login\";\r\nimport Singup from \"./Sing up\";\r\nimport { Route } from \"react-router\";\r\n\r\nconst log = () => {\r\n  return (\r\n    <Box\r\n      bg={mode(\"green.50\", \"inherit\")}\r\n      minH=\"100vh\"\r\n      py=\"12\"\r\n      px={{ sm: \"6\", lg: \"8\" }}\r\n    >\r\n      <Box maxW={{ sm: \"md\" }} mx={{ sm: \"auto\" }} w={{ sm: \"full\" }}>\r\n        <Box>\r\n          <Box>\r\n            <Image\r\n              maxW={[\"140px\", \"140px\", \"140px\", \"275px\"]}\r\n              // maxWidth=\"140px\"\r\n              m=\"auto\"\r\n              src=\"./logo192.png\"\r\n              alt=\"Tbiby\"\r\n            />\r\n          </Box>\r\n          <Heading mt=\"6\" textAlign=\"center\" size=\"xl\" fontWeight=\"extrabold\">\r\n            Bienvenue √† Tbiby\r\n          </Heading>\r\n        </Box>\r\n        <Box maxW={{ sm: \"md\" }} mx={{ sm: \"auto\" }} mt=\"8\" w={{ sm: \"full\" }}>\r\n          <Box\r\n            bg={mode(\"white\", \"gray.700\")}\r\n            py=\"8\"\r\n            px={{ base: \"4\", md: \"10\" }}\r\n            shadow=\"base\"\r\n            rounded={{ sm: \"lg\" }}\r\n          >\r\n            <Route component={Login} exact path=\"/login\" />\r\n            <Route component={Singup} exact path=\"/Singup\" />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default log;\r\n","import React from \"react\";\r\nimport { Center, Box, Image, Button } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Error404 = () => {\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <Center minH=\"100vh\" textAlign=\"center\">\r\n      <Box>\r\n        <Box>\r\n          <Image src=\"\" w=\"100%\" src=\"./image/404.png\" />\r\n        </Box>\r\n        <Box mt={10}>\r\n          <Button\r\n            onClick={() => history.push(\"/dashboard\")}\r\n            variant=\"outline\"\r\n            size=\"lg\"\r\n            colorScheme=\"green\"\r\n          >\r\n            üö¶ Page d'accueil üö¶\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\nexport default Error404;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PublicRoute = ({ isAuth, ...otherProps }) => {\r\n  if (!isAuth) {\r\n    return <Route {...otherProps} />;\r\n  }\r\n\r\n  return (\r\n    <Redirect\r\n      to={{\r\n        pathname: \"/dashboard\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Dashboard from \"./../pages/dashboard\";\r\nimport { ReactQueryDevtools as ApiDevtools } from \"react-query/devtools\";\r\nimport log from \"../pages/log\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nimport PrivateRoute from \"./_partials/PrivateRoute\";\r\n\r\nimport Error404 from \"./../pages/404\";\r\nimport TheContext, { TbibyContext } from \"./context\";\r\nimport PublicRoute from \"./_partials/PublicRoute\";\r\nfunction MainRouter() {\r\n  const { user } = useContext(TbibyContext);\r\n  // const { isAuthenticated } = useContext(TbibyContext);\r\n  // const auth = new Auth();\r\n  const queryClient = new QueryClient();\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Redirect to=\"/dashboard\" />\r\n          </Route>\r\n          <PublicRoute\r\n            component={log}\r\n            path=\"/login\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <PublicRoute\r\n            component={log}\r\n            path=\"/singup\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            component={Dashboard}\r\n            path=\"/dashboard\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <Route component={Error404} path=\"*\" />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MainRouter;\r\n","import React from \"react\";\r\nimport { ReactQueryDevtools as ApiDevtools } from \"react-query/devtools\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport TheContext from \"./router/context\";\r\nimport MainRouter from \"./router\";\r\n\r\nfunction App() {\r\n  // const { isAuthenticated } = useContext(TbibyContext);\r\n  // console.log(isAuthenticated);\r\n  // const auth = new Auth();\r\n\r\n  const queryClient = new QueryClient();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <QueryClientProvider client={queryClient}>\r\n        <TheContext>\r\n          <MainRouter />\r\n          <ApiDevtools initialIsOpen={false} />\r\n        </TheContext>\r\n      </QueryClientProvider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const globalStyle = {\r\n  \".chakra-collapse\": {\r\n    overflow: \"visible!important\",\r\n  },\r\n  \".chakra-accordion .css-0 > * \": {\r\n    display: \"block\",\r\n  },\r\n};\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\nimport { globalStyle } from \"./globalStyle\";\r\n\r\nconst config = {\r\n  initialColorMode: \"light\",\r\n  useSystemColorMode: false,\r\n};\r\nconst theme = extendTheme({ config });\r\nexport default theme;\r\nconst overwrite = {\r\n  styles: {\r\n    global: () => ({\r\n      ...globalStyle,\r\n    }),\r\n  },\r\n};\r\nexport const customTheme = extendTheme(overwrite);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, ColorModeScript, CSSReset } from \"@chakra-ui/react\";\r\nimport App from \"./app\";\r\nimport theme, { customTheme } from \"./theme\";\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n      <ChakraProvider theme={customTheme}>\r\n        <CSSReset />\r\n        <App />\r\n      </ChakraProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n  reportWebVitals();\r\n};\r\nif (window.cordova) {\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  startApp();\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}