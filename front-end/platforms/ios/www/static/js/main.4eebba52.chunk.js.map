{"version":3,"sources":["reportWebVitals.js","router/context/index.jsx","pages/dashboard/_partials/index.jsx","pages/dashboard/ScrollArea/index.jsx","pages/dashboard/SidebarLink/index.jsx","pages/dashboard/menu/index.jsx","services/api/index.jsx","pages/dashboard/userAvatar/index.jsx","components/formInput/date.jsx","components/formInput/index.jsx","components/formInput/password.jsx","components/FieldGroup/index.jsx","pages/gestion de compte/gestion compte patient/index.jsx","components/formInput/select.jsx","services/api/domaine/index.jsx","MyField.js","pages/gestion de compte/gestion compte medecin/_partials/Domaine.jsx","pages/gestion de compte/gestion compte medecin/_partials/SousDomaine.jsx","pages/gestion de compte/gestion compte medecin/index.jsx","components/formInput/image.jsx","pages/gestion de compte/index.jsx","services/api/Update Compte/index.jsx","services/api/gestion de compte/index.jsx","router/_partials/PrivateRoute.js","components/table/TableActions.jsx","components/table/TableContent.jsx","components/table/TablePagination.jsx","pages/rappel/index.jsx","services/api/relation/index.jsx","pages/Mes patients/_partials/AjoutPatient.jsx","components/Acte/ActeHistorique/index.jsx","services/api/Historique patient/index.jsx","services/api/patient information/index.jsx","components/InformationsSurLeMedecin/index.jsx","services/api/Medecin information/index.jsx","components/Antecedants/descriptionMobile/index.jsx","components/Antecedants/index.jsx","components/formInput/SunEditorInput.jsx","components/Certificat/ShowCertifica.jsx","components/Certificat/CertificatHistorique/index.jsx","components/Consultation/_partial/DetatilConsultation.jsx","services/api/consultation/index.jsx","components/Consultation/index.jsx","components/Examen/ExamenHistorique/index.jsx","components/Lettre/LettreHistorique/index.jsx","components/Ordonnance/OrdonnanceHistorique/index.jsx","components/historique patient/_patials/TableauDynamique.jsx","components/historique patient/index.jsx","components/informationSurPatient/index.jsx","pages/Mes patients/index.jsx","components/calendar/taks/alert.jsx","components/calendar/taks/index.jsx","components/calendar/timeElement/index.jsx","components/calendar/index.jsx","services/api/reservation/index.jsx","MyFieldPassword.js","services/api/auth/index.jsx","pages/calendar/bookingForm/AddNewPatient.jsx","pages/calendar/bookingForm/index.jsx","components/general alert/index.jsx","components/general patients information/_partials/text.jsx","components/general patients information/index.jsx","components/confirmer un rendez vous/index.jsx","services/api/manageTheRoom/index.jsx","pages/calendar/medecin.jsx","services/api/listPatientDashboard/inde.jsx","pages/calendar/patient.jsx","pages/calendar/index.jsx","components/reserver un rendez-vous/calendar/bookingForm/index.jsx","components/reserver un rendez-vous/calendar/taks/index.jsx","components/reserver un rendez-vous/calendar/timeElement/index.jsx","components/reserver un rendez-vous/calendar.jsx","components/reserver un rendez-vous/calendar/index.jsx","components/reserver un rendez-vous/index.jsx","pages/Mon medecin/_partials/AjoutMedecin.jsx","components/InformationsSurLeMedecin/FromData.jsx","pages/Mon medecin/index.jsx","components/patients at the doctor/index.jsx","components/formInput/Textarea.jsx","components/formInput/Prix.jsx","components/Certificat/AddElement.jsx","components/Certificat/editer.jsx","services/api/certificat/index.jsx","components/Certificat/index.jsx","components/Acte/index.jsx","services/api/acte/index.jsx","components/Examen/index.jsx","components/formInput/range.jsx","components/formInput/numberinput.jsx","components/medicament/index.jsx","services/api/list medicament/index.jsx","components/Ordonnance/index.jsx","components/Lettre/index.jsx","components/Antecedants/AntecedantsForm/index.jsx","pages/consultation/_partials/form.jsx","pages/consultation/index.jsx","components/Certificat/CertificatUpdate.jsx","pages/Certificat/index.jsx","pages/Mon rendez vous/index.jsx","pages/Trouver un m√©decin/index.jsx","services/api/Trouver un medecin/index.jsx","components/Acte/_parcial/AjoutActe.jsx","components/Acte/_parcial/UpdateAct.jsx","pages/ListeDact/index.jsx","pages/Liste Medicament/index.jsx","pages/dashboard/activityArea/index.jsx","components/notification/_partials/One notification.jsx","services/api/notification/index.jsx","components/notification/index.jsx","pages/dashboard/index.jsx","pages/log/Login/index.jsx","pages/log/Sing up/index.jsx","pages/log/index.jsx","pages/404/index.jsx","router/_partials/PublicRoute.js","router/index.jsx","app.jsx","theme/globalStyle.js","theme/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TbibyContext","createContext","initialUserValues","id","nom","prenom","isAuthenticated","telephone","email","cin","sexes","photo","fonctionnalite","idMedecin","TheContext","props","userValues","localStorage","getItem","JSON","parse","useState","user","setUser","Provider","value","cleanUser","clear","NavBreadcrumb","path","history","useHistory","patharray","split","shift","fontSize","separator","as","HiChevronRight","color","top","pos","map","url","onClick","push","charAt","toUpperCase","slice","ScrollArea","overflowY","height","minH","maxH","sx","bg","width","mode","borderRadius","SidebarLink","pathname","useLocation","children","linkto","icon","ArrowRight","avatar","rest","marginEnd","bgColor","display","px","py","rounded","cursor","_hover","className","fontWeight","transition","opacity","_groupHover","createIcon","viewBox","d","fill","Menu","useContext","pages","Patientmenu","Fragment","mb","base","page","w","md","bottom","left","p","link","timeStamps","Date","now","generatedToken","Md5","hashStr","navigator","userAgent","toString","axios","QueryClient","realAxios","create","baseURL","headers","UserAvatar","whiteSpace","size","src","name","lineHeight","mr","right","InputDate","startDate","setStartDate","useField","errorMessage","setValue","isValid","isSubmitted","label","required","type","dValue","note","SyncWithVariable","React","setIsTouched","htmlFor","selected","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","onBlur","dateFormat","date","toISOString","MyField","Placeholder","dtValue","isTouched","showError","useEffect","placeholder","onChange","e","target","aria-invalid","aria-required","aria-describedby","MyFieldPassword","showPassword","setshowPassword","View","ViewOff","FieldGroup","title","flexProps","direction","spacing","flexShrink","GestiondeCopmtePatient","gcInfo","age","parent","Code_APCI","validations","rule","isNumber","message","Adresse","Select2","data","colourStyles","control","styles","backgroundColor","option","isDisabled","isFocused","isSelected","isSearchable","changeValue","options","useDomaine","config","useQuery","get","useSousDomaine","params","useMutation","domaine_id","post","mt","AddDomaine","refetch","toast","useToast","onError","error","onSuccess","res","onClose","description","status","duration","isClosable","mutate","isLoading","useDisclosure","isOpen","onOpen","btnRef","useRef","myForm","useForm","values","mx","position","ref","colorScheme","placement","finalFocusRef","connect","onValidSubmit","noValidate","onSubmit","submit","multiple","isPattern","m","variant","borderColor","disabled","SousDomaine","mutateSousD","domaine","GestiondeCopmteMedecin","valueForm","setDomaine","sousDomaine","setSousDomaine","DomaineSelected","setDomaineSelected","param","SelectDomaine","adresse_physique","event","secretaire","ImageFile","setPictures","pictures","leftIcon","document","getElementById","click","files","onchange","style","Accountmanagement","file","showpictures","setShowPictures","gcRefetch","userValue","setItem","stringify","ch","Object","entries","method","setGcInfo","useGestionDeCompte","console","log","newUser","setSexes","useRemovePhoto","RMmutate","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","catch","err","lg","id_cms_privileges","selectSousDomaine","FormData","keys","index","append","_selected","date_naissance","isLength","val","deps","isEmail","isMinLength","align","useColorModeValue","Math","abs","getTime","getUTCFullYear","PrivateRoute","isAuth","otherProps","exact","to","TableActions","chercherFn","buttonText","buttonIcon","buttonhoverTesxt","inputhoverTesxt","inputValue","setInputValue","pt","justify","templateColumns","gap","aria-label","srOnly","pointerEvents","iconSpacing","TableContent","header","content","fntable","length","maxW","sm","textAlign","letterSpacing","overflowX","my","borderWidth","column","scope","row","indexcol","fn","fn2","fn3","TablePagination","total","prev_page_url","next_page_url","setPage","rel","Rappel","setTypeofresearch","useRelation","medecin_id","patient_id","AjouPatient","setMessage","columns","minW","HistoriqueActe","patient","setTotal","next","setNext","prev","setPrev","setContent","useHistoriqueListActe","usePatentInfo","InformationsSurLeMedecin","medecin","medecinInfo","setMedecinInfo","useMedecinInfo","href","Email","DescriptionMobile","useBreakpointValue","background","Antecedants","isMobile","patientInfo","setPatientInfo","useAntecedants","borderBottomWidth","float","Close","noOfLines","InputSunEditor","editerValue","setEditerValue","Patient","editorRef","paramsPatentInfo","cms_users_id","replaceAll","string","search","replace","join","print","mywindow","window","open","write","text","sexesM","sexesP","decodeMessage","close","focus","addEventListener","disable","lang","showToolbar","setOptions","buttonList","ShowCertifica","structure","patientId","cancelRef","MyForm","current","editor","setContents","motionPreset","leastDestructiveRef","isCentered","HistoriqueCetificat","useHistoriqueListCertificat","DetatilConsultation","consultation","setConsultation","detatil","setDetatil","useDetatilOfConsultation","detail","pb","Diagnostic","prix","minChildWidth","allowMultiple","flex","valueobject","borderBottom","finalevalue","HistoriqueConsultation","HistoriqueExamen","setHeader","useHistoriqueListExamen","HistoriqueLettre","useHistoriqueListLettre","HistoriqueOrdonnance","useHistoriqueListOrdonnance","TableauDynamique","useHistoriqueListConsultation","refetchConsultation","HistoriquePatient","PatientInfo","ListPatients","setPatientId","useRelationListe","Alert","hoverMassage","setIsOpen","fnTodo","Header","Body","btOK","btNon","ml","Task","isOpenRemove","setIsOpenRemove","onCloseRemove","cancelRefRemove","taskvalue","DeleteMutate","task","setTask","EnteredMutate","usertype","Entered","stopPropagation","remove","draggableId","provided","snapshot","innerRef","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","padding","margin","border","nomprenom","h","start","TimeElement","HoursValue","key","addtask","templateRows","droppableId","droppableProps","parseInt","Calendar","rowNumber","updateTask","Hours","addDays","days","setDate","getDate","headerDates","i","contenu","colSpan","onDragEnd","useUpdateReservation","date_reservation","useDeleteReservation","useSingup","password","AddNewPatient","addPatient","api_status","exists","elementExists","R_password","BookingForm","setNomPrenom","refetchTask","currentDateStart","listPatientDashboardAPIRefetch","end","listPatient","etat","setErrorMessage","setSearch","LodingaAddPatient","restOfConfirmation","selectvalue","G_Alert","submitcolor","TextInfo","GeneralPatientsInformation","Date_Naissance","ConfirmerUnRendezVous","refetchDashboard","refetchlist","state","SPTWRMutate","idR","Check","useValideReservation","CalendarDashboardMedecin","PatientEntrerIsLoading","DeleteIsLoading","isLoadingUpdate","useReservationMListe","setCurrentDateStart","setend","setListPatient","useListPatientDashboardAPI","daysView","setDaysView","ArrowLeft","element","destination","CalendarDashboardPatient","useListReservation","CalendarDashboard","calendarType","setCalendarType","BookingFormReserve","TaskReserve","TimeElementReserve","CalendarReservePara","CalendarReserve","useListReservationEnLigne","ReserverUnRendezVous","AjoutMedecin","MedecinInfo","MonMedecin","useRelationPM","PatientsAtTheDoctor","patientsWaiting","setCurrentPatient","currentPatient","isOpenWaiting","setIsOpenWaiting","onCloseWaiting","cancelRefWaiting","removePatient","rendez_vous_id","ToWaiting","ExternalLink","TextareaForm","Prix","min","AddElement","add","core","targetElement","listDiv","this","setSubmenu","call","self","querySelectorAll","forEach","btn","bind","initMenuTarget","util","createElement","innerHTML","node","addClass","textContent","insertNode","zeroWidthSpace","createTextNode","parentNode","insertBefore","nextSibling","submenuOff","EditerCertificat","undefined","plugins","dataCommand","buttonClass","dataDisplay","borderLeft","Certificat","removeComponentsForm","setTitle","showEditTitle","setShowEditTitle","selectValues","setSelectValues","useGetCertificat","boxShadow","Edit","changeValueOfEditer","Acte","selectValue","setSelectValue","code","setCode","designation","setDesignation","price","setPrice","useGetAllListActe","Examen","InputDateRange","endDate","setEndDate","dates","selectsRange","inline","MyNumberInput","valueString","AjoutMedicament","Ordonnance","useGetListeMedicamentSelect2","Lettre","useListeMedec","AntecedantsForm","Form","refetchPatientListe","setpatientsWaiting","setId","useCreateConsultation","splice","indexOf","setComponentsForm","componentsForm","addelement","filter","obj","defaultIndex","sort","a","b","Consultation","SPTWRIsLoading","useListOfThePatientInConsultation","CertificatUpdate","CertificatPage","setParams","useGetListCertificat","recherche","MonRendezvous","useConsultationPatient","TrouverUnMedecin","sousDomaineSelected","setSousDomaineSelected","useFindeDoctor","isLoadingFindeDoctor","refetchFindeDoctor","Search","AjoutActe","UpdateAct","ListeDact","useGetListActe","ListeMedicament","useListMedicament","ActivityArea","component","OneNotification","notif","removeElement","useRemoveNotification","seeNotifMutate","useSeeNotification","onMouseEnter","is_read","Notification","notification","setNotification","useNotification","removeAllNotificationMutate","useRemoveAllNotification","array","MobileMenuButton","useMobileMenuState","useBoolean","actions","off","Dashboard","useColorMode","colorMode","toggleColorMode","toggle","handlers","useSwipeable","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","overflow","marginStart","Login","titre","Singup","setFonctionnalite","alt","shadow","Error404","PublicRoute","MainRouter","App","queryClient","QueryClientProvider","client","globalStyle","theme","extendTheme","initialColorMode","useSystemColorMode","overwrite","global","customTheme","startApp","ReactDOM","render","StrictMode","cordova"],"mappings":"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","file":"static/js/main.4eebba52.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const TbibyContext = createContext();\r\n\r\nconst initialUserValues = {\r\n  id: null,\r\n  nom: null,\r\n  prenom: null,\r\n  isAuthenticated: false,\r\n  telephone: null,\r\n  email: null,\r\n  cin: null,\r\n  sexes: null,\r\n  photo: null,\r\n  fonctionnalite: \"\",\r\n  idMedecin: null,\r\n};\r\n\r\nconst TheContext = (props) => {\r\n  const userValues =\r\n    (localStorage.getItem(\"user\") &&\r\n      JSON.parse(localStorage.getItem(\"user\"))) ||\r\n    initialUserValues;\r\n\r\n  const [user, setUser] = useState(userValues);\r\n  const cleanUser = () => {\r\n    localStorage.clear();\r\n    setUser({});\r\n  };\r\n  return (\r\n    <TbibyContext.Provider value={{ user, setUser, cleanUser }} {...props} />\r\n  );\r\n};\r\n\r\nexport default TheContext;\r\n","import {\r\n  Box,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbProps,\r\n} from \"@chakra-ui/react\";\r\nimport { HiChevronRight } from \"react-icons/hi\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const NavBreadcrumb = ({ path }, props: BreadcrumbProps) => {\r\n  let history = useHistory();\r\n  let patharray = path.split(\"/\");\r\n  patharray.shift();\r\n\r\n  return (\r\n    <Breadcrumb\r\n      fontSize=\"lg\"\r\n      {...props}\r\n      separator={\r\n        <Box\r\n          as={HiChevronRight}\r\n          color=\"gray.400\"\r\n          fontSize=\"md\"\r\n          top=\"2px\"\r\n          pos=\"relative\"\r\n        />\r\n      }\r\n    >\r\n      {patharray.map((url) => (\r\n        <BreadcrumbItem color=\"inherit\" key={url}>\r\n          <BreadcrumbLink\r\n            onClick={() => {\r\n              url != \"dashboard\"\r\n                ? history.push(url)\r\n                : history.push(\"/dashboard\");\r\n            }}\r\n          >\r\n            {url.charAt(0).toUpperCase() + url.slice(1)}\r\n          </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n      ))}\r\n    </Breadcrumb>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Box, BoxProps, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst ScrollArea = (props: BoxProps) => (\r\n  <Box\r\n    overflowY=\"auto\"\r\n    height=\"80vh\"\r\n    minH=\"px\"\r\n    maxH=\"full\"\r\n    {...props}\r\n    sx={{\r\n      \"&::-webkit-scrollbar-track\": {\r\n        bg: \"transparent\",\r\n      },\r\n      \"&::-webkit-scrollbar\": {\r\n        width: \"8px\",\r\n      },\r\n      \"&::-webkit-scrollbar-thumb\": {\r\n        bg: mode(\"green.500\", \"gray.700\"),\r\n        borderRadius: \"20px\",\r\n      },\r\n    }}\r\n  />\r\n);\r\n\r\nexport default ScrollArea;\r\n","import {\r\n  Box,\r\n  createIcon,\r\n  HStack,\r\n  Text,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport {} from \"react-router-dom\";\r\n\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const SidebarLink = (props) => {\r\n  const { pathname } = useLocation();\r\n  let history = useHistory();\r\n\r\n  const { children, linkto, icon = <ArrowRight />, avatar, ...rest } = props;\r\n  return (\r\n    <Box\r\n      as=\"a\"\r\n      marginEnd=\"2\"\r\n      fontSize=\"sm\"\r\n      color=\"white\"\r\n      bgColor={\r\n        pathname == \"/dashboard/\" + linkto ? mode(\"green.300\", \"gray.600\") : ``\r\n      }\r\n      onClick={() => history.push(\"/dashboard/\" + linkto)}\r\n      display=\"block\"\r\n      px=\"3\"\r\n      py=\"2\"\r\n      rounded=\"md\"\r\n      cursor=\"pointer\"\r\n      _hover={{ color: \"white\", bg: mode(\"green.300\", \"gray.600\") }}\r\n      className=\"group\"\r\n      fontWeight=\"medium\"\r\n      transition=\"background .1s ease-out\"\r\n      {...rest}\r\n    >\r\n      <HStack fontSize=\"md\">\r\n        <Box opacity={avatar ? 1 : 0.5} _groupHover={{ opacity: 1 }}>\r\n          {avatar || icon}\r\n        </Box>\r\n        <Text>{children}</Text>\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ArrowRight = createIcon({\r\n  viewBox: \"0 0 16 16\",\r\n  path: (\r\n    <path\r\n      d=\"M3.38974 12.6633L9.42974 12.6633C9.86308 12.6633 10.2697 12.4567 10.5164 12.1033L13.1497 8.39C13.3164 8.15667 13.3164 7.85 13.1497 7.61667L10.5097 3.89667C10.2697 3.54334 9.86308 3.33667 9.42974 3.33667L3.38974 3.33667C2.84974 3.33667 2.53641 3.95667 2.84974 4.39667L5.42974 8.00334L2.84974 11.61C2.53641 12.05 2.84974 12.6633 3.38974 12.6633V12.6633Z\"\r\n      fill=\"currentcolor\"\r\n    />\r\n  ),\r\n});\r\n","import React, { Components, useContext } from \"react\";\r\nimport { Stack, Box } from \"@chakra-ui/react\";\r\nimport { SidebarLink } from \"./../SidebarLink\";\r\nimport {\r\n  BsBoxArrowLeft,\r\n  BsSearch,\r\n  BsFillCalendarFill,\r\n  BsFillPersonLinesFill,\r\n  BsBookmarks,\r\n  BsAlarm,\r\n  BsFillPeopleFill,\r\n} from \"react-icons/bs\";\r\n\r\nimport {\r\n  BiClipboard,\r\n  BiDonateHeart,\r\n  BiLayer,\r\n  BiCalendarAlt,\r\n  BiPlusMedical,\r\n} from \"react-icons/bi\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nconst Menu = () => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  let history = useHistory();\r\n  let logout = () => {\r\n    cleanUser();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  let pages = [];\r\n  let Patientmenu = [\r\n    { url: \"Dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n    { url: \"Trouver un m√©decin\", icon: <BsSearch fontSize=\"20px\" /> },\r\n    { url: \"Mes rendez vous\", icon: <BsFillCalendarFill fontSize=\"20px\" /> },\r\n    { url: \"Mes m√©decins\", icon: <BsFillPersonLinesFill fontSize=\"20px\" /> },\r\n  ];\r\n  if (user.fonctionnalite == \"patient\") {\r\n    pages = Patientmenu;\r\n  } else if (user.fonctionnalite == \"medecin\") {\r\n    pages = [\r\n      { url: \"Dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n\r\n      { url: \"Mes patients\", icon: <BsFillPeopleFill fontSize=\"20px\" /> },\r\n      { url: \"Consultation\", icon: <BiDonateHeart fontSize=\"20px\" /> },\r\n      { url: \"Mod√®le de certificat\", icon: <BiClipboard fontSize=\"20px\" /> },\r\n      { url: \"Liste d'actes\", icon: <BiLayer fontSize=\"20px\" /> },\r\n      { url: \"Liste medicament\", icon: <BiPlusMedical fontSize=\"20px\" /> },\r\n    ];\r\n  } else if (user.fonctionnalite == \"secretaire\") {\r\n    pages = [\r\n      { url: \"dashboard\", icon: <BiCalendarAlt fontSize=\"20px\" /> },\r\n      { url: \"Mod√®le de certificat\", icon: <BiClipboard fontSize=\"20px\" /> },\r\n      { url: \"Liste d'actes\", icon: <BiLayer fontSize=\"20px\" /> },\r\n      { url: \"Liste medicament\", icon: <BiPlusMedical fontSize=\"20px\" /> },\r\n      { url: \"Mes rendez vous\", icon: <BsFillCalendarFill fontSize=\"20px\" /> },\r\n      { url: \"Mes m√©decins\", icon: <BsFillPersonLinesFill fontSize=\"20px\" /> },\r\n      { url: \"Trouver un m√©decin\", icon: <BsSearch fontSize=\"20px\" /> },\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box mb={{ base: \"70px\" }}>\r\n        {pages.map((page) => (\r\n          <SidebarLink\r\n            key={page.url}\r\n            linkto={page.url == \"Dashboard\" ? `` : page.url}\r\n            icon={page.icon}\r\n          >\r\n            {page.url}\r\n          </SidebarLink>\r\n        ))}\r\n      </Box>\r\n      <Box\r\n        pos=\"fixed\"\r\n        w={{ base: \"62%\", md: \"50%\" }}\r\n        bottom={{ base: \"20px\", md: \"24px\" }}\r\n        left={{ base: \"72px\", md: \"95px\" }}\r\n      >\r\n        <Stack bgColor=\"red.300\" rounded={8}>\r\n          <SidebarLink\r\n            onClick={logout}\r\n            icon={<BsBoxArrowLeft />}\r\n            fontSize=\"xlx\"\r\n            p={4}\r\n          >\r\n            Se d√©connecter\r\n          </SidebarLink>\r\n        </Stack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { default as realAxios } from \"axios\";\r\nimport { Md5 } from \"ts-md5/dist/md5\";\r\nimport { QueryClient } from \"react-query\";\r\n\r\nexport const link = \"http://192.168.137.1:8000\";\r\nexport const userImage = \"/vendor/crudbooster/avatar.jpg\";\r\nconst SECRET_KEY = \"pfetbiby2020\";\r\nconst timeStamps = Date.now();\r\nconst generatedToken = Md5.hashStr(\r\n  SECRET_KEY + timeStamps + navigator.userAgent\r\n).toString();\r\nconst queryClient = new QueryClient();\r\nconst axios = realAxios.create({\r\n  baseURL: link + \"/api/\",\r\n  headers: {\r\n    // \"Content-Type\": \"application/json\",\r\n    \"X-Authorization-Time\": timeStamps,\r\n    \"X-Authorization-Token\": generatedToken,\r\n  },\r\n});\r\nexport default axios;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  HStack,\r\n  Text,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BsGear } from \"react-icons/bs\";\r\nimport { link, userImage } from \"./../../../services/api\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst UserAvatar = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  let history = useHistory();\r\n  const image = user.photo;\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        as=\"div\"\r\n        p=\"3\"\r\n        display=\"block\"\r\n        transition=\"background 0.1s\"\r\n        rounded=\"xl\"\r\n        _hover={{ bg: \"whiteAlpha.200\" }}\r\n        whiteSpace=\"nowrap\"\r\n        onClick={() => {\r\n          history.push(\"/dashboard/gestion de compte\");\r\n        }}\r\n      >\r\n        <HStack>\r\n          <Avatar\r\n            size=\"md\"\r\n            src={!!user.photo ? `${link}${user.photo}` : ``}\r\n            name={user.nom + \" \" + user.prenom}\r\n          />\r\n          <Box lineHeight=\"1\">\r\n            <Text fontWeight=\"semibold\">{user.nom + \" \" + user.prenom}</Text>\r\n          </Box>\r\n          <Box size=\"lg\" mr={8} right=\"0px\">\r\n            <BsGear />\r\n          </Box>\r\n        </HStack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserAvatar;\r\n","import React, { useEffect, useState, useRef, HTMLAttributes } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useField } from \"@formiz/core\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./date-picker.css\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const InputDate = (props) => {\r\n  const makerange = (start, end) => {\r\n    var ans = [];\r\n    for (let i = start; i <= end; i++) {\r\n      ans.push(i);\r\n    }\r\n    return ans;\r\n  };\r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n\r\n  const { label, type, required, note, dValue, SyncWithVariable } = props;\r\n  const [isTouched, setIsTouched] = React.useState(true);\r\n  // const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <React.Fragment>\r\n      <FormControl>\r\n        <FormLabel htmlFor={id}>\r\n          {label}\r\n          {!!required && \" *\"}\r\n        </FormLabel>\r\n\r\n        <DatePicker\r\n          selected={startDate}\r\n          peekNextMonth\r\n          showMonthDropdown\r\n          showYearDropdown\r\n          dropdownMode=\"select\"\r\n          id={id}\r\n          onBlur={() => setIsTouched(true)}\r\n          dateFormat=\"yyyy-MM-dd\"\r\n          selected={startDate}\r\n          value={value || dValue}\r\n          onChange={(date) => {\r\n            !!SyncWithVariable && SyncWithVariable(date);\r\n            setValue(date.toISOString().slice(0, 10), setStartDate(date));\r\n          }}\r\n        />\r\n      </FormControl>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const MyField = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        id={id}\r\n        type={type || \"text\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\n\r\nimport { ViewOffIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Input,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nexport const MyFieldPassword = (props) => {\r\n  const [showPassword, setshowPassword] = useState(false);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <InputGroup>\r\n        <Input\r\n          id={id}\r\n          type={showPassword ? `text` : `password`}\r\n          value={value ?? \"\"}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onBlur={() => setIsTouched(true)}\r\n          aria-invalid={showError}\r\n          aria-required={!!required}\r\n          aria-describedby={showError ? `${id}-error` : null}\r\n        />\r\n        <InputRightElement>\r\n          <Button\r\n            bgColor=\"transparent\"\r\n            size=\"sm\"\r\n            onClick={() => setshowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n          </Button>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { Box, Heading, Stack, StackProps } from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\n\r\nexport const FieldGroup = (props) => {\r\n  const { title, children, ...flexProps } = props;\r\n  return (\r\n    <Stack\r\n      direction={{ base: \"column\", md: \"row\" }}\r\n      spacing=\"6\"\r\n      py=\"4\"\r\n      {...flexProps}\r\n    >\r\n      <Box\r\n      // w={{ base: \"100%\", md: \"200px\", lg: \"200px\" }}\r\n      // minW={{ base: \"3xs\", md: \"10px\", lg: \"xs\" }}\r\n      >\r\n        {title && (\r\n          <Heading as=\"h2\" fontWeight=\"semibold\" fontSize=\"lg\" flexShrink={0}>\r\n            {title}\r\n          </Heading>\r\n        )}\r\n      </Box>\r\n      {children}\r\n    </Stack>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { isNumber, isPattern } from \"@formiz/validations\";\r\nimport {\r\n  FormControl,\r\n  Button,\r\n  useColorModeValue as mode,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { FieldGroup } from \"./../../../components/FieldGroup\";\r\n\r\nconst GestiondeCopmtePatient = (props) => {\r\n  const { gcInfo, age } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <FieldGroup title=\"information sp√©cifique\">\r\n        <VStack width=\"full\" spacing=\"6\">\r\n          {age() > 18 ? (\r\n            ``\r\n          ) : (\r\n            <MyField\r\n              name=\"parent\"\r\n              label=\"Repr√©sentant l√©gal\"\r\n              Placeholder={gcInfo.parent}\r\n            />\r\n          )}\r\n\r\n          <MyField\r\n            name=\"Code_APCI\"\r\n            label=\"Code APCI\"\r\n            Placeholder={gcInfo.Code_APCI}\r\n            validations={[\r\n              {\r\n                rule: isNumber(),\r\n                message: \"Le code-APCI ne contient que des chiffres\",\r\n              },\r\n            ]}\r\n          />\r\n\r\n          <MyField\r\n            name=\"Adresse\"\r\n            label=\"Adresse\"\r\n            dtValue={gcInfo.Adresse}\r\n            Placeholder={gcInfo.Adresse}\r\n          />\r\n        </VStack>\r\n      </FieldGroup>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GestiondeCopmtePatient;\r\n","import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormHelperText,\r\n  FormLabel,\r\n} from \"@chakra-ui/form-control\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Text } from \"@chakra-ui/layout\";\r\n\r\nexport const Select2 = (props) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n  const { data, name, label, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n\r\n  const onClick = (e) => {\r\n    setClickCount(clickCount + 1);\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n  const changeValue = (e) => {\r\n    setValue(e);\r\n  };\r\n  const colourStyles = {\r\n    control: (styles) => ({ ...styles, backgroundColor: \"white\" }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isFocused ? mode(\"green\", \"teal\") : \"white\",\r\n        color: !isFocused ? \"#000\" : \"#FFF\",\r\n        cursor: isDisabled ? \"not-allowed\" : \"default\",\r\n      };\r\n    },\r\n  };\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>{label}</FormLabel>\r\n\r\n      <Select\r\n        id={id}\r\n        isSearchable\r\n        value={value ?? \"\"}\r\n        name={name}\r\n        placeholder={value}\r\n        onChange={(e) => changeValue(e)}\r\n        options={data}\r\n        onBlur={() => setIsTouched(true)}\r\n        styles={colourStyles}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useDomaine = ({ ...config } = {}) => {\r\n  return useQuery(\"domaine\", () => axios.get(\"dom\"), config);\r\n};\r\nexport const useSousDomaine = ({ params, ...config } = {}) => {\r\n  return useMutation(\r\n    ({ domaine_id }) => axios.post(\"sousdom\", { domaine_id }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useAddDomaine = (config) => {\r\n  return useMutation(({ nom }) => axios.post(\"ad\", { nom }), config);\r\n};\r\nexport const useAddSousDomaine = (config) => {\r\n  return useMutation(\r\n    ({ nom, domaine_id }) => axios.post(\"asd\", { nom, domaine_id }),\r\n    config\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const MyField = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl mt={5}>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        id={id}\r\n        type={type || \"text\"}\r\n        value={value ?? \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { MyField } from \"./../../../../MyField\";\r\nimport { Formiz } from \"@formiz/core\";\r\nimport { useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { isPattern } from \"@formiz/validations\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  useToast,\r\n  DrawerCloseButton,\r\n  DrawerFooter,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { useAddDomaine } from \"../../../../services/api/domaine\";\r\n\r\nconst AddDomaine = (props) => {\r\n  const { refetch } = props;\r\n  const toast = useToast();\r\n\r\n  const { mutate, isLoading } = useAddDomaine({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      refetch();\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const SubmitAPI = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        mx={2}\r\n        position=\"relative\"\r\n        top=\"31px\"\r\n        // bg={mode(\"blue.400\", \"blue.800\")}\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"teal\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Create your account</DrawerHeader>\r\n            <DrawerBody>\r\n              <Formiz connect={myForm} onValidSubmit={SubmitAPI}>\r\n                <form\r\n                  noValidate\r\n                  onSubmit={myForm.submit}\r\n                  multiple\r\n                  // encType=\"multipart/form-data\"\r\n                >\r\n                  <MyField\r\n                    name=\"nom\"\r\n                    label=\"Domaine\"\r\n                    required=\"Il est requis de compl√©ter le champ correspondant au domaine\"\r\n                    validations={[\r\n                      {\r\n                        rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                        message: \"Le nom ne contient que des lettres\",\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Box m={2}>\r\n                    <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                      Annuler\r\n                    </Button>\r\n                    <Button\r\n                      w=\"40%\"\r\n                      type=\"submit\"\r\n                      borderColor=\"green.500\"\r\n                      disabled={!myForm.isValid}\r\n                    >\r\n                      Submit\r\n                      {!myForm.isValid ? `` : `üëå`}\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              </Formiz>\r\n            </DrawerBody>\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddDomaine;\r\n","import React, { useRef } from \"react\";\r\nimport { MyField } from \"./../../../../MyField\";\r\nimport { Formiz } from \"@formiz/core\";\r\nimport { useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { isPattern } from \"@formiz/validations\";\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  useToast,\r\n  DrawerCloseButton,\r\n  DrawerFooter,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { useAddSousDomaine } from \"../../../../services/api/domaine\";\r\nconst SousDomaine = (props) => {\r\n  const { mutateSousD, domaine } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddSousDomaine({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      mutateSousD({ domaine_id: domaine });\r\n\r\n      onClose();\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const SubmitAPI = (values) => {\r\n    values.domaine_id = domaine;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        mx={2}\r\n        position=\"relative\"\r\n        top=\"31px\"\r\n        // bg={mode(\"blue.400\", \"blue.800\")}\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"teal\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Ajoutez votre Sousdomaine</DrawerHeader>\r\n            <DrawerBody>\r\n              <Formiz connect={myForm} onValidSubmit={SubmitAPI}>\r\n                <form\r\n                  noValidate\r\n                  onSubmit={myForm.submit}\r\n                  multiple\r\n                  // encType=\"multipart/form-data\"\r\n                >\r\n                  <MyField\r\n                    name=\"nom\"\r\n                    label=\"Sous Domaine\"\r\n                    required=\"Il est requis de compl√©ter le champ correspondant au domaine\"\r\n                    validations={[\r\n                      {\r\n                        rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                        message: \"Le nom ne contient que des lettres\",\r\n                      },\r\n                    ]}\r\n                  />\r\n                  <Box m={2}>\r\n                    <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                      Annuler\r\n                    </Button>\r\n                    <Button\r\n                      w=\"40%\"\r\n                      type=\"submit\"\r\n                      borderColor=\"green.500\"\r\n                      disabled={!myForm.isValid}\r\n                    >\r\n                      Submit\r\n                      {!myForm.isValid ? `` : `üëå`}\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              </Formiz>\r\n            </DrawerBody>\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default SousDomaine;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  useToast,\r\n  useColorModeValue as mode,\r\n  VStack,\r\n  Flex,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { Select2 } from \"../../../components/formInput/select\";\r\nimport { isNumber, isPattern } from \"@formiz/validations\";\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { useDomaine, useSousDomaine } from \"./../../../services/api/domaine\";\r\nimport { FieldGroup } from \"./../../../components/FieldGroup\";\r\nimport AddDomaine from \"./_partials/Domaine\";\r\nimport SousDomaine from \"./_partials/SousDomaine\";\r\n\r\nconst GestiondeCopmteMedecin = (props) => {\r\n  const { gcInfo, valueForm } = props;\r\n\r\n  const [domaine, setDomaine] = useState([]);\r\n  const [sousDomaine, setSousDomaine] = useState([]);\r\n  const [DomaineSelected, setDomaineSelected] = useState(0);\r\n\r\n  const toast = useToast();\r\n  const { isLoading, refetch } = useDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setDomaine(res.data);\r\n    },\r\n  });\r\n  const param = { id: valueForm.SelectDomaine };\r\n  const { isLoading: isLoadingSousD, mutate: mutateSousD } = useSousDomaine({\r\n    param,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSousDomaine(res.data);\r\n    },\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <FieldGroup title=\"Information sp√©cifique\">\r\n        <VStack width=\"full\" spacing=\"6\">\r\n          <MyField\r\n            name=\"adresse_physique\"\r\n            label=\"Adresse\"\r\n            Placeholder={gcInfo.adresse_physique}\r\n\r\n            // validations={[\r\n            //   {\r\n            //     rule: isPattern(\"^[a-zAZ ]*$\"),\r\n            //     message: \"L'adresse physique ne contient que des lettres\",\r\n            //   },\r\n            // ]}\r\n          />\r\n\r\n          <Flex w=\"100%\">\r\n            <Select2\r\n              data={domaine}\r\n              label=\"Domaine\"\r\n              onChange={(event) => {\r\n                setDomaineSelected(event.value);\r\n                setSousDomaine([]);\r\n                mutateSousD({ domaine_id: event.value });\r\n              }}\r\n              name=\"SelectDomaine\"\r\n            />\r\n            <Box>\r\n              <AddDomaine refetch={refetch} />\r\n            </Box>\r\n          </Flex>\r\n          <Flex w=\"100%\">\r\n            <Select2\r\n              onChange={() => refetch()}\r\n              data={sousDomaine}\r\n              label=\"Sous Domaine\"\r\n              name=\"selectSousDomaine\"\r\n            />\r\n            <Box display={DomaineSelected != 0 ? `` : `none`}>\r\n              <SousDomaine\r\n                mutateSousD={mutateSousD}\r\n                domaine={DomaineSelected}\r\n              />\r\n            </Box>\r\n          </Flex>\r\n          <MyField\r\n            name=\"secretaire\"\r\n            label=\"Secr√©taire\"\r\n            note=\"Entrez le cin ou le num√©ro de t√©l√©phone ou l'email de la secr√©taire. Pour supprimer vous devez √©crire 'supprimer'\"\r\n            Placeholder={gcInfo.secretaire}\r\n          />\r\n        </VStack>\r\n      </FieldGroup>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GestiondeCopmteMedecin;\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { HiCloudUpload } from \"react-icons/hi\";\r\nexport const ImageFile = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted } = useField(props);\r\n  const {\r\n    label,\r\n    type,\r\n    required,\r\n    note,\r\n    Placeholder,\r\n    pictures,\r\n    setPictures,\r\n  } = props;\r\n  const onchange = (e) => {\r\n    setPictures(e.target.files[0]);\r\n  };\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        <Button\r\n          leftIcon={<HiCloudUpload />}\r\n          onClick={() => {\r\n            document.getElementById(id).click();\r\n          }}\r\n        >\r\n          Changer la photo {!!required && \" *\"}\r\n        </Button>\r\n      </FormLabel>\r\n      <input\r\n        id={id}\r\n        type=\"file\"\r\n        placeholder={Placeholder || label}\r\n        onChange={(e) => onchange(e)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  isNumber,\r\n  isLength,\r\n  isEmail,\r\n  isPattern,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport {\r\n  Box,\r\n  Radio,\r\n  Stack,\r\n  RadioGroup,\r\n  FormControl,\r\n  Button,\r\n  Spinner,\r\n  Center,\r\n  VStack,\r\n  Avatar,\r\n  HStack,\r\n  useColorModeValue,\r\n  Text,\r\n  Divider,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { InputDate } from \"./../../components/formInput/date\";\r\n\r\nimport { MyField } from \"./../../components/formInput\";\r\nimport { MyFieldPassword } from \"./../../components/formInput/password\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport GestiondeCopmtePatient from \"./gestion compte patient\";\r\nimport GestiondeCopmteMedecin from \"./gestion compte medecin\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useRemovePhoto,\r\n  useUpdateComptePatient,\r\n} from \"./../../services/api/Update Compte\";\r\n//import { useUpdateCompteMedecin } from \"./../../services/api/Update Compte/update_compte_medecin\";\r\nimport { ImageFile } from \"./../../components/formInput/image\";\r\nimport { FieldGroup } from \"./../../components/FieldGroup\";\r\nimport { useGestionDeCompte } from \"./../../services/api/gestion de compte\";\r\nimport { link } from \"./../../services/api\";\r\n\r\nconst Accountmanagement = () => {\r\n  const [pictures, setPictures] = useState(null);\r\n  const [showpictures, setShowPictures] = useState(null);\r\n  const { user, setUser } = useContext(TbibyContext);\r\n\r\n  const { mutate, isLoading } = useUpdateComptePatient({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      gcRefetch();\r\n      let userValue = { ...user, ...res.data };\r\n      localStorage.setItem(\"user\", JSON.stringify(userValue));\r\n      setUser(userValue);\r\n      let ch = \"\";\r\n      for (const [key, value] of Object.entries(res.data)) {\r\n        ch = ch + `|  ${value} |  `;\r\n      }\r\n      if (ch != \"\") {\r\n        toast({\r\n          title: \"Erreur sous la forme\",\r\n          description: ch,\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"Mise √† jour r√©ussie\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  const [gcInfo, setGcInfo] = useState({});\r\n  const toast = useToast();\r\n  const params = { id: user.id };\r\n  const { isLoading: gcLoding, refetch: gcRefetch } = useGestionDeCompte({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      console.log(res);\r\n      console.log(\"user\");\r\n      console.log(user);\r\n      let newUser = { ...res.data };\r\n      newUser.isAuthenticated = true;\r\n      newUser.fonctionnalite = user.fonctionnalite;\r\n      setUser(newUser);\r\n      setGcInfo(res.data);\r\n      setSexes(newUser.sexes);\r\n    },\r\n  });\r\n  const { mutate: RMmutate, isLoading: RMisLoading } = useRemovePhoto({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      gcRefetch();\r\n    },\r\n  });\r\n  const [sexes, setSexes] = React.useState();\r\n  const handleSubmit = (values) => {\r\n    values.id = user.id;\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = user.fonctionnalite;\r\n    values.photo = pictures;\r\n    if (!!values.SelectDomaine) {\r\n      values.SelectDomaine = values.SelectDomaine.value;\r\n    }\r\n    if (!!values.selectSousDomaine) {\r\n      values.selectSousDomaine = values.selectSousDomaine.value;\r\n    }\r\n    const data = new FormData();\r\n    Object.keys(values).map((value, index) => {\r\n      data.append(value, values[value]);\r\n    });\r\n    mutate(data);\r\n  };\r\n\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const age = () => {\r\n    return Math.abs(\r\n      new Date(\r\n        Date.now() -\r\n          new Date(values.date_naissance || gcInfo.date_naissance).getTime()\r\n      ).getUTCFullYear() - 1970\r\n    );\r\n  };\r\n  const getBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = (error) => reject(error);\r\n    });\r\n  };\r\n  getBase64(pictures)\r\n    .then((res) => setShowPictures(res))\r\n    .catch((err) => console.log(err));\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        px={{ base: \"4\", md: \"3\", lg: \"10\" }}\r\n        py=\"16\"\r\n        // maxWidth=\"xl\"\r\n        mx=\"auto\"\r\n        display={isLoading ? `none` : ``}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form\r\n            noValidate\r\n            onSubmit={myForm.submit}\r\n            multiple\r\n            // encType=\"multipart/form-data\"\r\n          >\r\n            <FieldGroup title=\"informations g√©n√©rales\">\r\n              <VStack width=\"full\" spacing=\"6\">\r\n                <MyField\r\n                  name=\"nom\"\r\n                  label=\"Nom\"\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au nom\"\r\n                  validations={[\r\n                    {\r\n                      rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                      message: \"Le nom ne contient que des lettres\",\r\n                    },\r\n                  ]}\r\n                  Placeholder={gcInfo.nom}\r\n                />\r\n\r\n                <MyField\r\n                  name=\"prenom\"\r\n                  label=\"Pr√©nom\"\r\n                  Placeholder={gcInfo.prenom}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au prenom\"\r\n                  validations={[\r\n                    {\r\n                      rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                      message: \"Le prenom ne contient que des lettres\",\r\n                    },\r\n                  ]}\r\n                />\r\n\r\n                <FormControl>\r\n                  <Center>\r\n                    <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                      <Stack direction=\"row\" size=\"lg\">\r\n                        <Radio value=\"homme\" _selected py={3} px={10}>\r\n                          Homme üë®‚Äçü¶∞\r\n                        </Radio>\r\n                        <Radio value=\"femme\" py={3} px={10}>\r\n                          Femme üë©‚Äçü¶∞\r\n                        </Radio>\r\n                      </Stack>\r\n                    </RadioGroup>\r\n                  </Center>\r\n                </FormControl>\r\n\r\n                <InputDate\r\n                  name=\"date_naissance\"\r\n                  label=\"Date de naissance\"\r\n                  dValue={gcInfo.date_naissance}\r\n                  //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n                />\r\n\r\n                <MyField\r\n                  name=\"cin\"\r\n                  label=\"C.I.N\"\r\n                  Placeholder={gcInfo.cin}\r\n                  validations={[\r\n                    {\r\n                      rule: isNumber(),\r\n                      message:\r\n                        \"La carte d'identit√© ne contient que des chiffres\",\r\n                    },\r\n                    {\r\n                      rule: isLength(8),\r\n                      message:\r\n                        \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                    },\r\n                    {\r\n                      rule: (val) =>\r\n                        !!val || !!values.email || !!values.telephone,\r\n                      message:\r\n                        \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                      deps: [values.email, values.telephone],\r\n                    },\r\n                  ]}\r\n                />\r\n                <MyField\r\n                  name=\"telephone\"\r\n                  label=\"T√©l√©phone\"\r\n                  Placeholder={gcInfo.telephone}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au telephone\"\r\n                  validations={[\r\n                    {\r\n                      rule: isNumber(),\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                    },\r\n                    {\r\n                      rule: isLength(8),\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                    },\r\n                    {\r\n                      rule: (val) => !!val || !!values.cin || !!values.email,\r\n                      message:\r\n                        \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                      deps: [values.cin, values.email],\r\n                    },\r\n                  ]}\r\n                />\r\n                <MyField\r\n                  name=\"email\"\r\n                  label=\"E-mail\"\r\n                  Placeholder={gcInfo.email}\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au mail\"\r\n                  validations={[\r\n                    {\r\n                      rule: isEmail(),\r\n                      message:\r\n                        \"Veuillez v√©rifier le format de l'E-mail(doit contenir @ et .)\",\r\n                    },\r\n                    {\r\n                      rule: (val) =>\r\n                        !!val || !!values.cin || !!values.telephone,\r\n                      message: 'Le champ E-mail doit contenir \"@\" et \".\"',\r\n                      deps: [values.cin, values.telephone],\r\n                    },\r\n                  ]}\r\n                />\r\n\r\n                <MyFieldPassword\r\n                  name=\"password\"\r\n                  label=\"Mot de passe\"\r\n                  // required=\"Il est requis de compl√©ter le champ correspondant au mot-de-passe\"\r\n                  type=\"password\"\r\n                  validations={[\r\n                    {\r\n                      rule: isMinLength(6),\r\n                      message:\r\n                        \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                    },\r\n                  ]}\r\n                />\r\n              </VStack>\r\n            </FieldGroup>\r\n            <Divider />\r\n            <FieldGroup title=\"Photo de Profil\">\r\n              <Stack direction=\"row\" spacing=\"10\" align=\"center\" width=\"full\">\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={gcInfo.nom + \" \" + gcInfo.prenom}\r\n                  src={\r\n                    !!showpictures\r\n                      ? showpictures\r\n                      : gcInfo.photo && `${link}${gcInfo.photo}`\r\n                  }\r\n                />\r\n                <Box>\r\n                  <HStack spacing=\"5\">\r\n                    <ImageFile\r\n                      pictures={pictures}\r\n                      setPictures={setPictures}\r\n                      name=\"photo\"\r\n                      label=\"photo\"\r\n                    />\r\n                    <Button\r\n                      display={\r\n                        !!gcInfo.photo || !!showpictures ? `block` : `none`\r\n                      }\r\n                      variant=\"ghost\"\r\n                      colorScheme=\"red\"\r\n                      onClick={() => {\r\n                        (!!showpictures &&\r\n                          setShowPictures(null, setPictures(null))) ||\r\n                          RMmutate({ id: user.id });\r\n                        gcRefetch();\r\n                      }}\r\n                    >\r\n                      Effacer\r\n                    </Button>\r\n                  </HStack>\r\n                  <Text\r\n                    fontSize=\"sm\"\r\n                    mt=\"3\"\r\n                    color={useColorModeValue(\"gray.500\", \"whiteAlpha.600\")}\r\n                  >\r\n                    .jpg, .gif, or .png.\r\n                  </Text>\r\n                </Box>\r\n              </Stack>\r\n            </FieldGroup>\r\n            <Divider />\r\n\r\n            {user.fonctionnalite == \"patient\" ? (\r\n              <GestiondeCopmtePatient gcInfo={gcInfo} age={age} />\r\n            ) : (\r\n              ``\r\n            )}\r\n            {user.fonctionnalite == \"medecin\" ? (\r\n              <GestiondeCopmteMedecin valueForm={values} gcInfo={gcInfo} />\r\n            ) : (\r\n              ``\r\n            )}\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Sauvegarder\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Accountmanagement;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"..\";\r\nimport { link } from \"./..\";\r\nconst headers = {\r\n  // \"Content-type\": \"multipart/form-data\",\r\n};\r\nexport const useUpdateComptePatient = (config) => {\r\n  return useMutation((params) => {\r\n    return axios({\r\n      method: \"POST\",\r\n      url: link + \"/api/ucp\",\r\n      data: params,\r\n      // headers: { ...params.photo.getHeaders() },\r\n    });\r\n  }, config);\r\n};\r\nexport const useRemovePhoto = (params, ...config) => {\r\n  return useMutation((params) => axios.post(\"rmpp\", params), config);\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useGestionDeCompte = ({ params, ...config } = {}) => {\r\n  return useQuery(\"gcf\", () => axios.get(\"gcf\", { params }), config);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { TbibyContext } from \"./../context/index\";\r\n\r\nexport const PrivateRoute = ({ isAuth, ...otherProps }) => {\r\n  const { user } = useContext(TbibyContext);\r\n  if (user.isAuthenticated) {\r\n    if (isAuth) {\r\n      return <Route exact {...otherProps} />;\r\n    } else {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/dashboard\",\r\n          }}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/login\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Box,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nexport const TableActions = (props) => {\r\n  const {\r\n    chercherFn,\r\n    buttonText,\r\n    buttonIcon,\r\n    buttonhoverTesxt,\r\n    inputhoverTesxt,\r\n  } = props;\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  return (\r\n    <Stack\r\n      pt={10}\r\n      spacing=\"4\"\r\n      direction={{ base: \"column\", md: \"row\" }}\r\n      justify=\"space-between\"\r\n    >\r\n      <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n        <Tooltip\r\n          label={inputhoverTesxt || ``}\r\n          aria-label={inputhoverTesxt || ``}\r\n        >\r\n          <FormControl w=\"100%\" id=\"search\">\r\n            <InputGroup size=\"sm\">\r\n              <FormLabel srOnly>Filtrer par nom ou par e-mail</FormLabel>\r\n              <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                <BsSearch />\r\n              </InputLeftElement>\r\n              <Input\r\n                rounded=\"base\"\r\n                type=\"search\"\r\n                onChange={(value) => setInputValue(value.target.value)}\r\n                placeholder=\"Filtrer\"\r\n              />\r\n            </InputGroup>\r\n          </FormControl>\r\n        </Tooltip>\r\n\r\n        <Tooltip\r\n          label={buttonhoverTesxt || ``}\r\n          aria-label={buttonhoverTesxt || ``}\r\n        >\r\n          <ButtonGroup size=\"sm\" variant=\"outline\">\r\n            <Button\r\n              w=\"100%\"\r\n              onClick={() => chercherFn(inputValue)}\r\n              iconSpacing=\"1\"\r\n              leftIcon={buttonIcon}\r\n            >\r\n              {buttonText}\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Tooltip>\r\n      </Grid>\r\n    </Stack>\r\n  );\r\n};\r\n","import {\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  Box,\r\n  Text,\r\n  Heading,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport * as React from \"react\";\r\n\r\nexport const TableContent = (props) => {\r\n  const { header, content, fntable, message } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        display={!!content && content.length != 0 ? `none` : ``}\r\n        maxW=\"2xl\"\r\n        mx=\"auto\"\r\n        px={{ base: \"6\", lg: \"8\" }}\r\n        py={{ base: \"16\", sm: \"20\" }}\r\n        textAlign=\"center\"\r\n      >\r\n        {!!message ? (\r\n          message()\r\n        ) : (\r\n          <>\r\n            <Heading\r\n              as=\"h2\"\r\n              size=\"lg\"\r\n              fontWeight=\"extrabold\"\r\n              letterSpacing=\"tight\"\r\n            >\r\n              Vous n'avez aucun information\r\n            </Heading>\r\n          </>\r\n        )}\r\n      </Box>\r\n      <Table\r\n        overflowX=\"scroll\"\r\n        w=\"100%\"\r\n        display={content.length == 0 ? `none` : ``}\r\n        my=\"8\"\r\n        borderWidth=\"1px\"\r\n        fontSize=\"sm\"\r\n      >\r\n        <Thead bg={mode(\"green.100\", \"gray.800\")}>\r\n          <Tr textAlign=\"center\">\r\n            {header.map((column, index) => (\r\n              <Th\r\n                maxW=\"10%\"\r\n                whiteSpace=\"nowrap\"\r\n                scope=\"col\"\r\n                color={mode(\"green.900\", \"gray.50\")}\r\n                key={index}\r\n              >\r\n                {column}\r\n              </Th>\r\n            ))}\r\n            {!!fntable ? (\r\n              <Th textAlign=\"center\" color={mode(\"green.900\", \"gray.50\")}>\r\n                acte\r\n              </Th>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {content.map((row, index) => (\r\n            <Tr key={index} whiteSpace=\"normal\">\r\n              {Object.values(row)\r\n                .slice(1)\r\n                .map((column, indexcol) =>\r\n                  indexcol < Object.values(header).length ? (\r\n                    <Td maxW=\"100px\" whiteSpace=\"nowrap\" key={indexcol}>\r\n                      {column}\r\n                    </Td>\r\n                  ) : null\r\n                )}\r\n              {!!fntable ? (\r\n                <Td textAlign=\"right\">\r\n                  <Box textAlign=\"center\">\r\n                    {!!fntable ? fntable.fn(row) : ``}\r\n                    {!!fntable ? !!fntable.fn2 && fntable.fn2(row) : ``}\r\n                  </Box>\r\n                  <Box textAlign=\"center\">\r\n                    {!!fntable ? !!fntable.fn3 && fntable.fn3(row) : ``}\r\n                  </Box>\r\n                </Td>\r\n              ) : (\r\n                ``\r\n              )}\r\n            </Tr>\r\n          ))}\r\n        </Tbody>\r\n      </Table>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  Flex,\r\n  Text,\r\n  Box,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\n\r\nexport const TablePagination = (props) => {\r\n  const { total, prev_page_url, next_page_url, setPage, page } = props;\r\n\r\n  return (\r\n    <Box px={2} display={total == 0 ? `none` : ``}>\r\n      <Flex align=\"center\" justify=\"space-between\">\r\n        <Text color={mode(\"green.600\", \"gray.400\")} fontSize=\"sm\">\r\n          {total} Colonne\r\n        </Text>\r\n        <ButtonGroup variant=\"outline\" size=\"sm\">\r\n          {!!prev_page_url ? (\r\n            <Button as=\"a\" onClick={() => setPage(page - 1)} rel=\"Pr√©c√©dente\">\r\n              Pr√©c√©dente\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n          <Box m={1}> Page {page}</Box>\r\n          {!!next_page_url ? (\r\n            <Button as=\"a\" onClick={() => setPage(page + 1)} rel=\"Suivante\">\r\n              Suivante\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n        </ButtonGroup>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Center, Box, Image, Button, Heading, Grid } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TableActions } from \"./../../components/table/TableActions\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nconst Rappel = () => {\r\n  const [Typeofresearch, setTypeofresearch] = useState(\"medicament\");\r\n  let history = useHistory();\r\n  //costom mel api eli bach ta3mlou\r\n  let header = [];\r\n  //el res mta3 el api bach tet7at hna\r\n  let content = [];\r\n  return (\r\n    <Box as=\"section\" py={{ base: 0, md: \"12\" }} w=\"100%\">\r\n      <Grid templateColumns=\"repeat(2, 1fr)\" gap={2}>\r\n        <Button\r\n          mx={10}\r\n          onClick={() => {\r\n            setTypeofresearch(\"consultation\");\r\n          }}\r\n        >\r\n          ü©∫ consultation\r\n        </Button>\r\n        <Button\r\n          mx={10}\r\n          onClick={() => {\r\n            setTypeofresearch(\"medicament\");\r\n          }}\r\n        >\r\n          medicament üíä\r\n        </Button>\r\n      </Grid>\r\n\r\n      <Box\r\n        maxW={{ base: \"xl\", md: \"7xl\" }}\r\n        mx=\"auto\"\r\n        px={{ base: \"1\", md: \"8\" }}\r\n      >\r\n        <Box>\r\n          <Heading size=\"lg\" mb=\"6\">\r\n            Contact\r\n          </Heading>\r\n          {/* <TableActions /> */}\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination />\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default Rappel;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useRelation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id }) =>\r\n      axios.post(\"rmp\", { medecin_id, patient_id }),\r\n    config\r\n  );\r\n};\r\nconst list = () => {\r\n  axios.get();\r\n};\r\nexport const useRelationListe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"Liste de mes patients\", params],\r\n    () => axios.get(\"lrmp\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useRelationPM = ({ params, ...config } = {}) => {\r\n  return useQuery(\"pm\", () => axios.get(\"pm\", { params }), config);\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Stack,\r\n  FormControl,\r\n  Button,\r\n  Text,\r\n  ButtonGroup,\r\n  SimpleGrid,\r\n  Spinner,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"./../../../components/formInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useRelation } from \"./../../../services/api/relation\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nconst AjouPatient = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { refetch } = props;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const { mutate, isLoading } = useRelation({\r\n    onError: (error) => {\r\n      setMessage(\r\n        \"V√©rifiez les informations de contact ou la liste que vous avez ins√©r√©es\"\r\n      );\r\n    },\r\n    onSuccess: (res) => {\r\n      setMessage(\"\");\r\n      refetch();\r\n    },\r\n  });\r\n  const myForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.medecin_id = user.id;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={myForm.submit}>\r\n          <Stack\r\n            spacing=\"2\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <SimpleGrid columns={2} spacing={1} w=\"100%\">\r\n              <Tooltip\r\n                label=\"Entrez le cin, l'email ou le t√©l√©phone du patient\"\r\n                aria-label=\"Entrez le cin, l'email ou le t√©l√©phone du patient\"\r\n              >\r\n                <FormControl minW={{ md: \"320px\" }} id=\"search\">\r\n                  <MyField name=\"patient_id\" Placeholder=\"ajouter un patient\" />\r\n                  <Text color=\"tomato\">{message}</Text>\r\n                </FormControl>\r\n              </Tooltip>\r\n              <Tooltip\r\n                label=\"ajouter un patient\"\r\n                aria-label=\"ajouter un patient\"\r\n              >\r\n                <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                  <Button\r\n                    position=\"relative\"\r\n                    top=\"8px\"\r\n                    type=\"submit\"\r\n                    fontSize=\"20px\"\r\n                    p={5}\r\n                    w=\"100%\"\r\n                  >\r\n                    <Spinner\r\n                      display={!isLoading ? `none` : ``}\r\n                      color=\"red.500\"\r\n                    />\r\n                    Ajouter ü§í\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Tooltip>\r\n            </SimpleGrid>\r\n          </Stack>\r\n        </form>\r\n      </Formiz>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AjouPatient;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Spinner,\r\n  useToast,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n  useDisclosure,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListActe } from \"../../../services/api/Historique patient\";\r\nconst HistoriqueActe = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [header, setHeader] = useState([\"Code\", \"Designation\", \"note\", \"Date\"]);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const params = { medecin_id, patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingActe, refetch: refetchActe } =\r\n    useHistoriqueListActe({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \":Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        setContent((res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n\r\n  // let header = [\"Code\", \"Designation\", \"note\"];\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} colorScheme={mode(\"green\", \"blue\")} onClick={onOpen}>\r\n        Acte\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Acte</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <TableContent header={header} content={content} />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueActe;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useHistoriqueListConsultation = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hc\", () => axios.get(\"hc\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hcertif\", params],\r\n    () => axios.get(\"hcertif\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hact\", params],\r\n    () => axios.get(\"hact\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListAntecedants = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"hant\", params],\r\n    () => axios.get(\"hant\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useHistoriqueListExamen = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hex\", () => axios.get(\"hex\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListOrdonnance = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hor\", () => axios.get(\"hor\", { params }), config);\r\n};\r\n\r\nexport const useHistoriqueListLettre = ({ params, ...config } = {}) => {\r\n  return useQuery(\"hl\", () => axios.get(\"hl\", { params }), config);\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const usePatentInfo = ({ params, ...config } = {}) => {\r\n  return useQuery(\"pinfo\", () => axios.get(\"pinfo\", { params }), config);\r\n};\r\n\r\nexport const useAntecedants = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"antecedants\",\r\n    () => axios.get(\"antecedants\", { params }),\r\n    config\r\n  );\r\n};\r\n","import { useMedecinInfo } from \"./../../services/api/Medecin information\";\r\nimport { useToast, Text, Button, Avatar } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport React from \"react\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"../../services/api\";\r\nconst InformationsSurLeMedecin = (props) => {\r\n  const { medecin } = props;\r\n  const [medecinInfo, setMedecinInfo] = useState([]);\r\n  const params = { id: medecin };\r\n  const toast = useToast();\r\n  const { isLoading, refetch } = useMedecinInfo({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setMedecinInfo(res.data);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Text>{medecinInfo.nom}</Text>\r\n      {medecinInfo.photo && (\r\n        <Avatar\r\n          size=\"xl\"\r\n          name={medecinInfo.nom}\r\n          src={`${link}${medecinInfo.photo}`}\r\n        />\r\n      )}\r\n      <Text display=\"block\" as=\"a\" href={\"tel:\" + medecinInfo.telephone}>\r\n        <Button\r\n          my={1}\r\n          leftIcon={<MdCall />}\r\n          colorScheme=\"green\"\r\n          variant=\"outline\"\r\n        >\r\n          Appelles\r\n        </Button>\r\n      </Text>\r\n\r\n      <Text as=\"a\" href={\"mailto:\" + medecinInfo.email}>\r\n        <Button\r\n          my={1}\r\n          colorScheme=\"green\"\r\n          leftIcon={<EmailIcon />}\r\n          variant=\"outline\"\r\n        >\r\n          Email\r\n        </Button>\r\n      </Text>\r\n      <Text>{medecinInfo.sexes}</Text>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default InformationsSurLeMedecin;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useMedecinInfo = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"medecininfo\", params],\r\n    () => axios.get(\"medecininfo\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useListeMedec = ({ params, ...config } = {}) => {\r\n  return useQuery(\"liste medecin\", () => axios.get(\"lm\"), config);\r\n};\r\n","import {\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nconst DescriptionMobile = (props) => {\r\n  const { data } = props;\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  return isMobile ? (\r\n    <Text fontSize=\"20px\" color={mode(\"green.700\", \"gray.50\")} m={1}>\r\n      <Popover>\r\n        <PopoverTrigger>\r\n          <Text\r\n            textAlign=\"center\"\r\n            bgColor={mode(\"green.100\", \"gray.500\")}\r\n            _hover={{\r\n              background: mode(\"blue.100\", \"gray.600\"),\r\n            }}\r\n            style={{ cursor: \"pointer\" }}\r\n            borderRadius=\"20px\"\r\n            p={2}\r\n            colorScheme=\"green\"\r\n          >\r\n            Description\r\n          </Text>\r\n        </PopoverTrigger>\r\n        <PopoverContent>\r\n          <PopoverArrow />\r\n          <PopoverCloseButton />\r\n          <PopoverHeader>Plus d'information</PopoverHeader>\r\n          <PopoverBody>{data.description}</PopoverBody>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </Text>\r\n  ) : null;\r\n};\r\nexport default DescriptionMobile;\r\n","import { useAntecedants } from \"../../services/api/patient information\";\r\nimport {\r\n  Button,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverCloseButton,\r\n  PopoverHeader,\r\n  PopoverBody,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  IconButton,\r\n  SkeletonText,\r\n  useToast,\r\n  Text,\r\n  useColorModeValue as mode,\r\n  DrawerFooter,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport InformationsSurLeMedecin from \"./../InformationsSurLeMedecin\";\r\nimport { TableContent } from \"./../table/TableContent\";\r\nimport { TablePagination } from \"./../table/TablePagination\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport DescriptionMobile from \"./descriptionMobile\";\r\n\r\nconst Antecedants = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const { patient } = props;\r\n  const toast = useToast();\r\n  const params = { patient_id: patient.id };\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [patientInfo, setPatientInfo] = useState([]);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  let header = [\"type\", \"description\", \"Date\"];\r\n  if (isMobile) {\r\n    header = [\"type\"];\r\n  } else {\r\n    header = [\"type\", \"description\", \"Date\"];\r\n  }\r\n  const { isLoading, refetch } = useAntecedants({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setPatientInfo(res.data.data);\r\n    },\r\n  });\r\n\r\n  // console.log(patientInfo);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <Text fontSize=\"20px\" color={mode(\"green.700\", \"gray.50\")}>\r\n        <Popover>\r\n          <PopoverTrigger>\r\n            <Text\r\n              textAlign=\"center\"\r\n              bgColor={mode(\"green.100\", \"gray.500\")}\r\n              _hover={{\r\n                background: mode(\"blue.100\", \"gray.600\"),\r\n              }}\r\n              style={{ cursor: \"pointer\" }}\r\n              borderRadius=\"20px\"\r\n              p={2}\r\n              colorScheme=\"green\"\r\n            >\r\n              {data.medecin}\r\n            </Text>\r\n          </PopoverTrigger>\r\n\r\n          <PopoverContent>\r\n            <PopoverArrow />\r\n            <PopoverCloseButton />\r\n            <PopoverHeader>Plus d'information</PopoverHeader>\r\n            <PopoverBody>\r\n              <InformationsSurLeMedecin medecin={data.medecin_id} />\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </Text>\r\n    ),\r\n    fn2: (data) => <DescriptionMobile data={data} />,\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <Button colorScheme={mode(\"green\", \"blue\")} onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Trouver tous les ant√©c√©dents m√©dicauxr`}\r\n          aria-label=\"Trouver tous les ant√©c√©dents m√©dicaux\"\r\n        >\r\n          Ant√©c√©dents\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer placement=\"left\" size=\"xl\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerHeader borderBottomWidth=\"1px\">\r\n            Antecedants\r\n            <IconButton\r\n              float=\"right\"\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              m={1}\r\n              colorScheme=\"red\"\r\n              fontSize=\"10px\"\r\n              icon={<CloseIcon />}\r\n              onClick={() => onClose()}\r\n            />\r\n          </DrawerHeader>\r\n          <DrawerBody display={!isLoading ? `none` : ``}>\r\n            <SkeletonText mt=\"7\" noOfLines={7} spacing=\"7\" />\r\n          </DrawerBody>\r\n          <DrawerBody display={isLoading ? `none` : ``}>\r\n            <TableContent\r\n              header={header}\r\n              content={patientInfo}\r\n              fntable={fntable}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Antecedants;\r\n","import React, { useState, useContext, useRef } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { RiPrinterFill } from \"react-icons/ri\";\r\nimport { usePatentInfo } from \"./../../services/api/patient information\";\r\n\r\nconst InputSunEditor = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n  const {\r\n    label,\r\n    required,\r\n    note,\r\n    Placeholder,\r\n    dtValue,\r\n    Patient,\r\n    editorRef,\r\n    disabled,\r\n  } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  //   const editorRef = useRef();\r\n  const toast = useToast();\r\n\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const paramsPatentInfo = { cms_users_id: Patient.id };\r\n  const { isLoading: isLodingForPatentInfo, refetch: refetchPatentInfo } =\r\n    usePatentInfo({\r\n      params: paramsPatentInfo,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setPatientInfo(res.data);\r\n      },\r\n    });\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n    setValue(content);\r\n  };\r\n  const replaceAll = (string, search, replace) => {\r\n    return string.split(search).join(replace);\r\n  };\r\n  const decodeMessage = (text) => {\r\n    let sexesM = user.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    let sexesP = Patient.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    text = replaceAll(text, \"{sexesPatient}\", sexesP);\r\n    text = replaceAll(text, \"{medecinNomPrenom}\", user.nom + \" \" + user.prenom);\r\n    text = replaceAll(\r\n      text,\r\n      \"{patientNomPrenom}\",\r\n      patientInfo.nom + \" \" + patientInfo.prenom\r\n    );\r\n    text = replaceAll(text, \"{addresPatient}\", Patient.Adresse);\r\n    text = replaceAll(text, \"{sexesmedecin}\", sexesM);\r\n    text = replaceAll(text, \"{specialiteMedecin}\", \"\");\r\n    text = replaceAll(text, \"{domaineMedecin}\", \"\");\r\n    text = replaceAll(\r\n      text,\r\n      \"{datePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? new Date(patientInfo.date_naissance).toISOString().slice(0, 10)\r\n        : ``\r\n    );\r\n    text = replaceAll(\r\n      text,\r\n      \"{thisDate}\",\r\n      new Date().toISOString().slice(0, 10)\r\n    );\r\n\r\n    text = replaceAll(\r\n      text,\r\n      \"{agePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? Math.abs(\r\n            new Date(\r\n              Date.now() - new Date(patientInfo.date_naissance).getTime()\r\n            ).getUTCFullYear() - 1970\r\n          )\r\n        : ``\r\n    );\r\n\r\n    return text;\r\n  };\r\n  const print = () => {\r\n    const mywindow = window.open(\"\", \"PRINT\");\r\n\r\n    mywindow.document.write(decodeMessage(editerValue));\r\n\r\n    mywindow.document.close(); // necessary for IE >= 10\r\n\r\n    mywindow.focus(); // necessary for IE >= 10*/\r\n    mywindow.addEventListener(\"afterprint\", function (event) {\r\n      mywindow.close();\r\n    });\r\n    mywindow.print();\r\n  };\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>{label}</FormLabel>\r\n      <SunEditor\r\n        disable={!!disabled}\r\n        ref={editorRef}\r\n        id={id}\r\n        placeholder={\r\n          Placeholder ||\r\n          \"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n        }\r\n        value={value || dtValue || \"\"}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n        lang=\"fr\"\r\n        name=\"my-editor\"\r\n        height=\"auto\"\r\n        showToolbar={true}\r\n        values={editerValue}\r\n        onChange={handleChange}\r\n        setOptions={{\r\n          height: 200,\r\n          buttonList: [\r\n            [\"undo\", \"redo\"],\r\n            [\r\n              \"font\",\r\n              \"fontSize\",\r\n              \"formatBlock\",\r\n              \":p-More Paragraph-default.more_paragraph\",\r\n            ],\r\n            [\"paragraphStyle\", \"blockquote\"],\r\n            [\r\n              \"bold\",\r\n              \"underline\",\r\n              \"italic\",\r\n              \"strike\",\r\n              \"subscript\",\r\n              \"superscript\",\r\n            ],\r\n            [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n            [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n            [\"removeFormat\"],\r\n          ],\r\n        }}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n      <IconButton\r\n        m={2}\r\n        onClick={() => print()}\r\n        variant=\"outline\"\r\n        colorScheme=\"teal\"\r\n        aria-label=\"Send email\"\r\n        icon={<RiPrinterFill />}\r\n        size=\"lg\"\r\n      />\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\nexport default InputSunEditor;\r\n","import InputSunEditor from \"./../formInput/SunEditorInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nconst ShowCertifica = (props) => {\r\n  const { structure, patientId } = props;\r\n\r\n  const editorRef = useRef();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = useRef();\r\n  const btnRef = useRef();\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {};\r\n  useEffect(() => {\r\n    !!!!editorRef.current && editorRef.current.editor.setContents(structure);\r\n  });\r\n  return (\r\n    <>\r\n      <Button onClick={onOpen}>Certificat</Button>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent minW={{ md: \"700px\", lg: \"90vw\" }}>\r\n          <AlertDialogHeader>Certificat</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <AlertDialogBody>\r\n            <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n              <form noValidate onSubmit={MyForm.submit}>\r\n                <InputSunEditor\r\n                  Patient={{ id: patientId }}\r\n                  disabled={true}\r\n                  editorRef={editorRef}\r\n                  name=\"certif\"\r\n                />\r\n              </form>\r\n            </Formiz>\r\n          </AlertDialogBody>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default ShowCertifica;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListCertificat } from \"../../../services/api/Historique patient\";\r\nimport ShowCertifica from \"./../ShowCertifica\";\r\nconst HistoriqueCetificat = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n\r\n  const header = [\"date\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <ShowCertifica structure={data.structure} patientId={data.patient_id} />\r\n    ),\r\n  });\r\n  const params = { medecin_id, patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingCertificat, refetch: refetchCertifcat } =\r\n    useHistoriqueListCertificat({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n  // let header = [\"structure\"];\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} colorScheme={mode(\"green\", \"blue\")} onClick={onOpen}>\r\n        Certificat\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Certificat</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <TableContent header={header} content={content} fntable={fntable} />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueCetificat;\r\n","import { useHistoriqueListCertificat } from \"../../../services/api/Historique patient\";\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionPanel,\r\n  AccordionIcon,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport { Box, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport ShowCertifica from \"./../../Certificat/ShowCertifica\";\r\nimport { useDetatilOfConsultation } from \"../../../services/api/consultation\";\r\n\r\nconst DetatilConsultation = (props) => {\r\n  const toast = useToast();\r\n  const { data } = props;\r\n  const [consultation, setConsultation] = useState({});\r\n  const [detatil, setDetatil] = useState({});\r\n  const params = { id: data.id };\r\n  const { isLoading, refetch } = useDetatilOfConsultation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      // console.log(res.data.data);\r\n      setConsultation(res.data.data.consultation);\r\n      setDetatil(res.data.data.detail);\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <Text pb={2} fontSize=\"23px\">\r\n        {consultation != null ? <>Diagnostic: {consultation.Diagnostic}</> : ``}\r\n      </Text>\r\n      <Text pb={2} fontSize=\"23px\">\r\n        {consultation != null ? <>Prix: {consultation.prix}</> : ``}\r\n      </Text>\r\n      <Text>\r\n        {detatil != null ? (\r\n          <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n            <Accordion allowMultiple>\r\n              {Object.keys(detatil).map((value) => {\r\n                return (\r\n                  <AccordionItem>\r\n                    <h2>\r\n                      <AccordionButton bgColor=\"green.100\">\r\n                        <Box flex=\"1\" textAlign=\"left\" fontSize=\"30px\">\r\n                          {value}\r\n                        </Box>\r\n                        <AccordionIcon />\r\n                      </AccordionButton>\r\n                    </h2>\r\n                    <AccordionPanel pb={4}>\r\n                      {detatil[value].map((valueobject) => (\r\n                        <Box borderBottom=\"1px\" borderColor=\"gray.200\" pb={2}>\r\n                          {Object.keys(valueobject).map((finalevalue) => (\r\n                            <Text>\r\n                              {value == \"certificat\" ? (\r\n                                <ShowCertifica\r\n                                  structure={valueobject.structure}\r\n                                  patientId={valueobject.patient_id}\r\n                                />\r\n                              ) : (\r\n                                <>\r\n                                  {valueobject[finalevalue] != null ? (\r\n                                    <>\r\n                                      <Text fontSize=\"20px\">\r\n                                        {finalevalue}:\r\n                                      </Text>\r\n                                      <Text fontSize=\"15px\">\r\n                                        {valueobject[finalevalue]}\r\n                                      </Text>\r\n                                    </>\r\n                                  ) : (\r\n                                    ``\r\n                                  )}\r\n                                </>\r\n                              )}\r\n                            </Text>\r\n                          ))}\r\n                        </Box>\r\n                      ))}\r\n                    </AccordionPanel>\r\n                  </AccordionItem>\r\n                );\r\n              })}\r\n            </Accordion>\r\n          </SimpleGrid>\r\n        ) : (\r\n          ``\r\n        )}\r\n      </Text>\r\n    </>\r\n  );\r\n};\r\nexport default DetatilConsultation;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useConsultationPatient = ({ params, ...config } = {}) => {\r\n  return useQuery(\"cp\", () => axios.get(\"cp\", { params }), config);\r\n};\r\n\r\nexport const useListOfThePatientInConsultation = ({\r\n  params,\r\n  ...config\r\n} = {}) => {\r\n  return useQuery(\r\n    \"liste-pattient-wating\",\r\n    () => axios.get(\"pdcm\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useDetatilOfConsultation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"Detatil Of Consultation\",\r\n    () => axios.get(\"cd\", { params }),\r\n    config\r\n  );\r\n};\r\n\r\nexport const useCreateConsultation = ({ params, ...config } = {}) => {\r\n  return useMutation((params) => axios.post(\"consultation\", params), config);\r\n};\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport { useColorModeValue as mode, useToast } from \"@chakra-ui/react\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { TbibyContext } from \"../../router/context\";\r\n\r\nimport DetatilConsultation from \"./_partial/DetatilConsultation\";\r\n\r\nconst HistoriqueConsultation = (props) => {\r\n  const { data } = props;\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        ref={btnRef}\r\n        m={1}\r\n        colorScheme={mode(\"green\", \"blue\")}\r\n        onClick={onOpen}\r\n      >\r\n        Historique Consultation\r\n      </Button>\r\n      <Drawer\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bg={mode(\"green.50\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Historique consultation</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <DetatilConsultation data={data} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueConsultation;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n} from \"@chakra-ui/react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListExamen } from \"../../../services/api/Historique patient\";\r\nconst HistoriqueExamen = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [header, setHeader] = useState([]);\r\n\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const params = { medecin_id, patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingExamen, refetch: refetchExamen } =\r\n    useHistoriqueListExamen({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n        res.data.data !== [] && setHeader([\"Note\", \"Type\", \"Prix\", \"Date\"]);\r\n      },\r\n    });\r\n\r\n  // let header = [\"Note\", \"Type\", \"Prix\"];\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} onClick={onOpen} colorScheme={mode(\"green\", \"blue\")}>\r\n        Examen\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Examen</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <TableContent header={header} content={content} />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueExamen;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListLettre } from \"../../../services/api/Historique patient\";\r\nconst HistoriqueLettre = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [header, setHeader] = useState([]);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const params = { medecin_id, patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n\r\n  const { isLoading: isLodingLettre, refetch: refetchLettre } =\r\n    useHistoriqueListLettre({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \":Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n        res.data.data !== [] && setHeader([\"Description\", \"Date\"]);\r\n      },\r\n    });\r\n\r\n  //   let header = [\"Description\"];\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} colorScheme={mode(\"green\", \"blue\")} onClick={onOpen}>\r\n        Lettre\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Lettre</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <TableContent header={header} content={content} />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueLettre;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { useToast, Button, useDisclosure } from \"@chakra-ui/react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useHistoriqueListOrdonnance } from \"../../../services/api/Historique patient\";\r\nconst HistoriqueOrdonnance = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { patient } = props;\r\n\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const header = [\"Medicament\"];\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  // const params = { medecin_id, patient_id: patient.id, page };\r\n  const params = { patient_id: patient.id, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading: isLodingOrdonnance, refetch: refetchOrdonnance } =\r\n    useHistoriqueListOrdonnance({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \" Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        res.data.data !== [] && setContent(res.data.data);\r\n      },\r\n    });\r\n\r\n  //   let header = [\"Description\"];\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} onClick={onOpen} colorScheme={mode(\"green\", \"blue\")}>\r\n        Ordonnance\r\n      </Button>\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"left\"\r\n        size=\"xl\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\")}>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Ordonnance</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <TableContent header={header} content={content} />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </DrawerBody>\r\n\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoriqueOrdonnance;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { SimpleGrid } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nimport { useHistoriqueListConsultation } from \"../../../services/api/Historique patient\";\r\nimport HistoriqueActe from \"../../Acte/ActeHistorique\";\r\nimport Antecedants from \"../../Antecedants\";\r\nimport HistoriqueCertificat from \"../../Certificat/CertificatHistorique\";\r\nimport HistoriqueConsultation from \"../../Consultation\";\r\nimport HistoriqueExamen from \"../../Examen/ExamenHistorique\";\r\nimport HistoriqueLettre from \"../../Lettre/LettreHistorique\";\r\nimport HistoriqueOrdonnance from \"../../Ordonnance/OrdonnanceHistorique\";\r\nimport { TableContent } from \"../../table/TableContent\";\r\nimport { TablePagination } from \"../../table/TablePagination\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst TableauDynamique = (props) => {\r\n  const { patient, consultation } = props;\r\n  const { user } = useContext(TbibyContext);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([\"\"], [\"\"]);\r\n  const header = [\"date\", \"Diagnostic\"];\r\n  const toast = useToast();\r\n  const params = {\r\n    patient_id: patient.id,\r\n    medecin_id: user.id,\r\n    page,\r\n  };\r\n  const { isLoading: isLodingConsultation, refetch: refetchConsultation } =\r\n    useHistoriqueListConsultation({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        !!res.data.data &&\r\n          res.data.data.map((value) => {\r\n            if (value.Diagnostic == null) {\r\n              value.Diagnostic = \"Aucun diagnostic √©crit\";\r\n            }\r\n          });\r\n        setContent((!!res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <>\r\n        <HistoriqueConsultation data={data} />\r\n      </>\r\n    ),\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n        <Button\r\n          colorScheme={mode(\"green\", \"blue\")}\r\n          onClick={() => {\r\n            refetchConsultation();\r\n          }}\r\n        >\r\n          Consultation\r\n        </Button>\r\n        <HistoriqueCertificat patient={patient} />\r\n        <HistoriqueActe patient={patient} />\r\n        <Antecedants patient={patient} />\r\n        <HistoriqueExamen patient={patient} />\r\n        <HistoriqueOrdonnance patient={patient} />\r\n        <HistoriqueLettre patient={patient} />\r\n      </SimpleGrid>\r\n      <TableContent header={header} content={content} fntable={fntable} />\r\n      <TablePagination\r\n        total={total}\r\n        next_page_url={next}\r\n        prev_page_url={prev}\r\n        page={page}\r\n        setPage={setPage}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default TableauDynamique;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport TableauDynamique from \"./_patials/TableauDynamique\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiHistory } from \"react-icons/bi\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst HistoriquePatient = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { patient } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <Button ref={btnRef} m={1} onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Tout ce que j'ai fait pour ce patient`}\r\n          aria-label=\"Tout ce que j'ai fait pour ce patient\"\r\n        >\r\n          {isMobile ? <BiHistory fontSize=\"30px\" /> : `Historique`}\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bg={mode(\"green.50\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Historique patient</DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <TableauDynamique patient={patient} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default HistoriquePatient;\r\n","import { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\n\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nconst PatientInfo = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button m={1} colorScheme=\"green\">\r\n          <Tooltip\r\n            label={`Plus d'informations sur ${data.nom + \" \" + data.prenom}`}\r\n            aria-label={`Plus d'informations sur ${\r\n              data.nom + \" \" + data.prenom\r\n            }`}\r\n          >\r\n            {isMobile ? <BiInfoCircle fontSize=\"30px\" /> : `Informations`}\r\n          </Tooltip>\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <Portal>\r\n        <PopoverContent borderColor=\"green\">\r\n          <PopoverArrow />\r\n          <PopoverHeader>{data.nom + \" \" + data.prenom} </PopoverHeader>\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            {data.photo && (\r\n              <Box>\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={data.nom + \" \" + data.prenom}\r\n                  src={`${link}${data.photo}`}\r\n                />\r\n              </Box>\r\n            )}\r\n            {data.Adresse && <Text>Adresse : {data.Adresse} </Text>}\r\n            {data.Code_APCI && <Text>Code_APCI : {data.Code_APCI} </Text>}\r\n            {data.email != \"\" && data.email != null ? (\r\n              <Text as=\"a\" href={\"mailto:\" + data.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            {data.telephone != \"\" && data.telephone != null ? (\r\n              <Text display=\"block\" as=\"a\" href={\"tel:\" + data.telephone}>\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            {data.cin && <Text>cin : {data.cin} </Text>}\r\n          </PopoverBody>\r\n          <PopoverFooter>\r\n            Ce sont des informations personnelles sur votre patient\r\n          </PopoverFooter>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n};\r\nexport default PatientInfo;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Box, Spinner, useToast, Heading } from \"@chakra-ui/react\";\r\nimport { TableActions } from \"./../../components/table/TableActions\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport AjouPatient from \"./_partials/AjoutPatient\";\r\nimport { useRelationListe } from \"./../../services/api/relation\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport HistoriquePatient from \"../../components/historique patient\";\r\nimport PatientInfo from \"./../../components/informationSurPatient\";\r\nconst ListPatients = () => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n  const medecin_id = user.id;\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n  const [patientId, setPatientId] = useState(\"\");\r\n  const params = { medecin_id, patient_id: patientId, page };\r\n  const btnRef = React.useRef();\r\n  const { isLoading, refetch } = useRelationListe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <PatientInfo data={data} />,\r\n    fn2: (data) => <HistoriquePatient patient={data} />,\r\n  });\r\n  let header = [\"Nom\", \"Prenom\"];\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          vous n'avez aucun patient\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <Box>\r\n            <AjouPatient refetch={refetch} />\r\n\r\n            <TableActions\r\n              buttonText=\"Chercher\"\r\n              buttonIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n              chercherFn={setPatientId}\r\n              buttonhoverTesxt={`Rechercher üîé`}\r\n              inputhoverTesxt={`√©cris quoi que ce soit pour indiquer sur la personne que tu veux trouver`}\r\n            />\r\n\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ListPatients;\r\n","import { Button, IconButton } from \"@chakra-ui/button\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\n\r\nconst Alert = (props) => {\r\n  const {\r\n    hoverMassage,\r\n    target,\r\n    isOpen,\r\n    setIsOpen,\r\n    cancelRef,\r\n    onClose,\r\n    fnTodo,\r\n    Header,\r\n    Body,\r\n    icon,\r\n    colorScheme,\r\n    bg,\r\n    btOK,\r\n    btNon,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <Tooltip\r\n        label={!!hoverMassage && hoverMassage}\r\n        aria-label={!!hoverMassage && hoverMassage}\r\n      >\r\n        <IconButton\r\n          size=\"sm\"\r\n          m={1}\r\n          bg={bg}\r\n          colorScheme={colorScheme}\r\n          // fontSize=\"10px\"\r\n          icon={icon}\r\n          onClick={() => setIsOpen(true)}\r\n        />\r\n      </Tooltip>\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {Header}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{Body}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose} colorScheme=\"green\">\r\n                {btNon}\r\n              </Button>\r\n\r\n              <Button\r\n                colorScheme=\"green\"\r\n                onClick={(event) => fnTodo(event, target)}\r\n                ml={3}\r\n              >\r\n                {btOK}\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default Alert;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport Alert from \"./alert\";\r\nimport {\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Task = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  const [isOpenRemove, setIsOpenRemove] = useState(false);\r\n  const onCloseRemove = () => setIsOpenRemove(false);\r\n  const cancelRefRemove = useRef();\r\n\r\n  const { taskvalue, task, setTask, DeleteMutate, EnteredMutate, usertype } =\r\n    props;\r\n\r\n  const Entered = (event) => {\r\n    event.stopPropagation();\r\n    EnteredMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const remove = (event) => {\r\n    event.stopPropagation();\r\n    DeleteMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const detail = (event) => {\r\n    event.stopPropagation();\r\n  };\r\n  const getItemStyle = (isDragging, draggableStyle) => ({\r\n    ...draggableStyle,\r\n    userSelect: \"none\",\r\n    padding: 3,\r\n    margin: `0 0 0px 0`,\r\n  });\r\n  return (\r\n    <Draggable\r\n      key={taskvalue.id}\r\n      draggableId={taskvalue.id.toString()}\r\n      index={taskvalue.id}\r\n    >\r\n      {(provided, snapshot) => (\r\n        <Popover>\r\n          <PopoverTrigger>\r\n            <Box\r\n              onClick={(event) => detail(event)}\r\n              ref={provided.innerRef}\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              style={\r\n                (\"none\",\r\n                getItemStyle(\r\n                  snapshot.isDragging,\r\n                  provided.draggableProps.style\r\n                ))\r\n              }\r\n              border=\"2px\"\r\n              borderRadius=\"20px\"\r\n              bgColor={snapshot.isDragging ? `#3b8a5b` : `#b3e6c8`}\r\n              borderColor=\"green.200\"\r\n              mx={3}\r\n              px={2}\r\n              children={\r\n                <Box color=\"gray.800\" fontSize=\"17px\">\r\n                  <Alert\r\n                    hoverMassage=\"Supprimer ce r√©servatitien\"\r\n                    Header=\"Supprimer la r√©servation\"\r\n                    Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                    icon={<CloseIcon />}\r\n                    colorScheme=\"teal\"\r\n                    bg=\"red.300\"\r\n                    fnTodo={remove}\r\n                    btOK=\"Effacer\"\r\n                    btNon=\"Annuler\"\r\n                    isOpen={isOpen}\r\n                    setIsOpen={setIsOpen}\r\n                    onClose={onClose}\r\n                    cancelRef={cancelRef}\r\n                  />\r\n                  {taskvalue.nomprenom}\r\n                  {\r\n                    usertype == \"medecin\" || usertype == \"secretaire\" ? (\r\n                      <Alert\r\n                        hoverMassage=\"Envoyer ce patient au m√©decin\"\r\n                        Header=\"Confirmer\"\r\n                        Body={`Voulez-vous confirmer que ${taskvalue.nomprenom} d√©butera sa consultation ? `}\r\n                        icon={<BsBoxArrowInRight w={4} h={4} />}\r\n                        bg=\"blue.300\"\r\n                        btOK=\"oui\"\r\n                        btNon=\"Non\"\r\n                        fnTodo={Entered}\r\n                        isOpen={isOpenRemove}\r\n                        setIsOpen={setIsOpenRemove}\r\n                        onClose={onCloseRemove}\r\n                        cancelRef={cancelRefRemove}\r\n                      />\r\n                    ) : (\r\n                      ``\r\n                    )\r\n                    // (\r\n                    //   <Alert\r\n                    //     Header=\"Supprimer la r√©servation\"\r\n                    //     Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                    //     icon={<CloseIcon />}\r\n                    //     fnTodo={remove}\r\n                    //     isOpen={isOpen}\r\n                    //     setIsOpen={setIsOpen}\r\n                    //     onClose={onClose}\r\n                    //     cancelRef={cancelRef}\r\n                    //   />\r\n                    // )\r\n                  }\r\n                </Box>\r\n              }\r\n            />\r\n          </PopoverTrigger>\r\n          <PopoverContent bg={mode(\"green.50\", \"gray.800\")}>\r\n            <PopoverHeader fontWeight=\"semibold\">\r\n              {taskvalue.nomprenom}\r\n            </PopoverHeader>\r\n            <PopoverBody>\r\n              Votre rendez-vous est le {taskvalue.start.slice(0, 10) + \" \"}√†\r\n              {\" \" + taskvalue.start.slice(11, 19)}\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Popover>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\nexport default Task;\r\n","import { Box, Flex, Text } from \"@chakra-ui/layout\";\r\nimport { Grid } from \"@chakra-ui/layout\";\r\nimport { GridItem } from \"@chakra-ui/layout\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport Task from \"../taks\";\r\n\r\nconst TimeElement = (props) => {\r\n  const {\r\n    usertype,\r\n    HoursValue,\r\n    key,\r\n    value,\r\n    DeleteMutate,\r\n    addtask,\r\n    task,\r\n    EnteredMutate,\r\n    setTask,\r\n  } = props;\r\n\r\n  return (\r\n    <Box\r\n      key={key}\r\n      h=\"160px\"\r\n      fontSize=\"20px\"\r\n      border=\"1px\"\r\n      borderColor={mode(\"green.200\", \"cyan.800\")}\r\n    >\r\n      <Grid\r\n        h=\"100%\"\r\n        templateRows=\"repeat(4, 1fr)\"\r\n        border=\"3px\"\r\n        borderColor=\"red.200\"\r\n        gap={0}\r\n      >\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"00\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.50\", \"cyan.600\")}\r\n              // bgColor={snapshot.isDraggingOver ? \"green.100\" : `gray.50`}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"00\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"00\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"15\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.100\", \"cyan.700\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"15\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"15\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"30\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.200\", \"cyan.800\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"30\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"30\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"45\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.300\", \"cyan.900\")}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    (parseInt(HoursValue.slice(0, 2)) < 9)\r\n                    ? `0${parseInt(HoursValue.slice(0, 2)) + 1}:00`\r\n                    : parseInt(HoursValue.slice(0, 2)) + 1 + \":00\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"45\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"45\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\" ? (\r\n                    <Task\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\nexport default TimeElement;\r\n","import { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport TimeElement from \"./timeElement\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nfunction Calendar(props) {\r\n  const {\r\n    usertype,\r\n    EnteredMutate,\r\n    rowNumber,\r\n    date,\r\n    DeleteMutate,\r\n    task,\r\n    updateTask,\r\n    setTask,\r\n    addtask,\r\n  } = props;\r\n\r\n  //const [, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const Hours = [\r\n    // \"00:00\",\r\n    // \"01:00\",\r\n    // \"02:00\",\r\n    // \"03:00\",\r\n    // \"04:00\",\r\n    // \"05:00\",\r\n    // \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    // \"19:00\",\r\n    // \"20:00\",\r\n    // \"21:00\",\r\n    // \"22:00\",\r\n    // \"23:00\",\r\n  ];\r\n\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n\r\n  const contenu = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    contenu.push(\r\n      <Box>\r\n        <Center\r\n          w=\"100%\"\r\n          key={`key${index}`}\r\n          border=\"1px\"\r\n          borderColor={mode(\"green.200\", \"cyan.900\")}\r\n          bgColor={mode(\"green.300\", \"cyan.900\")}\r\n          color={mode(\"green.800\", \"gray.50\")}\r\n          h={10}\r\n          align=\"center\"\r\n        >\r\n          {value.toISOString().slice(0, 10)}\r\n        </Center>\r\n        {Hours.map((HoursValue) => (\r\n          <TimeElement\r\n            EnteredMutate={EnteredMutate}\r\n            usertype={usertype}\r\n            DeleteMutate={DeleteMutate}\r\n            key={HoursValue.slice(0, 4)}\r\n            HoursValue={HoursValue}\r\n            value={value}\r\n            addtask={addtask}\r\n            task={task}\r\n            setTask={setTask}\r\n          />\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={0}>\r\n        <GridItem colSpan={1}>\r\n          <Box\r\n            w=\"100%\"\r\n            border=\"1px\"\r\n            bgColor={mode(\"green.300\", \"cyan.900\")}\r\n            borderColor={mode(\"green.200\", \"cyan.900\")}\r\n          >\r\n            <Center h={10} align=\"center\"></Center>\r\n            {Hours.map((value) => (\r\n              <Center\r\n                border=\"1px\"\r\n                borderColor={mode(\"green.200\", \"cyan.900\")}\r\n                bgColor={mode(\"green.300\", \"cyan.900\")}\r\n                color={mode(\"green.800\", \"gray.50\")}\r\n                h=\"160px\"\r\n                key={value}\r\n                px={2}\r\n                fontSize=\"20px\"\r\n              >\r\n                {value}\r\n              </Center>\r\n            ))}\r\n          </Box>\r\n        </GridItem>\r\n        <GridItem colSpan={9} w=\"100%\">\r\n          <Grid\r\n            w=\"100%\"\r\n            templateColumns={\"repeat(\" + parseInt(rowNumber) + \", 1fr)\"}\r\n            gap={0}\r\n          >\r\n            <DragDropContext onDragEnd={(result) => updateTask(result)}>\r\n              {contenu}\r\n            </DragDropContext>\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"..\";\r\nexport const useCreateReservation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id, etat, date_reservation }) =>\r\n      axios.post(\"cr\", { medecin_id, patient_id, etat, date_reservation }),\r\n    config\r\n  );\r\n};\r\nexport const usePatientCreateReservation = (config) => {\r\n  return useMutation(\r\n    ({ medecin_id, patient_id, etat, date_reservation }) =>\r\n      axios.post(\"pcr\", { medecin_id, patient_id, etat, date_reservation }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateReservation = (config) => {\r\n  return useMutation(\r\n    ({ id, date_reservation }) =>\r\n      axios.post(\"updater\", {\r\n        id,\r\n        date_reservation,\r\n      }),\r\n    config\r\n  );\r\n};\r\nexport const useDeleteReservation = (config) => {\r\n  return useMutation(({ id }) => axios.post(\"deleter\", { id }), config);\r\n};\r\nexport const useReservationMListe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de rendeves des parents en dashboard\"],\r\n    () => axios.get(\"listrm\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useListReservation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de r√©servation on dashboard\", params],\r\n    () => axios.get(\"lrd\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useListReservationEnLigne = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"list de r√©servation En Ligne on dashboard\", params],\r\n    () => axios.get(\"lrde\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useValideReservation = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"valider un rendez vous \", params],\r\n    () => axios.get(\"vr\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\n\r\nimport { ViewOffIcon, ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Input,\r\n  Text,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nexport const MyFieldPassword = (props) => {\r\n  const [showPassword, setshowPassword] = useState(false);\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, required, note } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <FormControl mt={5}>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <InputGroup>\r\n        <Input\r\n          id={id}\r\n          type={showPassword ? `text` : `password`}\r\n          value={value ?? \"\"}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          onBlur={() => setIsTouched(true)}\r\n          aria-invalid={showError}\r\n          aria-required={!!required}\r\n          aria-describedby={showError ? `${id}-error` : null}\r\n        />\r\n        <InputRightElement>\r\n          <Button size=\"sm\" onClick={() => setshowPassword(!showPassword)}>\r\n            {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n          </Button>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          üïµ {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import { useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useLogin = (config) => {\r\n  return useMutation(\r\n    ({ user, password }) => axios.post(\"login\", { user, password }),\r\n    config\r\n  );\r\n};\r\nexport const useSingup = (config) => {\r\n  return useMutation(\r\n    ({\r\n      cin,\r\n      email,\r\n      id_cms_privileges,\r\n      nom,\r\n      password,\r\n      prenom,\r\n      telephone,\r\n      sexes,\r\n      date_naissance,\r\n    }) =>\r\n      axios.post(\"singup\", {\r\n        cin,\r\n        email,\r\n        id_cms_privileges,\r\n        nom,\r\n        password,\r\n        prenom,\r\n        telephone,\r\n        sexes,\r\n        date_naissance,\r\n      }),\r\n    config\r\n  );\r\n};\r\n","import {\r\n  Center,\r\n  Radio,\r\n  RadioGroup,\r\n  Stack,\r\n  Spinner,\r\n  Button,\r\n  useToast,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport { MyField } from \"./../../../MyField\";\r\nimport {\r\n  isLength,\r\n  isPattern,\r\n  isNumber,\r\n  isEmail,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport { InputDate } from \"./../../../components/formInput/date\";\r\nimport { MyFieldPassword } from \"./../../../MyFieldPassword\";\r\nimport React, { useState } from \"react\";\r\nimport { useSingup } from \"./../../../services/api/auth\";\r\n\r\nconst AddNewPatient = (props) => {\r\n  const { medecin_id, addPatient } = props;\r\n  const [fonctionnalite, setFonctionnalite] = useState(\"patient\");\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const [sexes, setSexes] = useState(\"homme\");\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useSingup({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      res = res.data;\r\n      if (res.api_status == 1) {\r\n        if (res.exists) {\r\n          toast({\r\n            title: res.elementExists + \" existe d√©ja\",\r\n            description: \"choisir un autre \" + res.elementExists + \" üí≠\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \" ‚ú® \",\r\n            description: \"üéâ Compte a √©t√© enregistr√©\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n          addPatient({ medecin_id, patient_id: res.id });\r\n        }\r\n      }\r\n    },\r\n  });\r\n  const handleSubmit = (values) => {\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = fonctionnalite;\r\n    delete values.R_password;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Stack\r\n        maxW={400}\r\n        display={isLoading ? `none` : ``}\r\n        margin=\"auto\"\r\n        spacing={5}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={myForm.submit}>\r\n            <MyField\r\n              name=\"nom\"\r\n              label=\"Nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le nom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"prenom\"\r\n              label=\"Pr√©nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le prenom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"homme\" py={3} mx={5}>\r\n                      Homme üë®‚Äçü¶∞\r\n                    </Radio>\r\n                    <Radio value=\"femme\" py={3} mx={5}>\r\n                      Femme üë©‚Äçü¶∞\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n            <InputDate\r\n              name=\"date_naissance\"\r\n              label=\"Date de naissance\"\r\n              //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n            />\r\n\r\n            <MyField\r\n              name=\"email\"\r\n              label=\"E-mail\"\r\n              validations={[\r\n                {\r\n                  rule: isEmail(),\r\n                  message: \"Veuillez v√©rifier le format de l'E-mail\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.telephone,\r\n                  message: 'Le champ E-mail doit contenir \"@\" et \".\" ',\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"cin\"\r\n              label=\"C.I.N\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message: \"La carte d'identit√© ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.email || !!values.telephone,\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.email, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"telephone\"\r\n              label=\"T√©l√©phone\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.email,\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.cin, values.email],\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ \"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: isMinLength(6),\r\n                  message:\r\n                    \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"R_password\"\r\n              label=\"R√©p√©ter le mot de passe\"\r\n              required=\"Il est requis de compl√©ter le champ correspondant au r√©p√©ter mot de passe\"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: (val) => val == values.password,\r\n                  message: \"Le mot de passe r√©p√©t√© doit √™tre le m√™me.\",\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Cr√©er mon compte\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddNewPatient;\r\n","import { Box, Center } from \"@chakra-ui/layout\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Select2 } from \"../../../components/formInput/select\";\r\nimport { useState } from \"react\";\r\nimport { Text, Spinner, RadioGroup, Radio, Stack } from \"@chakra-ui/react\";\r\nimport { useCreateReservation } from \"../../../services/api/reservation\";\r\nimport { useRelation } from \"../../../services/api/relation\";\r\nimport AddNewPatient from \"./AddNewPatient\";\r\nconst BookingForm = (props) => {\r\n  const [NomPrenom, setNomPrenom] = useState(\"\");\r\n  const {\r\n    medecin_id,\r\n    refetchTask,\r\n    currentDateStart,\r\n    listPatientDashboardAPIRefetch,\r\n    cancelRef,\r\n    isOpen,\r\n    onClose,\r\n    end,\r\n    listPatient,\r\n  } = props;\r\n  const { mutate, isLoading } = useCreateReservation({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n      onClose();\r\n    },\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const { mutate: addPatient, isLoading: LodingaAddPatient } = useRelation({\r\n    onError: (error) => {\r\n      setErrorMessage(\"V√©rifier les informations de votre patient.\");\r\n    },\r\n    onSuccess: (res) => {\r\n      setErrorMessage(\"\");\r\n      setSearch(\"old\");\r\n      listPatientDashboardAPIRefetch();\r\n    },\r\n  });\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    if (search == \"new\") {\r\n      addPatient({ medecin_id, patient_id: values.user });\r\n    } else {\r\n      setNomPrenom(values.selectvalue.label);\r\n      restOfConfirmation(currentDateStart, end, values.selectvalue.value);\r\n    }\r\n  };\r\n\r\n  const [search, setSearch] = useState(\"old\");\r\n  const restOfConfirmation = (start, end, patient_id) => {\r\n    start = start.replace(\"T\", \" \") + \":00\";\r\n    mutate({\r\n      medecin_id,\r\n      patient_id,\r\n      etat: \"en attente\",\r\n      date_reservation: start,\r\n    });\r\n  };\r\n  return (\r\n    <Box>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent minW={{ md: \"700px\" }}>\r\n          <AlertDialogHeader>Confirmer la r√©servation</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <Spinner\r\n            display={!isLoading && !LodingaAddPatient ? `none` : ``}\r\n            size=\"xl\"\r\n            m=\"auto\"\r\n            color=\"red.500\"\r\n          />\r\n          <AlertDialogBody\r\n            display={isLoading || LodingaAddPatient ? `none` : ``}\r\n          >\r\n            <Center>\r\n              <RadioGroup onChange={setSearch} value={search}>\r\n                <Stack direction=\"row\">\r\n                  <Radio value=\"old\">Patient associ√© </Radio>\r\n                  <Radio value=\"new\">Patient non-associ√©</Radio>\r\n                  <Radio value=\"create\">Inscrire un patient</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </Center>\r\n            <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n              <form noValidate onSubmit={MyForm.submit}>\r\n                <Text pb={2} px={5}>\r\n                  {search != \"create\"\r\n                    ? `R√©servation d'un rendez-vous le ${\r\n                        currentDateStart.slice(0, 10) + \" \"\r\n                      } √† ${currentDateStart.slice(11, 19)} pour : `\r\n                    : ``}\r\n                  {search == \"new\" ? (\r\n                    <Box>\r\n                      <MyField\r\n                        name=\"user\"\r\n                        label=\"Email ou CIN ou Telephone\"\r\n                        required=\"email ou CIN or Telephone\"\r\n                      />\r\n                      <Text color=\"tomato\">{errorMessage}</Text>\r\n                    </Box>\r\n                  ) : search == \"old\" ? (\r\n                    <Select2\r\n                      required={\"S√©lect un patient.\"}\r\n                      data={listPatient}\r\n                      // label=\"Notre patient\"\r\n                      name=\"selectvalue\"\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )}\r\n                </Text>\r\n                {search != \"create\" ? (\r\n                  <AlertDialogFooter>\r\n                    <Button\r\n                      display={isLoading ? `none` : ``}\r\n                      ref={cancelRef}\r\n                      onClick={onClose}\r\n                    >\r\n                      Non\r\n                    </Button>\r\n                    <Button\r\n                      display={isLoading ? `none` : ``}\r\n                      disabled={!MyForm.isValid}\r\n                      type=\"submit\"\r\n                      ml={3}\r\n                    >\r\n                      Oui\r\n                    </Button>\r\n                  </AlertDialogFooter>\r\n                ) : (\r\n                  ``\r\n                )}\r\n              </form>\r\n            </Formiz>\r\n            {search == \"create\" ? (\r\n              <Box maxH=\"60vh\" w=\"100%\" overflowY=\"scroll\">\r\n                <AddNewPatient\r\n                  addPatient={addPatient}\r\n                  medecin_id={medecin_id}\r\n                />\r\n              </Box>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </AlertDialogBody>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\nexport default BookingForm;\r\n","import { useState, useRef } from \"react\";\r\nimport { Button, IconButton } from \"@chakra-ui/button\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/react\";\r\nconst G_Alert = (props) => {\r\n  const {\r\n    target,\r\n    fnTodo,\r\n    Header,\r\n    Body,\r\n    icon,\r\n    colorScheme,\r\n    bg,\r\n    btOK,\r\n    btNon,\r\n    submitcolor,\r\n  } = props;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  return (\r\n    <>\r\n      <IconButton\r\n        size=\"md\"\r\n        m={1}\r\n        bg={bg}\r\n        colorScheme={colorScheme}\r\n        fontSize=\"10px\"\r\n        icon={icon}\r\n        onClick={() => setIsOpen(true)}\r\n      />\r\n\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              {Header}\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>{Body}</AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose}>\r\n                {btNon}\r\n              </Button>\r\n\r\n              <Button\r\n                colorScheme={colorScheme}\r\n                onClick={() => {\r\n                  fnTodo(target);\r\n                  onClose();\r\n                }}\r\n                ml={3}\r\n              >\r\n                {btOK}\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </>\r\n  );\r\n};\r\nexport default G_Alert;\r\n","import { Box, Text, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst TextInfo = (props) => {\r\n  const { data, type } = props;\r\n  if (data == null) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Box>\r\n      <Text\r\n        fontSize=\"xl\"\r\n        borderBottom=\"1px\"\r\n        borderColor={mode(\"green.300\", \"gray.500\")}\r\n        px={2}\r\n        display=\"inline\"\r\n        color={mode(\"green.700\", \"gray.50\")}\r\n      >\r\n        {type}:\r\n      </Text>\r\n      <Text fontSize=\"xl\" px={2} display=\"inline\" color=\"gray.500\">\r\n        {data}\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\nexport default TextInfo;\r\n","import { usePatentInfo } from \"./../../services/api/patient information\";\r\nimport {\r\n  Center,\r\n  useToast,\r\n  Button,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n  Avatar,\r\n  Drawer,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  useColorModeValue as mode,\r\n  IconButton,\r\n  Text,\r\n  DrawerFooter,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport TextInfo from \"./_partials/text\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport { MdCall } from \"react-icons/md\";\r\n\r\nconst GeneralPatientsInformation = (props) => {\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const { patient } = props;\r\n  const toast = useToast();\r\n  const params = { cms_users_id: patient.id };\r\n  const { isLoading, refetch } = usePatentInfo({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setPatientInfo(res.data);\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  return (\r\n    <React.Fragment>\r\n      <Button colorScheme={mode(\"green\", \"blue\")} onClick={onOpen}>\r\n        <Tooltip\r\n          label={`Obtenez les informations g√©n√©rales sur ${patientInfo.nom} ${patientInfo.prenom}`}\r\n          aria-label={`Obtenez les informations g√©n√©rales sur ${patientInfo.nom} ${patientInfo.prenom}`}\r\n        >\r\n          Informations\r\n        </Tooltip>\r\n      </Button>\r\n      <Drawer placement=\"left\" size=\"md\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent bg={mode(\"green.50\", \"gray.700\")}>\r\n          <DrawerHeader borderBottomWidth=\"1px\">\r\n            Information de patient\r\n            <IconButton\r\n              float=\"right\"\r\n              variant=\"outline\"\r\n              size=\"xs\"\r\n              m={1}\r\n              colorScheme=\"red\"\r\n              fontSize=\"10px\"\r\n              icon={<CloseIcon />}\r\n              onClick={() => onClose()}\r\n            />\r\n          </DrawerHeader>\r\n          <DrawerBody display={!isLoading ? `none` : ``}>\r\n            <SkeletonCircle size=\"12\" />\r\n            <SkeletonText mt=\"7\" noOfLines={7} spacing=\"7\" />\r\n          </DrawerBody>\r\n          <DrawerBody display={isLoading ? `none` : ``}>\r\n            <Avatar\r\n              my={3}\r\n              size=\"xl\"\r\n              src={\r\n                !!patientInfo.photo\r\n                  ? `${link}${patientInfo.photo}`\r\n                  : `${link}${userImage}`\r\n              }\r\n              name={patient.nomprenom}\r\n            />\r\n            <TextInfo data={patientInfo.nom} type=\"Nom\" />\r\n            <TextInfo data={patientInfo.prenom} type=\"Prenom\" />\r\n            <TextInfo data={patientInfo.cin} type=\"C.I.N\" />\r\n            <TextInfo data={patientInfo.Date_Naissance} type=\"Date naissance\" />\r\n            <TextInfo data={patientInfo.email} type=\"E-mail\" />\r\n            {!!patientInfo.email ? (\r\n              <Text as=\"a\" href={\"mailto:\" + patientInfo.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <TextInfo data={patientInfo.sexes} type=\"Sexe\" />\r\n            <TextInfo data={patientInfo.telephone} type=\"Telephone\" />\r\n\r\n            {!!patientInfo.telephone ? (\r\n              <Text\r\n                display=\"block\"\r\n                as=\"a\"\r\n                href={\"tel:\" + patientInfo.telephone}\r\n              >\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            ) : (\r\n              ``\r\n            )}\r\n          </DrawerBody>\r\n          <DrawerFooter>\r\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n              Annuler\r\n            </Button>\r\n          </DrawerFooter>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GeneralPatientsInformation;\r\n","import {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  Heading,\r\n  Link as LinkChakra,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useRef, useContext, useState } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useDeleteReservation,\r\n  useValideReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport { TableContent } from \"./../table/TableContent\";\r\nimport { TablePagination } from \"./../table/TablePagination\";\r\nimport { CheckIcon, CloseIcon } from \"@chakra-ui/icons\";\r\nimport G_Alert from \"./../general alert\";\r\nimport { useSendPatientToWaitingRoomEnligne } from \"../../services/api/manageTheRoom\";\r\nimport GeneralPatientsInformation from \"./../general patients information/index\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\n\r\nconst ConfirmerUnRendezVous = (props) => {\r\n  const { refetchDashboard } = props;\r\n  const { user } = useContext(TbibyContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([]);\r\n  const [header, setHeader] = useState([\"nom prenom\", \"Date\"]);\r\n  const { mutate: SPTWRMutate, isLoading: SPTWRIsLoading } =\r\n    useSendPatientToWaitingRoomEnligne({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchDashboard();\r\n        refetchlist();\r\n      },\r\n    });\r\n  const params = { medecin_id: user.id };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchlist();\r\n        refetchDashboard();\r\n      },\r\n    });\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const [fntable, setFntable] = useState({\r\n    fn2: (data) => (\r\n      <G_Alert\r\n        Header=\"Supprimer la proposition r√©servation\"\r\n        Body={`Voulez-vous vraiment supprimer cette proposition de r√©servation avec ${data.nomprenom}`}\r\n        icon={<CloseIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"red.300\"\r\n        target={{ id: data.idR }}\r\n        fnTodo={DeleteMutate}\r\n        btOK=\"Effacer\"\r\n        btNon=\"Annuler\"\r\n      />\r\n      // <Button mx={1} onClick={() => console.log(data.id)}>\r\n      //   remove\r\n      // </Button>\r\n    ),\r\n    fn: (data) => (\r\n      <G_Alert\r\n        Header=\"Valider la r√©servation\"\r\n        Body={`Voulez-vous vraiment valider cette proposition de r√©servation avec ${data.nomprenom}`}\r\n        icon={<CheckIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"green.300\"\r\n        target={{ id: data.idR, etat: \"en attente\", state: \"valide\" }}\r\n        fnTodo={SPTWRMutate}\r\n        btOK=\"Valide\"\r\n        submitcolor=\"gray.50\"\r\n        btNon=\"Annuler\"\r\n      />\r\n    ),\r\n    fn3: (data) => <GeneralPatientsInformation patient={data} />,\r\n  });\r\n  const { isLoading, refetch: refetchlist } = useValideReservation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n      refetchDashboard();\r\n    },\r\n  });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucune r√©servation de la part d'aucun patient\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        position=\"absolute\"\r\n        bottom=\"7%\"\r\n        right=\"4%\"\r\n        ref={btnRef}\r\n        colorScheme=\"teal\"\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? `` : `Valider un rendez vous `}\r\n        {content == [] ? `üì´` : `üì™`}\r\n      </Button>\r\n      <Drawer\r\n        size=\"lg\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>üì´ Valider un rendez vous </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <Box display={isLoading ? `none` : ``}>\r\n                <TableContent\r\n                  header={header}\r\n                  content={content}\r\n                  fntable={fntable}\r\n                  message={message}\r\n                />\r\n                <TablePagination\r\n                  total={total}\r\n                  next_page_url={next}\r\n                  prev_page_url={prev}\r\n                  page={page}\r\n                  setPage={setPage}\r\n                />\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default ConfirmerUnRendezVous;\r\n","import { useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const usePatientEntrer = (config) => {\r\n  return useMutation(\r\n    ({ id, etat }) => axios.post(\"pe\", { id, etat: \"patient avec le m√©decin\" }),\r\n    config\r\n  );\r\n};\r\nexport const useSendPatientToWaitingRoom = (config) => {\r\n  return useMutation(\r\n    ({ id, etat }) => axios.post(\"sptwr\", { id, etat: \"en attente\" }),\r\n    config\r\n  );\r\n};\r\nexport const useSendPatientToWaitingRoomEnligne = (config) => {\r\n  return useMutation(\r\n    ({ id, etat, state }) =>\r\n      axios.post(\"sptwr\", { id, etat: \"en attente\", state }),\r\n    config\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Spinner, Tooltip } from \"@chakra-ui/react\";\r\n\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport Calendar from \"./../../components/calendar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n\r\nimport BookingForm from \"./bookingForm\";\r\nimport { useListPatientDashboardAPI } from \"../../services/api/listPatientDashboard/inde\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport { usePatientEntrer } from \"./../../services/api/manageTheRoom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ConfirmerUnRendezVous from \"./../../components/confirmer un rendez vous\";\r\nimport {\r\n  useReservationMListe,\r\n  useUpdateReservation,\r\n  useDeleteReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { InputDate } from \"../../components/formInput/date\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nconst CalendarDashboardMedecin = () => {\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const [task, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n\r\n  const id = user.idMedecin || user.id;\r\n  const [params, setParams] = useState({ medecin_id: id });\r\n  const { mutate: EnteredMutate, isLoading: PatientEntrerIsLoading } =\r\n    usePatientEntrer({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n        if (user.fonctionnalite == \"medecin\") {\r\n          history.push(\"/dashboard/consultation\");\r\n        }\r\n      },\r\n    });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { mutate, isLoading: isLoadingUpdate } = useUpdateReservation({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n    },\r\n  });\r\n  const { isLoading, refetch: refetchTask } = useReservationMListe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\r\n  const cancelRef = React.useRef();\r\n  const [end, setend] = useState(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [listPatient, setListPatient] = useState([]);\r\n  const {\r\n    isLoading: listPatientDashboardAPIIsLoading,\r\n    refetch: listPatientDashboardAPIRefetch,\r\n  } = useListPatientDashboardAPI({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setListPatient(res.data);\r\n    },\r\n  });\r\n\r\n  const addtask = (event, start, end) => {\r\n    event.stopPropagation();\r\n    setend(end);\r\n    setCurrentDateStart(start);\r\n    onOpen();\r\n  };\r\n  const updateTask = (element) => {\r\n    mutate({\r\n      id: element.draggableId,\r\n      date_reservation:\r\n        element.destination.droppableId.replace(\"T\", \" \") + \":00\",\r\n    });\r\n  };\r\n\r\n  //view\r\n  const [daysView, setDaysView] = useState(1);\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n\r\n  const handleSubmit = (values) => {};\r\n  return (\r\n    <Box>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <Spinner\r\n          display={\r\n            !isLoadingUpdate && !DeleteIsLoading && !PatientEntrerIsLoading\r\n              ? `none`\r\n              : ``\r\n          }\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box\r\n          display={\r\n            isLoadingUpdate || DeleteIsLoading || PatientEntrerIsLoading\r\n              ? `none`\r\n              : ``\r\n          }\r\n        >\r\n          <Flex py={2}>\r\n            <Button\r\n              colorScheme=\"green\"\r\n              ml={2}\r\n              onClick={() => addDays(date, daysView * -1)}\r\n            >\r\n              <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n                <ArrowLeftIcon />\r\n              </Tooltip>\r\n            </Button>\r\n            <Spacer />\r\n            {!isMobile ? (\r\n              <Tooltip\r\n                label=\"Affich√© en mode 1 jours\"\r\n                aria-label=\"Affich√© en mode 1 jours\"\r\n              >\r\n                <Button mx={2} onClick={() => setDaysView(1)}>\r\n                  Par 1 jour\r\n                </Button>\r\n              </Tooltip>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Box w=\"120px\" position=\"relative\" top=\"-7px\" mx={2}>\r\n              <InputDate SyncWithVariable={setDate} name=\"date\" />\r\n            </Box>\r\n            <Tooltip\r\n              label=\"Aller √† aujourd'hui\"\r\n              aria-label=\"Aller √† aujourd'hui\"\r\n            >\r\n              <Button\r\n                mx={2}\r\n                onClick={() => {\r\n                  setDate(new Date());\r\n                }}\r\n              >\r\n                Aujourd'hui\r\n              </Button>\r\n            </Tooltip>\r\n\r\n            <ConfirmerUnRendezVous refetchDashboard={refetchTask} />\r\n            {!isMobile ? (\r\n              <Tooltip\r\n                label=\"Affich√© en mode 2 jours\"\r\n                aria-label=\"Affich√© en mode 2 jours\"\r\n              >\r\n                <Button mx={2} onClick={() => setDaysView(2)}>\r\n                  Par 2 jour\r\n                </Button>\r\n              </Tooltip>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Spacer />\r\n            <Button\r\n              colorScheme=\"green\"\r\n              mr={2}\r\n              onClick={() => addDays(date, daysView)}\r\n            >\r\n              <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n                <ArrowRightIcon />\r\n              </Tooltip>\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n        <Calendar\r\n          EnteredMutate={EnteredMutate}\r\n          usertype={user.fonctionnalite}\r\n          DeleteMutate={DeleteMutate}\r\n          task={task}\r\n          setTask={setTask}\r\n          date={date}\r\n          rowNumber={daysView}\r\n          updateTask={updateTask}\r\n          addtask={addtask}\r\n        />\r\n\r\n        <BookingForm\r\n          listPatientDashboardAPIRefetch={listPatientDashboardAPIRefetch}\r\n          listPatient={listPatient}\r\n          currentDateStart={currentDateStart}\r\n          cancelRef={cancelRef}\r\n          onClose={onClose}\r\n          isOpen={isOpen}\r\n          refetchTask={refetchTask}\r\n          medecin_id={id}\r\n          setTask={setTask}\r\n          end={end}\r\n        />\r\n      </Formiz>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CalendarDashboardMedecin;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useListPatientDashboardAPI = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"listpatientdashboard\", params],\r\n    () => axios.get(\"listpatientdashboard\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\n\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport Calendar from \"./../../components/calendar\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport {\r\n  useListReservation,\r\n  useDeleteReservation,\r\n} from \"../../services/api/reservation\";\r\nimport { InputDate } from \"../../components/formInput/date\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\n\r\nconst CalendarDashboardPatient = () => {\r\n  const toast = useToast();\r\n  const { user } = useContext(TbibyContext);\r\n  const [task, setTask] = useState([]);\r\n\r\n  const params = { patient_id: user.id };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { isLoading, refetch: refetchTask } = useListReservation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const [end, setend] = useState(\"\");\r\n\r\n  const addtask = (event, start, end) => {};\r\n  const updateTask = (element) => {\r\n    toast({\r\n      title: \"Vous ne pouvez pas changer votre r√©servation\",\r\n      description: \" Vous devez appelez votre m√©decin pour le faire\",\r\n      status: \"success\",\r\n      duration: `4000`,\r\n      isClosable: true,\r\n    });\r\n  };\r\n\r\n  //view\r\n  const [daysView, setDaysView] = useState(1);\r\n  const [date, setDate] = useState(new Date());\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n  const handleSubmit = (values) => {};\r\n\r\n  return (\r\n    <Box>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <Spinner\r\n          display={!DeleteIsLoading ? `none` : ``}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={DeleteIsLoading ? `none` : ``}>\r\n          <Flex py={2}>\r\n            <Button\r\n              ml={2}\r\n              colorScheme=\"green\"\r\n              onClick={() => addDays(date, daysView * -1)}\r\n            >\r\n              <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n                <ArrowLeftIcon />\r\n              </Tooltip>\r\n            </Button>\r\n            <Spacer />\r\n            {!isMobile ? (\r\n              <Button mx={2} onClick={() => setDaysView(1)}>\r\n                Par jour\r\n              </Button>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Box w=\"120px\" position=\"relative\" top=\"-7px\" mx={2}>\r\n              <InputDate SyncWithVariable={setDate} name=\"date\" />\r\n            </Box>\r\n            <Button mx={2} onClick={() => setDate(new Date())}>\r\n              Aujourd'hui\r\n            </Button>\r\n            {!isMobile ? (\r\n              <Button mx={2} onClick={() => setDaysView(2)}>\r\n                Par 2 jour\r\n              </Button>\r\n            ) : (\r\n              ``\r\n            )}\r\n            <Spacer />\r\n            <Button\r\n              colorScheme=\"green\"\r\n              mr={2}\r\n              onClick={() => addDays(date, daysView)}\r\n            >\r\n              <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n                <ArrowRightIcon />\r\n              </Tooltip>\r\n            </Button>\r\n          </Flex>\r\n        </Box>\r\n        <Calendar\r\n          usertype={user.fonctionnalite}\r\n          DeleteMutate={DeleteMutate}\r\n          task={task}\r\n          setTask={setTask}\r\n          date={date}\r\n          rowNumber={daysView}\r\n          updateTask={updateTask}\r\n          addtask={addtask}\r\n        />\r\n      </Formiz>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CalendarDashboardPatient;\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport { Box, Center } from \"@chakra-ui/layout\";\r\nimport CalendarDashboardMedecin from \"./medecin\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport CalendarDashboardPatient from \"./patient\";\r\nimport { Radio, RadioGroup } from \"@chakra-ui/react\";\r\nimport { Stack } from \"@chakra-ui/react\";\r\n\r\nconst CalendarDashboard = () => {\r\n  const [calendarType, setCalendarType] = useState(\"cabine\");\r\n  const { user } = useContext(TbibyContext);\r\n  if (user.fonctionnalite == \"secretaire\") {\r\n    return (\r\n      <Box>\r\n        <Center>\r\n          <RadioGroup onChange={setCalendarType} value={calendarType}>\r\n            <Stack direction=\"row\" spacing={50}>\r\n              <Radio value=\"cabine\">cabine </Radio>\r\n              <Radio value=\"moi\">moi</Radio>\r\n            </Stack>\r\n          </RadioGroup>\r\n        </Center>\r\n        {calendarType == \"cabine\" ? (\r\n          <CalendarDashboardMedecin />\r\n        ) : (\r\n          <CalendarDashboardPatient />\r\n        )}\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box>\r\n        {user.fonctionnalite == \"medecin\" ? (\r\n          <CalendarDashboardMedecin />\r\n        ) : (\r\n          <CalendarDashboardPatient />\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n};\r\n\r\nexport default CalendarDashboard;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { useState, useContext } from \"react\";\r\nimport { Text, Spinner } from \"@chakra-ui/react\";\r\nimport { usePatientCreateReservation } from \"./../../../../services/api/reservation\";\r\nimport { TbibyContext } from \"./../../../../router/context\";\r\nconst BookingFormReserve = (props) => {\r\n  const [NomPrenom, setNomPrenom] = useState(\"\");\r\n  const {\r\n    medecin_id,\r\n    refetchTask,\r\n    currentDateStart,\r\n    cancelRef,\r\n    isOpen,\r\n    onClose,\r\n    data,\r\n    end,\r\n  } = props;\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { mutate, isLoading } = usePatientCreateReservation({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n      onClose();\r\n    },\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    restOfConfirmation(currentDateStart, end, user.id);\r\n  };\r\n\r\n  const [search, setSearch] = useState(\"old\");\r\n  const restOfConfirmation = (start, end, patient_id) => {\r\n    start = start.replace(\"T\", \" \") + \":00\";\r\n    mutate({\r\n      medecin_id: data.id,\r\n      patient_id,\r\n      etat: \"en ligne\",\r\n      date_reservation: start,\r\n    });\r\n  };\r\n  return (\r\n    <Box>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent>\r\n          <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n            <form noValidate onSubmit={MyForm.submit}>\r\n              <AlertDialogHeader>Confirmer la r√©servation</AlertDialogHeader>\r\n              <AlertDialogCloseButton />\r\n              <Spinner\r\n                display={!isLoading ? `none` : ``}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <AlertDialogBody display={isLoading ? `none` : ``}>\r\n                <Text pb={2} px={5}>\r\n                  R√©servation d'un rendez-vous le{\" \"}\r\n                  {currentDateStart.slice(0, 10) + \" \"}√†\r\n                  {\" \" + currentDateStart.slice(11, 19)}?\r\n                </Text>\r\n              </AlertDialogBody>\r\n              <AlertDialogFooter>\r\n                <Button\r\n                  display={isLoading ? `none` : ``}\r\n                  ref={cancelRef}\r\n                  onClick={onClose}\r\n                >\r\n                  Non\r\n                </Button>\r\n                <Button\r\n                  display={isLoading ? `none` : ``}\r\n                  disabled={!MyForm.isValid}\r\n                  type=\"submit\"\r\n                  ml={3}\r\n                >\r\n                  Oui\r\n                </Button>\r\n              </AlertDialogFooter>\r\n            </form>\r\n          </Formiz>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n};\r\nexport default BookingFormReserve;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { BsBoxArrowInRight } from \"react-icons/bs\";\r\nimport {\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n} from \"@chakra-ui/popover\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport { useState, useRef, useContext } from \"react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { TbibyContext } from \"./../../../../router/context/index\";\r\nimport Alert from \"./../../../calendar/taks/alert\";\r\n\r\nconst TaskReserve = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n  const [isOpenRemove, setIsOpenRemove] = useState(false);\r\n  const onCloseRemove = () => setIsOpenRemove(false);\r\n  const cancelRefRemove = useRef();\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { taskvalue, task, setTask, DeleteMutate, EnteredMutate, usertype } =\r\n    props;\r\n\r\n  const Entered = (event) => {\r\n    event.stopPropagation();\r\n    EnteredMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const remove = (event) => {\r\n    event.stopPropagation();\r\n    DeleteMutate({ id: taskvalue.id });\r\n    onClose();\r\n  };\r\n  const detail = (event) => {\r\n    event.stopPropagation();\r\n  };\r\n  const getItemStyle = (isDragging, draggableStyle) => ({\r\n    ...draggableStyle,\r\n    userSelect: \"none\",\r\n    padding: 3,\r\n    margin: `0 0 0px 0`,\r\n  });\r\n\r\n  if (user.nom + \" \" + user.prenom == taskvalue.nomprenom) {\r\n    if (taskvalue.etat == \"en attente\") {\r\n      return (\r\n        <>\r\n          <Box\r\n            border=\"2px\"\r\n            borderRadius=\"20px\"\r\n            bgColor=\"green.200\"\r\n            borderColor=\"green.200\"\r\n            mx={3}\r\n            px={2}\r\n            children={\r\n              <Box color=\"gray.800\" fontSize=\"17px\">\r\n                {taskvalue.nomprenom}\r\n              </Box>\r\n            }\r\n          />\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <Draggable\r\n          key={taskvalue.id}\r\n          draggableId={taskvalue.id.toString()}\r\n          index={taskvalue.id}\r\n        >\r\n          {(provided, snapshot) => (\r\n            <Popover>\r\n              <PopoverTrigger>\r\n                <Box\r\n                  onClick={(event) => detail(event)}\r\n                  ref={provided.innerRef}\r\n                  {...provided.draggableProps}\r\n                  {...provided.dragHandleProps}\r\n                  style={\r\n                    (\"none\",\r\n                    getItemStyle(\r\n                      snapshot.isDragging,\r\n                      provided.draggableProps.style\r\n                    ))\r\n                  }\r\n                  border=\"2px\"\r\n                  borderRadius=\"20px\"\r\n                  bgColor={snapshot.isDragging ? `#3b8a5b` : `#b3e6c8`}\r\n                  borderColor=\"green.200\"\r\n                  mx={3}\r\n                  px={2}\r\n                  children={\r\n                    <Box color=\"gray.800\" fontSize=\"17px\">\r\n                      <Alert\r\n                        Header=\"Supprimer la r√©servation\"\r\n                        Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${taskvalue.nomprenom}`}\r\n                        icon={<CloseIcon />}\r\n                        colorScheme=\"teal\"\r\n                        bg=\"red.300\"\r\n                        fnTodo={remove}\r\n                        btOK=\"Effacer\"\r\n                        btNon=\"Annuler\"\r\n                        isOpen={isOpen}\r\n                        setIsOpen={setIsOpen}\r\n                        onClose={onClose}\r\n                        cancelRef={cancelRef}\r\n                      />\r\n                      {taskvalue.nomprenom}\r\n                      {usertype == \"medecin\" ? (\r\n                        <Alert\r\n                          Header=\"Confirmer\"\r\n                          Body={`Voulez-vous confirmer que ${taskvalue.nomprenom} d√©butera sa consultation ? `}\r\n                          icon={<BsBoxArrowInRight />}\r\n                          bg=\"blue.300\"\r\n                          btOK=\"oui\"\r\n                          btNon=\"Non\"\r\n                          fnTodo={Entered}\r\n                          isOpen={isOpenRemove}\r\n                          setIsOpen={setIsOpenRemove}\r\n                          onClose={onCloseRemove}\r\n                          cancelRef={cancelRefRemove}\r\n                        />\r\n                      ) : null}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </PopoverTrigger>\r\n              <PopoverContent bg={mode(\"green.50\", \"gray.800\")}>\r\n                <PopoverHeader fontWeight=\"semibold\">\r\n                  {taskvalue.nomprenom}\r\n                </PopoverHeader>\r\n                <PopoverBody>\r\n                  Votre rendez-vous est le {taskvalue.start.slice(0, 10) + \" \"}√†\r\n                  {\" \" + taskvalue.start.slice(11, 19)}\r\n                </PopoverBody>\r\n              </PopoverContent>\r\n            </Popover>\r\n          )}\r\n        </Draggable>\r\n      );\r\n    }\r\n  } else {\r\n    return (\r\n      <>\r\n        <Box\r\n          border=\"2px\"\r\n          borderRadius=\"20px\"\r\n          bgColor=\"green.200\"\r\n          borderColor=\"green.200\"\r\n          mx={3}\r\n          px={2}\r\n          children={\r\n            <Box color=\"gray.800\" fontSize=\"17px\">\r\n              Patiente\r\n            </Box>\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n};\r\nexport default TaskReserve;\r\n","import { Box, Flex, Text } from \"@chakra-ui/layout\";\r\nimport { Grid } from \"@chakra-ui/layout\";\r\nimport { GridItem } from \"@chakra-ui/layout\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nimport TaskReserve from \"../taks\";\r\n\r\nconst TimeElementReserve = (props) => {\r\n  const {\r\n    usertype,\r\n    HoursValue,\r\n    key,\r\n    value,\r\n    DeleteMutate,\r\n    addtask,\r\n    task,\r\n    EnteredMutate,\r\n    setTask,\r\n  } = props;\r\n\r\n  return (\r\n    <Box\r\n      key={key}\r\n      h=\"160px\"\r\n      fontSize=\"20px\"\r\n      border=\"1px\"\r\n      borderColor={mode(\"green.200\", \"gray.800\")}\r\n    >\r\n      <Grid\r\n        h=\"100%\"\r\n        templateRows=\"repeat(4, 1fr)\"\r\n        border=\"3px\"\r\n        borderColor=\"red.200\"\r\n        gap={0}\r\n      >\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"00\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.50\", \"gray.600\")}\r\n              // bgColor={snapshot.isDraggingOver ? \"green.100\" : `gray.50`}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"00\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"00\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"00\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"15\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.100\", \"gray.700\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"15\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"15\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"15\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"30\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.200\", \"gray.800\")}\r\n              maxH=\"40px\"\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"30\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"30\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"30\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n        <Droppable\r\n          droppableId={\r\n            value.toISOString().slice(0, 10) +\r\n            \"T\" +\r\n            HoursValue.slice(0, 3) +\r\n            \"45\"\r\n          }\r\n        >\r\n          {(provided, snapshot) => (\r\n            <GridItem\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              bgColor={mode(\"green.300\", \"gray.900\")}\r\n              color={mode(\"green.800\", \"gray.300\")}\r\n              maxH=\"40px\"\r\n              onClick={(event) =>\r\n                addtask(\r\n                  event,\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\",\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    (parseInt(HoursValue.slice(0, 2)) < 9)\r\n                    ? `0${parseInt(HoursValue.slice(0, 2)) + 1}:00`\r\n                    : parseInt(HoursValue.slice(0, 2)) + 1 + \":00\"\r\n                )\r\n              }\r\n              borderBottom=\"1px\"\r\n              id={\r\n                value.toISOString().slice(0, 10) +\r\n                \"T\" +\r\n                HoursValue.slice(0, 3) +\r\n                \"45\"\r\n              }\r\n              //   bgColor=\"gray.50\"\r\n              borderColor=\"gray.200\"\r\n            >\r\n              <Flex>\r\n                <Text fontSize=\"xs\">{HoursValue.slice(0, 3) + \"45\"}</Text>\r\n                {task.map((taskvalue) =>\r\n                  taskvalue.start ===\r\n                  value.toISOString().slice(0, 10) +\r\n                    \"T\" +\r\n                    HoursValue.slice(0, 3) +\r\n                    \"45\" ? (\r\n                    <TaskReserve\r\n                      usertype={usertype}\r\n                      EnteredMutate={EnteredMutate}\r\n                      DeleteMutate={DeleteMutate}\r\n                      key={taskvalue.id}\r\n                      task={task}\r\n                      setTask={setTask}\r\n                      taskvalue={taskvalue}\r\n                    />\r\n                  ) : (\r\n                    ``\r\n                  )\r\n                )}\r\n                {provided.placeholder}\r\n              </Flex>\r\n            </GridItem>\r\n          )}\r\n        </Droppable>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\nexport default TimeElementReserve;\r\n","import { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport TimeElementReserve from \"./calendar/timeElement/index\";\r\nfunction CalendarReservePara(props) {\r\n  const {\r\n    usertype,\r\n    EnteredMutate,\r\n    rowNumber,\r\n    date,\r\n    DeleteMutate,\r\n    task,\r\n    updateTask,\r\n    setTask,\r\n    addtask,\r\n  } = props;\r\n\r\n  //const [, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const Hours = [\r\n    // \"00:00\",\r\n    // \"01:00\",\r\n    // \"02:00\",\r\n    // \"03:00\",\r\n    // \"04:00\",\r\n    // \"05:00\",\r\n    // \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    // \"19:00\",\r\n    // \"20:00\",\r\n    // \"21:00\",\r\n    // \"22:00\",\r\n    // \"23:00\",\r\n  ];\r\n\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n\r\n  const contenu = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    contenu.push(\r\n      <Box>\r\n        <Center\r\n          w=\"100%\"\r\n          key={index}\r\n          border=\"1px\"\r\n          borderColor={mode(\"green.200\", \"gray.800\")}\r\n          bgColor={mode(\"green.300\", \"gray.600\")}\r\n          color={mode(\"green.800\", \"gray.50\")}\r\n          h={10}\r\n          align=\"center\"\r\n        >\r\n          {value.toISOString().slice(0, 10)}\r\n        </Center>\r\n        {Hours.map((HoursValue) => (\r\n          <TimeElementReserve\r\n            EnteredMutate={EnteredMutate}\r\n            usertype={usertype}\r\n            DeleteMutate={DeleteMutate}\r\n            key={HoursValue.slice(0, 4)}\r\n            HoursValue={HoursValue}\r\n            value={value}\r\n            addtask={addtask}\r\n            task={task}\r\n            setTask={setTask}\r\n          />\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Grid templateColumns=\"repeat(10, 1fr)\" gap={0}>\r\n        <GridItem colSpan={1}>\r\n          <Box\r\n            w=\"100%\"\r\n            border=\"1px\"\r\n            bgColor={mode(\"green.300\", \"gray.600\")}\r\n            borderColor={mode(\"green.200\", \"gray.800\")}\r\n          >\r\n            <Center h={10} align=\"center\"></Center>\r\n            {Hours.map((value) => (\r\n              <Center\r\n                border=\"1px\"\r\n                borderColor={mode(\"green.200\", \"gray.800\")}\r\n                bgColor={mode(\"green.300\", \"gray.600\")}\r\n                color={mode(\"green.800\", \"gray.50\")}\r\n                h=\"160px\"\r\n                key={value}\r\n                px={2}\r\n                fontSize=\"20px\"\r\n              >\r\n                {value}\r\n              </Center>\r\n            ))}\r\n          </Box>\r\n        </GridItem>\r\n        <GridItem colSpan={9} w=\"100%\">\r\n          <Grid\r\n            w=\"100%\"\r\n            templateColumns={\"repeat(\" + parseInt(rowNumber) + \", 1fr)\"}\r\n            gap={0}\r\n          >\r\n            <DragDropContext onDragEnd={(result) => updateTask(result)}>\r\n              {contenu}\r\n            </DragDropContext>\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CalendarReservePara;\r\n","import { useUpdateReservation } from \"../../../services/api/reservation\";\r\nimport { useToast, Button, Tooltip } from \"@chakra-ui/react\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { Box, Spacer, Flex } from \"@chakra-ui/layout\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  useDeleteReservation,\r\n  useListReservationEnLigne,\r\n} from \"./../../../services/api/reservation\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport BookingFormReserve from \"./bookingForm/index\";\r\nimport CalendarReservePara from \"./../calendar\";\r\nimport { TbibyContext } from \"./../../../router/context/index\";\r\nconst CalendarReserve = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const { data } = props;\r\n  const params = { medecin_id: data.id, patient_id: user.id };\r\n  const toast = useToast();\r\n  const [task, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  const [date, setDate] = useState(new Date());\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const [daysView, setDaysView] = useState(1);\r\n  const [end, setend] = useState(\"\");\r\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef();\r\n\r\n  const { isLoading, refetch: refetchTask } = useListReservationEnLigne({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      for (let i in res.data) {\r\n        res.data[i].start = res.data[i].start.replace(\" \", \"T\").slice(0, -3);\r\n      }\r\n      setTask(res.data);\r\n    },\r\n  });\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    setDate(result);\r\n  };\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetchTask();\r\n      },\r\n    });\r\n\r\n  const { mutate, isLoading: isLoadingUpdate } = useUpdateReservation({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      refetchTask();\r\n    },\r\n  });\r\n  const updateTask = (element) => {\r\n    mutate({\r\n      id: element.draggableId,\r\n      date_reservation:\r\n        element.destination.droppableId.replace(\"T\", \" \") + \":00\",\r\n    });\r\n  };\r\n\r\n  const addtask = (event, start, end) => {\r\n    event.stopPropagation();\r\n    setend(end);\r\n    setCurrentDateStart(start);\r\n    onOpen();\r\n  };\r\n  return (\r\n    <Box>\r\n      <Spinner\r\n        display={!isLoadingUpdate && !DeleteIsLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box display={isLoadingUpdate || DeleteIsLoading ? `none` : ``}>\r\n        <Flex py={2}>\r\n          <Button\r\n            ml={2}\r\n            colorScheme=\"green\"\r\n            onClick={() => addDays(date, daysView * -1)}\r\n          >\r\n            <Tooltip label=\"Moin un jour\" aria-label=\"Moin un jour\">\r\n              <ArrowLeftIcon />\r\n            </Tooltip>\r\n          </Button>\r\n          <Spacer />\r\n          {!isMobile ? (\r\n            <Button mx={2} onClick={() => setDaysView(1)}>\r\n              Par jour\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n\r\n          <Button mx={2} onClick={() => setDate(new Date())}>\r\n            Aujourd'hui\r\n          </Button>\r\n          {!isMobile ? (\r\n            <Button mx={2} onClick={() => setDaysView(2)}>\r\n              Par 2 jour\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n          <Spacer />\r\n          <Button\r\n            mr={2}\r\n            colorScheme=\"green\"\r\n            onClick={() => addDays(date, daysView)}\r\n          >\r\n            <Tooltip label=\"Plus un jour\" aria-label=\"Plus un jour\">\r\n              <ArrowRightIcon />\r\n            </Tooltip>\r\n          </Button>\r\n        </Flex>\r\n      </Box>\r\n\r\n      <CalendarReservePara\r\n        usertype={\"reservie\"}\r\n        DeleteMutate={DeleteMutate}\r\n        task={task}\r\n        setTask={setTask}\r\n        date={date}\r\n        rowNumber={daysView}\r\n        updateTask={updateTask}\r\n        addtask={addtask}\r\n      />\r\n\r\n      <BookingFormReserve\r\n        data={data}\r\n        currentDateStart={currentDateStart}\r\n        cancelRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        refetchTask={refetchTask}\r\n        medecin_id={data.id}\r\n        setTask={setTask}\r\n        end={end}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\nexport default CalendarReserve;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useRef } from \"react\";\r\nimport CalendarReserve from \"./calendar/index\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiHomeHeart } from \"react-icons/bi\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nconst ReserverUnRendezVous = (props) => {\r\n  const { data } = props;\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = useRef();\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  return (\r\n    <>\r\n      <Tooltip\r\n        label=\"Consultez la salle d'attente\"\r\n        aria-label=\"Consultez la salle d'attente\"\r\n      >\r\n        <Button ref={btnRef} size=\"sm\" my={3} onClick={onOpen}>\r\n          {isMobile ? <BiHomeHeart fontSize=\"30px\" /> : `Rendez-vous `}\r\n        </Button>\r\n      </Tooltip>\r\n      <Drawer\r\n        size=\"full\"\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>\r\n              Salle d'attente {data.nom} {data.prenom} ü™ë{\" \"}\r\n            </DrawerHeader>\r\n\r\n            <DrawerBody>\r\n              <CalendarReserve data={data} />\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\nexport default ReserverUnRendezVous;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Stack,\r\n  FormControl,\r\n  Button,\r\n  Text,\r\n  ButtonGroup,\r\n  SimpleGrid,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useRelation } from \"../../../services/api/relation\";\r\nimport { TbibyContext } from \"../../../router/context\";\r\nconst AjoutMedecin = (props) => {\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n  const { refetch } = props;\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const { mutate, isLoading } = useRelation({\r\n    onError: (error) => {\r\n      setMessage(\r\n        \"V√©rifiez les informations de contact ou la liste que vous avez ins√©r√©es\"\r\n      );\r\n    },\r\n    onSuccess: (res) => {\r\n      setMessage(\"\");\r\n      refetch();\r\n    },\r\n  });\r\n  const myForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.patient_id = user.id;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={myForm.submit}>\r\n          <Stack\r\n            spacing=\"2\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <SimpleGrid columns={2} spacing={10} w=\"100%\">\r\n              <FormControl minW={{ md: \"320px\" }} id=\"search\">\r\n                <MyField\r\n                  name=\"medecin_id\"\r\n                  Placeholder=\"Entrez l'email ou le t√©l√©phone du m√©decin\"\r\n                />\r\n                <Text color=\"tomato\">{message}</Text>\r\n              </FormControl>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  position=\"relative\"\r\n                  top=\"8px\"\r\n                  type=\"submit\"\r\n                  fontSize=\"20px\"\r\n                  p={5}\r\n                  w=\"100%\"\r\n                >\r\n                  <Spinner display={!isLoading ? `none` : ``} color=\"red.500\" />\r\n                  Ajouter ü©∫\r\n                </Button>\r\n              </ButtonGroup>\r\n            </SimpleGrid>\r\n          </Stack>\r\n        </form>\r\n      </Formiz>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AjoutMedecin;\r\n","import { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\n\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Button,\r\n  Portal,\r\n  PopoverFooter,\r\n  Text,\r\n  Avatar,\r\n} from \"@chakra-ui/react\";\r\nconst MedecinInfo = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n  const { data } = props;\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Button mx={1}>\r\n          {isMobile ? <BiInfoCircle fontSize=\"30px\" /> : `Info`}\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <Portal>\r\n        <PopoverContent>\r\n          <PopoverArrow />\r\n          <PopoverHeader>\r\n            {data.nom && data.nom + \" \" + data.prenom}\r\n            {data.nomprenom && data.nomprenom}{\" \"}\r\n          </PopoverHeader>\r\n          <PopoverCloseButton />\r\n          <PopoverBody>\r\n            {data.photo && (\r\n              <Box>\r\n                <Avatar\r\n                  size=\"xl\"\r\n                  name={data.nom + \" \" + data.prenom}\r\n                  src={`${link}${data.photo}`}\r\n                />\r\n              </Box>\r\n            )}\r\n\r\n            {data.Adresse && <Text>Adresse : {data.Adresse} </Text>}\r\n            {data.Code_APCI && <Text>Code_APCI : {data.Code_APCI} </Text>}\r\n            {data.email && (\r\n              <Text as=\"a\" href={\"mailto:\" + data.email}>\r\n                <Button\r\n                  my={1}\r\n                  colorScheme=\"green\"\r\n                  leftIcon={<EmailIcon />}\r\n                  variant=\"outline\"\r\n                >\r\n                  Email\r\n                </Button>\r\n              </Text>\r\n            )}\r\n            {data.telephone && (\r\n              <Text display=\"block\" as=\"a\" href={\"tel:\" + data.telephone}>\r\n                <Button\r\n                  my={1}\r\n                  leftIcon={<MdCall />}\r\n                  colorScheme=\"green\"\r\n                  variant=\"outline\"\r\n                >\r\n                  Appeller\r\n                </Button>\r\n              </Text>\r\n            )}\r\n          </PopoverBody>\r\n          <PopoverFooter>\r\n            Ce sont des informations personnelles sur votre patient\r\n          </PopoverFooter>\r\n        </PopoverContent>\r\n      </Portal>\r\n    </Popover>\r\n  );\r\n};\r\nexport default MedecinInfo;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  useToast,\r\n  Spinner,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Button,\r\n  Avatar,\r\n  Text,\r\n  PopoverFooter,\r\n  Heading,\r\n  Link as LinkChakra,\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { TableContent } from \"../../components/table/TableContent\";\r\nimport { TablePagination } from \"../../components/table/TablePagination\";\r\nimport { TbibyContext } from \"../../router/context\";\r\nimport { useRelationPM } from \"./../../services/api/relation\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport ReserverUnRendezVous from \"../../components/reserver un rendez-vous\";\r\nimport AjoutMedecin from \"./_partials/AjoutMedecin\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\n\r\nconst MonMedecin = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"]]);\r\n\r\n  const params = { patient_id: user.id, page: page };\r\n  const { isLoading, refetch } = useRelationPM({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <MedecinInfo data={data} />,\r\n    fn2: (data) => <ReserverUnRendezVous data={data} />,\r\n  });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucun m√©decin dans votre liste.\r\n        </Heading>\r\n        <Text mt=\"4\" fontSize=\"lg\">\r\n          Si vous voulez trouver un m√©decin,entrer ses coordonn√©es dans le barre\r\n          ci-dessus\r\n        </Text>\r\n        <Text mt fontSize=\"lg\">\r\n          (C.I.N , E-mail, Num¬∞t√©l)\r\n        </Text>\r\n      </>\r\n    );\r\n  };\r\n  let header = [\"Nom Prenom\", \"domaine\"];\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <AjoutMedecin refetch={refetch} />\r\n\r\n          <Box>\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MonMedecin;\r\n","import { Box, Center, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport Alert from \"./../calendar/taks/alert\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nimport { useColorModeValue as mode, Heading } from \"@chakra-ui/react\";\r\n\r\nconst PatientsAtTheDoctor = (props) => {\r\n  const {\r\n    patientsWaiting,\r\n    setCurrentPatient,\r\n    DeleteMutate,\r\n    currentPatient,\r\n    SPTWRMutate,\r\n  } = props;\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const cancelRef = useRef();\r\n\r\n  const [isOpenWaiting, setIsOpenWaiting] = useState(false);\r\n  const onCloseWaiting = () => setIsOpenWaiting(false);\r\n  const cancelRefWaiting = useRef();\r\n\r\n  const removePatient = (event, target) => {\r\n    event.stopPropagation();\r\n\r\n    DeleteMutate({ id: target });\r\n    if (target == currentPatient.rendez_vous_id) {\r\n      setCurrentPatient({});\r\n    }\r\n    onClose();\r\n  };\r\n  const ToWaiting = (event, target) => {\r\n    event.stopPropagation();\r\n    SPTWRMutate({ id: target });\r\n    if (target == currentPatient.rendez_vous_id) {\r\n      setCurrentPatient({});\r\n    }\r\n    onCloseWaiting();\r\n  };\r\n  if (patientsWaiting.length != 0) {\r\n    return (\r\n      <SimpleGrid columns={{ base: 1, md: 3, lg: 5 }} spacing={2}>\r\n        {patientsWaiting.map((data) => (\r\n          <Box\r\n            _hover={{ cursor: \"pointer\" }}\r\n            bg={mode(\"green.100\", \"gray.800\")}\r\n            key={`${data.id}`}\r\n            borderRadius=\"20px\"\r\n            textAlign=\"center\"\r\n            p={2}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setCurrentPatient(data);\r\n            }}\r\n          >\r\n            {data.nomprenom}\r\n            <Box>\r\n              <Alert\r\n                hoverMassage=\"Supprimer la r√©servation\"\r\n                Header=\"Supprimer la r√©servation\"\r\n                Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${data.nomprenom}`}\r\n                icon={<CloseIcon w={4} h={4} />}\r\n                colorScheme=\"teal\"\r\n                bg=\"red.300\"\r\n                target={data.rendez_vous_id}\r\n                fnTodo={removePatient}\r\n                btOK=\"Effacer\"\r\n                btNon=\"Annuler\"\r\n                isOpen={isOpen}\r\n                setIsOpen={setIsOpen}\r\n                onClose={onClose}\r\n                cancelRef={cancelRef}\r\n              />\r\n              <Alert\r\n                hoverMassage=\"Envoyer cette patient √† la salle d'attente\"\r\n                Header=\"envoyer √† la salle d'attente\"\r\n                Body={`√ätes-vous s√ªr que vous voulez envoyer ${data.nomprenom} √† la salle d'attente`}\r\n                icon={<ExternalLinkIcon w={4} h={4} />}\r\n                colorScheme=\"teal\"\r\n                bg=\"green.300\"\r\n                target={data.rendez_vous_id}\r\n                fnTodo={ToWaiting}\r\n                btOK=\"Effacer\"\r\n                btNon=\"Annuler\"\r\n                isOpen={isOpenWaiting}\r\n                setIsOpen={setIsOpenWaiting}\r\n                onClose={onCloseWaiting}\r\n                cancelRef={cancelRefWaiting}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        ))}\r\n      </SimpleGrid>\r\n    );\r\n  } else {\r\n    return (\r\n      <Center>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Aucun patient pour le moment\r\n        </Heading>\r\n      </Center>\r\n    );\r\n  }\r\n};\r\nexport default PatientsAtTheDoctor;\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Textarea,\r\n} from \"@chakra-ui/react\";\r\nexport const TextareaForm = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Textarea\r\n        id={id}\r\n        type={type || \"text\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const Prix = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } = useField(\r\n    props\r\n  );\r\n  const { label, type, required, note, Placeholder, dtValue } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <Input\r\n        min={0}\r\n        id={id}\r\n        type={type || \"number\"}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(e) =>\r\n          e.target.value < 0 ? setValue(0) : setValue(e.target.value)\r\n        }\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      />\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","const AddElement = {\r\n  // @Required\r\n  // plugin name\r\n  name: \"Element\",\r\n\r\n  // @Required\r\n  // data display\r\n  display: \"submenu\",\r\n\r\n  // @Required\r\n  // add function - It is called only once when the plugin is first run.\r\n  // This function generates HTML to append and register the event.\r\n  // arguments - (core : core object, targetElement : clicked button element)\r\n  add: function (core, targetElement) {\r\n    // Generate submenu HTML\r\n    // Always bind \"core\" when calling a plugin function\r\n    let listDiv = this.setSubmenu.call(core);\r\n\r\n    // You must bind \"core\" object when registering an event.\r\n    /** add event listeners */\r\n    var self = this;\r\n    listDiv.querySelectorAll(\".se-btn-list\").forEach(function (btn) {\r\n      btn.addEventListener(\"click\", self.onClick.bind(core));\r\n    });\r\n\r\n    // @Required\r\n    // You must add the \"submenu\" element using the \"core.initMenuTarget\" method.\r\n    /** append target button menu */\r\n    core.initMenuTarget(this.name, targetElement, listDiv);\r\n  },\r\n\r\n  setSubmenu: function () {\r\n    const listDiv = this.util.createElement(\"DIV\");\r\n    listDiv.className = \"se-submenu se-list-layer\";\r\n    listDiv.innerHTML = `<div class=\"se-list-inner se-list-font-size\">\r\n                            <ul class=\"se-list-basic\">\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{patientNomPrenom}\">\r\n                                      Nom et prenom du patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{sexesPatient}\">\r\n                                      Mr or MMr Patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{agePatient}\">\r\n                                    √Çge du patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{datePatient}\">\r\n                                    date de naissance patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{addresPatient}\">\r\n                                    Address patient\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{sexesmedecin}\">\r\n                                      Mr or MMr medecin\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{medecinNomPrenom}\">\r\n                                    Nom et prenom du medecin\r\n                                    </button>\r\n                                </li>\r\n                              \r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{thisDate}\">\r\n                                    date de cette journ√©e\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{specialiteMedecin}\">\r\n                                    specialite medecin\r\n                                    </button>\r\n                                </li>\r\n                                <li>\r\n                                    <button type=\"button\" class=\"se-btn-list\" value=\"{domaineMedecin}\">\r\n                                    domain medecin\r\n                                    </button>\r\n                                </li>\r\n                            </ul>\r\n                        </div>`;\r\n\r\n    return listDiv;\r\n  },\r\n  onClick: function (e) {\r\n    const value = e.target.value;\r\n    const node = this.util.createElement(\"span\");\r\n    this.util.addClass(node, \"se-custom-tag\");\r\n    node.textContent = value;\r\n    this.insertNode(node);\r\n    const zeroWidthSpace = this.util.createTextNode(this.util.zeroWidthSpace);\r\n    node.parentNode.insertBefore(zeroWidthSpace, node.nextSibling);\r\n    this.submenuOff();\r\n  },\r\n};\r\n\r\nexport default AddElement;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\r\nimport AddElement from \"./AddElement\";\r\nimport \"./editer.css\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { MyField } from \"../formInput\";\r\nimport { useAddCertificatType } from \"./../../services/api/certificat\";\r\nimport { useToast, Spinner, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nconst EditerCertificat = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddCertificatType({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n  const editorRef = useRef();\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.structure = editerValue;\r\n    values.cms_users_id = user.id;\r\n    mutate(values);\r\n  };\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un certificat\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"full\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Cr√©ez votre type de certificat</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"type\"\r\n                        label=\"nom de certif\"\r\n                        required=\"vous devez saisir le nom de la certification\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <SunEditor\r\n                      ref={editorRef}\r\n                      lang=\"fr\"\r\n                      name=\"my-editor\"\r\n                      height=\"auto\"\r\n                      placeholder=\"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n                      showToolbar={true}\r\n                      values={editerValue}\r\n                      onChange={handleChange}\r\n                      setOptions={{\r\n                        plugins: [AddElement],\r\n                        buttonList: [\r\n                          [\"undo\", \"redo\"],\r\n                          [\r\n                            \"font\",\r\n                            \"fontSize\",\r\n                            \"formatBlock\",\r\n                            \":p-More Paragraph-default.more_paragraph\",\r\n                          ],\r\n                          [\"paragraphStyle\", \"blockquote\"],\r\n                          [\r\n                            \"bold\",\r\n                            \"underline\",\r\n                            \"italic\",\r\n                            \"strike\",\r\n                            \"subscript\",\r\n                            \"superscript\",\r\n                          ],\r\n                          [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n                          [\"removeFormat\"],\r\n                          [\"image\"],\r\n                          [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n                          [\r\n                            {\r\n                              name: \"Element\",\r\n                              dataCommand: \"Element\",\r\n                              buttonClass: \"\",\r\n                              title: \"Element\",\r\n                              dataDisplay: \"submenu\",\r\n                              innerHTML:\r\n                                '<div style=\"width: 70px;\">Mod√®le</div>',\r\n                            },\r\n                          ],\r\n                          [\"fullScreen\"],\r\n                        ],\r\n                      }}\r\n                    />\r\n                    <Box p={2} borderLeft=\"1px\" my={2}>\r\n                      Utiliser le boutton 'mod√®le' pour cr√©er vos propres\r\n                      certificats . Exemple : si vou ajoutez 'patientNomPr√©nom'\r\n                      , lors de votre consulation le nom de votre patient sera\r\n                      ajout√© automatiquement en utilisant votre certificat\r\n                      mod√©lis√©e.\r\n                    </Box>\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default EditerCertificat;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useAddCertificatType = (config) => {\r\n  return useMutation(\r\n    ({ type, structure, cms_users_id }) =>\r\n      axios.post(\"addct\", { type, structure, cms_users_id }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateCertificatType = (config) => {\r\n  return useMutation(\r\n    ({ type, structure, cms_users_id, id }) =>\r\n      axios.post(\"uct\", { type, structure, cms_users_id, id }),\r\n    config\r\n  );\r\n};\r\nexport const useGetCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\"gc\", () => axios.get(\"gc\", { params }), config);\r\n};\r\n\r\nexport const useGetListCertificat = ({ params, ...config } = {}) => {\r\n  return useQuery(\"ltc\", () => axios.get(\"ltc\", { params }), config);\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState, useRef, useContext } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport EditerCertificat from \"./editer\";\r\nimport { useGetCertificat } from \"../../services/api/certificat\";\r\nimport { useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { usePatentInfo } from \"./../../services/api/patient information\";\r\nimport InputSunEditor from \"../formInput/SunEditorInput\";\r\nexport const Certificat = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [editerValue, setEditerValue] = useState(\"\");\r\n  const editorRef = useRef();\r\n  // editorRef.current.editor.setContents(editerValue);\r\n\r\n  const { id, removeComponentsForm, Patient, name, key } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n  const [selectValues, setSelectValues] = useState([]);\r\n  const params = { cms_users_id: user.id };\r\n  const { isLoading, refetch } = useGetCertificat({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValues(res.data);\r\n    },\r\n  });\r\n  const [patientInfo, setPatientInfo] = useState({});\r\n  const paramsPatentInfo = { cms_users_id: Patient.id };\r\n  const { isLoading: isLodingForPatentInfo, refetch: refetchPatentInfo } =\r\n    usePatentInfo({\r\n      params: paramsPatentInfo,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setPatientInfo(res.data);\r\n      },\r\n    });\r\n  // console.log(patientInfo);\r\n\r\n  const replaceAll = (string, search, replace) => {\r\n    return string.split(search).join(replace);\r\n  };\r\n\r\n  const decodeMessage = (text) => {\r\n    let sexesM = user.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    let sexesP = Patient.sexes == \"homme\" ? `Mr.` : `Mrs.`;\r\n    text = replaceAll(text, \"{sexesPatient}\", sexesP);\r\n    text = replaceAll(text, \"{medecinNomPrenom}\", user.nom + \" \" + user.prenom);\r\n    text = replaceAll(\r\n      text,\r\n      \"{patientNomPrenom}\",\r\n      patientInfo.nom + \" \" + patientInfo.prenom\r\n    );\r\n    text = replaceAll(text, \"{addresPatient}\", Patient.Adresse);\r\n    text = replaceAll(text, \"{sexesmedecin}\", sexesM);\r\n    text = replaceAll(text, \"{specialiteMedecin}\", \"\");\r\n    text = replaceAll(text, \"{domaineMedecin}\", \"\");\r\n    text = replaceAll(\r\n      text,\r\n      \"{datePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? new Date(patientInfo.date_naissance).toISOString().slice(0, 10)\r\n        : ``\r\n    );\r\n    text = replaceAll(\r\n      text,\r\n      \"{thisDate}\",\r\n      new Date().toISOString().slice(0, 10)\r\n    );\r\n\r\n    text = replaceAll(\r\n      text,\r\n      \"{agePatient}\",\r\n      !!patientInfo.date_naissance\r\n        ? Math.abs(\r\n            new Date(\r\n              Date.now() - new Date(patientInfo.date_naissance).getTime()\r\n            ).getUTCFullYear() - 1970\r\n          )\r\n        : ``\r\n    );\r\n\r\n    return text;\r\n  };\r\n\r\n  const changeValueOfEditer = (e) => {\r\n    refetch();\r\n    setEditerValue(e.value);\r\n    editorRef.current.editor.setContents(decodeMessage(e.value));\r\n  };\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const print = () => {\r\n    const mywindow = window.open(\"\", \"PRINT\");\r\n\r\n    mywindow.document.write(decodeMessage(editerValue));\r\n\r\n    mywindow.document.close(); // necessary for IE >= 10\r\n\r\n    mywindow.focus(); // necessary for IE >= 10*/\r\n    mywindow.addEventListener(\"afterprint\", function (event) {\r\n      mywindow.close();\r\n    });\r\n    mywindow.print();\r\n  };\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\" key={\"c\" + key}>\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Certificat`}\r\n\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <EditerCertificat user={user} />\r\n\r\n        <Box py={2}>\r\n          <InputSunEditor\r\n            required={\r\n              \"Vous devez √©crire un certificat ou simplement le supprimer\"\r\n            }\r\n            name={name}\r\n            editorRef={editorRef}\r\n            Patient={Patient}\r\n          />\r\n        </Box>\r\n\r\n        <Box py={2}>\r\n          <Select2\r\n            label=\"Type de certificat\"\r\n            data={selectValues}\r\n            onChange={(e) => changeValueOfEditer(e)}\r\n            name=\"selectvalue\"\r\n          />\r\n        </Box>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Divider } from \"@chakra-ui/layout\";\r\nimport { useColorModeValue as mode, useToast } from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../formInput\";\r\nimport { Prix } from \"../formInput/Prix\";\r\nimport { useGetAllListActe, useGetOnetActe } from \"../../services/api/acte\";\r\nexport const Acte = (props) => {\r\n  const { id, removeComponentsForm, name, key } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [code, setCode] = useState(\"\");\r\n  const [designation, setDesignation] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const { isLoading, refetch } = useGetAllListActe({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data);\r\n    },\r\n  });\r\n  const { mutate, isLoading: isLoadingGetActe } = useGetOnetActe({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      setCode(res.data.code);\r\n      setDesignation(res.data.designation);\r\n      setPrice(res.data.price);\r\n    },\r\n  });\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\" key={\"a\" + key}>\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Acte`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <Select2\r\n          label=\"S√©lectionner une acte\"\r\n          data={selectValue}\r\n          onChange={(e) => mutate({ id: e.value })}\r\n          name=\"selectvalue\"\r\n        />\r\n        <MyField name={`${name}.code`} label=\"Code\" dtValue={code} />\r\n        <TextareaForm\r\n          name={`${name}.designation`}\r\n          label=\"Diagnostic\"\r\n          dtValue={designation}\r\n        />\r\n        <TextareaForm name={`${name}.note`} label=\"Note\" dtValue=\"\" />\r\n        <Prix name={`${name}.prix`} label=\"Prix\" dtValue={price} />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useCreateActe = (config) => {\r\n  return useMutation(\r\n    ({ code, designation, price }) =>\r\n      axios.post(\"add_act\", { code, designation, price }),\r\n    config\r\n  );\r\n};\r\nexport const useUpdateActe = (config) => {\r\n  return useMutation(\r\n    ({ code, designation, price, id }) =>\r\n      axios.post(\"uact\", { code, designation, price, id }),\r\n    config\r\n  );\r\n};\r\nexport const useGetListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\"la\", () => axios.get(\"la\", { params }), config);\r\n};\r\nexport const useGetAllListActe = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"get acte (select2)\", params],\r\n    () => axios.get(\"gac\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useGetOnetActe = (config) => {\r\n  return useMutation(({ id }) => axios.post(\"ga\", { id }), config);\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Divider } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../formInput\";\r\nimport { Prix } from \"../formInput/Prix\";\r\nexport const Examen = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Examen`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <MyField\r\n          name={`${name}.type`}\r\n          label=\"Type d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n        <TextareaForm\r\n          name={`${name}.note`}\r\n          label=\"Note d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n        <Prix\r\n          name={`${name}.prix`}\r\n          label=\"Prix d'examen\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useRef, HTMLAttributes } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useField } from \"@formiz/core\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./date-picker.css\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  Input,\r\n} from \"@chakra-ui/react\";\r\nexport const InputDateRange = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n\r\n  const { label, required } = props;\r\n  const [isTouched, setIsTouched] = React.useState(true);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [endDate, setEndDate] = useState(null);\r\n  const onChange = (dates) => {\r\n    const [start, end] = dates;\r\n    setStartDate(start);\r\n    setEndDate(end);\r\n    if (!!start && !!end) {\r\n      setValue(\r\n        start.toISOString().slice(0, 10) + \"|\" + end.toISOString().slice(0, 10)\r\n      );\r\n    }\r\n  };\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  return (\r\n    <React.Fragment>\r\n      <FormControl>\r\n        <FormLabel htmlFor={id}>\r\n          {label}\r\n          {!!required && \" *\"}\r\n        </FormLabel>\r\n\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={onChange}\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          selectsRange\r\n          inline\r\n          aria-required={!!required}\r\n          onBlur={() => setIsTouched(true)}\r\n        />\r\n      </FormControl>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useField } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  FormHelperText,\r\n  Text,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n} from \"@chakra-ui/react\";\r\nexport const MyNumberInput = (props) => {\r\n  const { errorMessage, id, isValid, isSubmitted, setValue, value } =\r\n    useField(props);\r\n  const format = (val) => `$` + val;\r\n  const parse = (val) => val.replace(/^\\$/, \"\");\r\n  const { label, required, note, Placeholder, dtValue, name } = props;\r\n  const [isTouched, setIsTouched] = React.useState(false);\r\n  const showError = !isValid && (isTouched || isSubmitted);\r\n  useEffect(() => {\r\n    setValue(dtValue);\r\n  }, [dtValue]);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={id}>\r\n        {label}\r\n        {!!required && \" *\"}\r\n      </FormLabel>\r\n      <NumberInput\r\n        id={id}\r\n        name={name}\r\n        placeholder={Placeholder || label}\r\n        value={value || dtValue || \"\"}\r\n        onChange={(valueString) =>\r\n          valueString >= 0 ? setValue(valueString) : ``\r\n        }\r\n        onBlur={() => setIsTouched(true)}\r\n        aria-invalid={showError}\r\n        aria-required={!!required}\r\n        aria-describedby={showError ? `${id}-error` : null}\r\n      >\r\n        <NumberInputField />\r\n        <NumberInputStepper>\r\n          <NumberIncrementStepper />\r\n          <NumberDecrementStepper />\r\n        </NumberInputStepper>\r\n      </NumberInput>\r\n\r\n      {showError && (\r\n        <Text id={`${id}-error`} color=\"tomato\">\r\n          {errorMessage}\r\n        </Text>\r\n      )}\r\n\r\n      {note && <FormHelperText id={`${id}-note`}>{note}</FormHelperText>}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useAddMedicament } from \"../../services/api/list medicament\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { MyField } from \"../formInput\";\r\n\r\nconst AjoutMedicament = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useAddMedicament({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Medicament ajout√© avec succ√®s\",\r\n        description: \"Vous pouvez l'utiliser maintenant dans la consultation\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un medicament\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Ajouter un medicament</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AjoutMedicament;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useListMedicament = ({ params, ...config } = {}) => {\r\n  return useQuery(\"listem\", () => axios.get(\"listem\", { params }), config);\r\n};\r\nexport const useAddMedicament = (config) => {\r\n  return useMutation(\r\n    ({ designation }) => axios.post(\"addm\", { designation }),\r\n    config\r\n  );\r\n};\r\nexport const useGetListeMedicamentSelect2 = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"Liste Medicament (select2)\",\r\n    () => axios.get(\"lms2\", { params }),\r\n    config\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { InputDateRange } from \"./../formInput/range\";\r\nimport { MyNumberInput } from \"./../formInput/numberinput\";\r\nimport { useGetListeMedicamentSelect2 } from \"./../../services/api/list medicament\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { MyField } from \"./../formInput\";\r\nimport AjoutMedicament from \"./../medicament\";\r\nexport const Ordonnance = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const toast = useToast();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const { refetch } = useGetListeMedicamentSelect2({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data);\r\n    },\r\n  });\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Ordonnance`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n        <Input\r\n          placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n          display={showEditTitle ? `none` : `inline`}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <AjoutMedicament refetch={refetch} />\r\n\r\n        <InputDateRange\r\n          name={`${name}.duree`}\r\n          label=\"Dur√©e\"\r\n          required=\"la valeur de dur√©e est obligatoire\"\r\n        />\r\n        <Select2\r\n          label=\"S√©lectionner une medicament\"\r\n          data={selectValue}\r\n          name={`${name}.medicament_id`}\r\n          required=\"le nom de medicament est obligatoire\"\r\n        />\r\n        <MyField\r\n          name={`${name}.duree_entre_chaque_medicament`}\r\n          label=\"duree entre chaque medicament\"\r\n        />\r\n        <MyNumberInput\r\n          name={`${name}.NBR_FOIS_JOURS`}\r\n          label=\"Nombre de fois par jour\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box, Divider } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { Select2 } from \"./../formInput/select\";\r\nimport { TextareaForm } from \"./../formInput/Textarea\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { useListeMedec } from \"../../services/api/Medecin information\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nexport const Lettre = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [selectValue, setSelectValue] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n  const toast = useToast();\r\n\r\n  const { isLoading, refetch } = useListeMedec({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSelectValue(res.data || []);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Lettre`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <Input\r\n          placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n          display={showEditTitle ? `none` : `inline`}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <Select2\r\n          selectValue=\"true\"\r\n          label=\"S√©lectionner un med√©cin\"\r\n          data={selectValue}\r\n          name={`${name}.medecin_destiantaire_id`}\r\n        />\r\n        <TextareaForm\r\n          name={`${name}.description`}\r\n          label=\"Contenu de lettre\"\r\n          required=\"Il est requis de compl√©ter ce champ\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { CloseButton } from \"@chakra-ui/close-button\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport { TextareaForm } from \"./../../formInput/Textarea\";\r\nimport {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n} from \"@chakra-ui/accordion\";\r\nimport { Input, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { MyField } from \"../../formInput\";\r\nexport const AntecedantsForm = (props) => {\r\n  const { id, removeComponentsForm, name } = props;\r\n  const [title, setTitle] = useState(\"\");\r\n  const [showEditTitle, setShowEditTitle] = useState(true);\r\n\r\n  return (\r\n    <AccordionItem boxShadow=\"lg\">\r\n      <AccordionButton>\r\n        <Box flex=\"1\" textAlign=\"left\">\r\n          {title != \"\" ? title : `Antecedant`}\r\n          <EditIcon\r\n            mx={5}\r\n            onClick={(event) => {\r\n              event.stopPropagation();\r\n              setShowEditTitle(!showEditTitle);\r\n            }}\r\n          />\r\n          <Input\r\n            placeholder=\"√âcrivez le titre de cet √©l√©ment\"\r\n            display={showEditTitle ? `none` : `inline`}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Box>\r\n        <AccordionIcon mx={3} />\r\n        <CloseButton\r\n          onClick={() => removeComponentsForm(id)}\r\n          colorScheme=\"red\"\r\n          bgColor=\"red.300\"\r\n          float=\"right\"\r\n        />\r\n      </AccordionButton>\r\n      <AccordionPanel bgColor={mode(\"green.50\", \"gray.700\")} pb={4}>\r\n        <MyField name={`${name}.type`} label=\"type de antecedant\" />\r\n        <TextareaForm\r\n          name={`${name}.description`}\r\n          label=\"description de antecedant\"\r\n        />\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { TextareaForm } from \"./../../../components/formInput/Textarea\";\r\nimport {\r\n  Accordion,\r\n  Box,\r\n  Button,\r\n  CloseButton,\r\n  Divider,\r\n  SimpleGrid,\r\n  useToast,\r\n  Spinner,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { Prix } from \"./../../../components/formInput/Prix\";\r\nimport { Certificat } from \"../../../components/Certificat\";\r\nimport { Acte } from \"../../../components/Acte\";\r\nimport { Examen } from \"../../../components/Examen\";\r\nimport { Ordonnance } from \"./../../../components/Ordonnance\";\r\nimport { Lettre } from \"./../../../components/Lettre\";\r\nimport { AntecedantsForm } from \"./../../../components/Antecedants/AntecedantsForm\";\r\nimport { useCreateConsultation } from \"./../../../services/api/consultation\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst Form = (props) => {\r\n  const toast = useToast();\r\n  const { user } = useContext(TbibyContext);\r\n  const {\r\n    Patient,\r\n    setCurrentPatient,\r\n    refetchPatientListe,\r\n    patientsWaiting,\r\n    setpatientsWaiting,\r\n  } = props;\r\n\r\n  const [id, setId] = useState(0);\r\n  const { mutate, isLoading } = useCreateConsultation({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      patientsWaiting.splice(patientsWaiting.indexOf(Patient), 1);\r\n      setpatientsWaiting([...patientsWaiting]);\r\n      refetchPatientListe();\r\n      setCurrentPatient({});\r\n      setComponentsForm([]);\r\n      toast({\r\n        title: \"Enregistr√© avec succ√®s ‚úîÔ∏è\",\r\n        description: \"votre consultation enregistr√© avec succ√®s \",\r\n        status: \"success\",\r\n        duration: `3000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n  });\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n\r\n  const handleSubmit = () => {\r\n    values.rendez_vous_id = Patient.rendez_vous_id;\r\n    values.patient_id = Patient.id;\r\n    values.medecin_id = user.id;\r\n    mutate(values);\r\n  };\r\n  const [componentsForm, setComponentsForm] = useState([]);\r\n  const addelement = (element) => {\r\n    setId(id + 1);\r\n    setComponentsForm([...componentsForm, element]);\r\n  };\r\n  const removeComponentsForm = (id) => {\r\n    setComponentsForm([\r\n      ...componentsForm.filter(function (obj) {\r\n        return obj.id !== id;\r\n      }),\r\n    ]);\r\n  };\r\n  return (\r\n    <Box>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box overflowX=\"auto\" display={isLoading ? `none` : ``}>\r\n        <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={MyForm.submit}>\r\n            <TextareaForm name=\"Diagnostic\" label=\"Diagnostic\" />\r\n\r\n            <Divider my={5} />\r\n            <Box display={componentsForm.length > 0 ? `block` : `none`}>\r\n              D√©tail\r\n              <CloseButton\r\n                onClick={() => setComponentsForm([])}\r\n                colorScheme=\"red\"\r\n                bgColor=\"red.200\"\r\n                float=\"right\"\r\n                boxShadow=\"dark-lg\"\r\n              />\r\n            </Box>\r\n            <Accordion\r\n              defaultIndex={[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\r\n              allowMultiple\r\n            >\r\n              {componentsForm\r\n                .sort((a, b) => a - b)\r\n                .map(({ id, type }, index) => {\r\n                  if (type === \"certificat\") {\r\n                    return (\r\n                      <Certificat\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`certificats[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"acte\") {\r\n                    return (\r\n                      <Acte\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        index={index}\r\n                        name={`actes[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"examen\") {\r\n                    return (\r\n                      <Examen\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`examens[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"antecedants\") {\r\n                    return (\r\n                      <AntecedantsForm\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`antecedants[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"ordonnance\") {\r\n                    return (\r\n                      <Ordonnance\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`ordonnances[${index}]`}\r\n                      />\r\n                    );\r\n                  } else if (type === \"lettre\") {\r\n                    return (\r\n                      <Lettre\r\n                        id={id}\r\n                        key={id}\r\n                        removeComponentsForm={removeComponentsForm}\r\n                        Patient={Patient}\r\n                        name={`lettres[${index}]`}\r\n                      />\r\n                    );\r\n                  }\r\n                })}\r\n            </Accordion>\r\n            <Box py={3}>\r\n              <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"certificat\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Certificat\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"acte\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Acte\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"examen\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Examen\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"antecedants\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Antecedants\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"ordonnance\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Ordonnance\r\n                </Button>\r\n                <Button\r\n                  onClick={() => addelement({ id, type: \"lettre\" })}\r\n                  colorScheme={mode(\"green\", \"gray\")}\r\n                >\r\n                  Lettre\r\n                </Button>\r\n              </SimpleGrid>\r\n            </Box>\r\n            <Divider my={5} />\r\n            <Box right={0}>\r\n              <Prix\r\n                name=\"prix\"\r\n                required={\r\n                  \"Vous devez √©crire une valeur pour votre consultation\"\r\n                }\r\n                label=\"prix consultation\"\r\n                value={0}\r\n              />\r\n            </Box>\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!MyForm.isValid}\r\n              >\r\n                Submit\r\n                {!MyForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default Form;\r\n","import { Box, Center, Text, SimpleGrid } from \"@chakra-ui/layout\";\r\nimport React, { useContext, useState, useRef } from \"react\";\r\nimport { useListOfThePatientInConsultation } from \"../../services/api/consultation\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport {\r\n  useToast,\r\n  Spinner,\r\n  Textarea,\r\n  useColorModeValue as mode,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { useDeleteReservation } from \"./../../services/api/reservation\";\r\nimport { useSendPatientToWaitingRoom } from \"./../../services/api/manageTheRoom\";\r\nimport PatientsAtTheDoctor from \"../../components/patients at the doctor\";\r\nimport GeneralPatientsInformation from \"../../components/general patients information\";\r\nimport Antecedants from \"./../../components/Antecedants\";\r\nimport Form from \"./_partials/form\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\n\r\nconst Consultation = () => {\r\n  const toast = useToast();\r\n  const [patientsWaiting, setpatientsWaiting] = useState([]);\r\n  const [currentPatient, setCurrentPatient] = useState({});\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  const params = { medecin_id: user.id };\r\n  const { mutate: SPTWRMutate, isLoading: SPTWRIsLoading } =\r\n    useSendPatientToWaitingRoom({\r\n      onError: (error) => {\r\n        // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n      },\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  const { isLoading, refetch } = useListOfThePatientInConsultation({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setpatientsWaiting(res.data);\r\n    },\r\n  });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={isLoading || DeleteIsLoading || SPTWRIsLoading ? `` : `none`}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        w=\"100%\"\r\n        p={5}\r\n        display={isLoading || DeleteIsLoading || SPTWRIsLoading ? `none` : ``}\r\n      >\r\n        <PatientsAtTheDoctor\r\n          SPTWRMutate={SPTWRMutate}\r\n          currentPatient={currentPatient}\r\n          DeleteMutate={DeleteMutate}\r\n          setCurrentPatient={setCurrentPatient}\r\n          patientsWaiting={patientsWaiting}\r\n        />\r\n      </Box>\r\n      <Box pb={5} display={!!currentPatient.nomprenom == \"\" ? `none` : `block`}>\r\n        <Center\r\n          p={5}\r\n          bg={mode(\"green.100\", \"gray.800\")}\r\n          mx=\"auto\"\r\n          boxShadow=\"xl\"\r\n          w={{ base: \"100%\", md: \"95%\" }}\r\n          borderRadius=\"20px\"\r\n        >\r\n          <Text fontSize=\"xl\"> {currentPatient.nomprenom}</Text>\r\n          <Button\r\n            position=\"relative\"\r\n            p={0}\r\n            m={0}\r\n            left={[\"5vw\", \"20vw\", \"10vw\", \"20vw\"]}\r\n            colorScheme=\"green\"\r\n            onClick={() => setCurrentPatient({})}\r\n          >\r\n            <CloseIcon w={4} h={4} />\r\n          </Button>\r\n        </Center>\r\n\r\n        <Box\r\n          mx=\"auto\"\r\n          boxShadow=\"lg\"\r\n          bg={mode(\"green.50\", \"gray.800\")}\r\n          w={{ base: \"90%\", md: \"92%\" }}\r\n        >\r\n          <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\r\n            <Box m={5} textAlign=\"center\">\r\n              <GeneralPatientsInformation patient={currentPatient} />\r\n            </Box>\r\n            <Box m={5} textAlign=\"center\">\r\n              <Antecedants patient={currentPatient} />\r\n            </Box>\r\n          </SimpleGrid>\r\n\r\n          <Box p={5}>\r\n            <Form\r\n              setCurrentPatient={setCurrentPatient}\r\n              Patient={currentPatient}\r\n              refetchPatientListe={refetch}\r\n              patientsWaiting={patientsWaiting}\r\n              setpatientsWaiting={setpatientsWaiting}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Consultation;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport SunEditor from \"suneditor-react\";\r\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\r\nimport AddElement from \"./AddElement\";\r\nimport \"./editer.css\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport { MyField } from \"../formInput\";\r\nimport { useUpdateCertificatType } from \"./../../services/api/certificat\";\r\nimport { useToast, Spinner, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { BiSync } from \"react-icons/bi\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nconst CertificatUpdate = (props) => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { refetch, data, type, id, cms_users_id } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useUpdateCertificatType({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [editerValue, setEditerValue] = useState(data);\r\n  useEffect(() => {\r\n    setEditerValue(data);\r\n  }, [data]);\r\n  const btnRef = React.useRef();\r\n  const editorRef = useRef();\r\n  const handleChange = (content) => {\r\n    setEditerValue(content); //Get Content Inside Editor\r\n  };\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.structure = editerValue;\r\n    values.id = id;\r\n    values.type = type;\r\n    values.cms_users_id = cms_users_id;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? <BiSync fontSize=\"30px\" /> : `Mettre √† jour`}\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"full\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Cr√©ez votre type de certificat</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <SunEditor\r\n                      ref={editorRef}\r\n                      lang=\"fr\"\r\n                      name=\"my-editor\"\r\n                      height=\"auto\"\r\n                      placeholder=\"S'il vous pla√Æt √©crivez votre structure de certificat ici...\"\r\n                      showToolbar={true}\r\n                      setContents={editerValue}\r\n                      values={editerValue}\r\n                      onChange={handleChange}\r\n                      setOptions={{\r\n                        plugins: [AddElement],\r\n                        buttonList: [\r\n                          [\"undo\", \"redo\"],\r\n                          [\r\n                            \"font\",\r\n                            \"fontSize\",\r\n                            \"formatBlock\",\r\n                            \":p-More Paragraph-default.more_paragraph\",\r\n                          ],\r\n                          [\"paragraphStyle\", \"blockquote\"],\r\n                          [\r\n                            \"bold\",\r\n                            \"underline\",\r\n                            \"italic\",\r\n                            \"strike\",\r\n                            \"subscript\",\r\n                            \"superscript\",\r\n                          ],\r\n                          [\"fontColor\", \"hiliteColor\", \"textStyle\"],\r\n                          [\"removeFormat\"],\r\n                          [\"image\"],\r\n                          [\"align\", \"horizontalRule\", \"list\", \"lineHeight\"],\r\n                          [\r\n                            {\r\n                              name: \"Element\",\r\n                              dataCommand: \"Element\",\r\n                              buttonClass: \"\",\r\n                              title: \"Element\",\r\n                              dataDisplay: \"submenu\",\r\n                              innerHTML:\r\n                                '<div style=\"width: 70px;\">Mod√®le</div>',\r\n                            },\r\n                          ],\r\n                          [\"fullScreen\"],\r\n                        ],\r\n                      }}\r\n                    />\r\n                    <Box p={2} borderLeft=\"1px\" my={2}>\r\n                      Utiliser le boutton 'mod√®le' pour cr√©er vos propres\r\n                      certificats . Exemple : si vou ajoutez 'patientNomPr√©nom'\r\n                      , lors de votre consulation le nom de votre patient sera\r\n                      ajout√© automatiquement en utilisant votre certificat\r\n                      mod√©lis√©e.\r\n                    </Box>\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CertificatUpdate;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport EditerCertificat from \"./../../components/Certificat/editer\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { useGetListCertificat } from \"./../../services/api/certificat\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport CertificatUpdate from \"./../../components/Certificat/CertificatUpdate\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\n\r\nconst CertificatPage = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const id = user.idMedecin || user.id;\r\n  const [params, setParams] = useState({ id: id, page });\r\n  const { isLoading, refetch } = useGetListCertificat({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => (\r\n      <CertificatUpdate\r\n        refetch={refetch}\r\n        data={data.structure}\r\n        type={data.type}\r\n        id={data.id}\r\n        cms_users_id={data.cms_users_id}\r\n      />\r\n    ),\r\n  });\r\n  let header = [\"Nom\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <EditerCertificat refetch={refetch} user={user} />\r\n        </Center>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <Stack\r\n            pt={10}\r\n            spacing=\"4\"\r\n            direction={{ base: \"column\", md: \"row\" }}\r\n            justify=\"space-between\"\r\n          >\r\n            <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n              <Tooltip\r\n                label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n                aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              >\r\n                <FormControl w=\"100%\" id=\"search\">\r\n                  <InputGroup size=\"sm\">\r\n                    <FormLabel srOnly>Filtrer:</FormLabel>\r\n                    <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                      <BsSearch />\r\n                    </InputLeftElement>\r\n                    <Input\r\n                      rounded=\"base\"\r\n                      type=\"search\"\r\n                      onChange={(value) => setInputValue(value.target.value)}\r\n                      placeholder=\"Filtrer\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n              </Tooltip>\r\n\r\n              <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n                <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                  <Button\r\n                    w=\"100%\"\r\n                    onClick={() => {\r\n                      setParams({ id: id, page, recherche: inputValue });\r\n                    }}\r\n                    iconSpacing=\"1\"\r\n                    leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                  >\r\n                    {\"Chercher\"}\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Tooltip>\r\n            </Grid>\r\n          </Stack>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default CertificatPage;\r\n","import React, { useState, useContext } from \"react\";\r\nimport {\r\n  Box,\r\n  useToast,\r\n  Spinner,\r\n  Heading,\r\n  Text,\r\n  Link as Linkurl,\r\n  Button,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Avatar,\r\n  PopoverFooter,\r\n} from \"@chakra-ui/react\";\r\nimport { useConsultationPatient } from \"./../../services/api/consultation\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { useDeleteReservation } from \"./../../services/api/reservation\";\r\nimport G_Alert from \"../../components/general alert\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { link } from \"./../../services/api\";\r\nimport { EmailIcon } from \"@chakra-ui/icons\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\n\r\nconst MonRendezvous = () => {\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const { user, cleanUser } = useContext(TbibyContext);\r\n\r\n  const toast = useToast();\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [content, setContent] = useState([[\"\"], [\"\"], [\"\"]]);\r\n  const params = { patient_id: user.id, page };\r\n\r\n  const { isLoading, refetch } = useConsultationPatient({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  const { mutate: DeleteMutate, isLoading: DeleteIsLoading } =\r\n    useDeleteReservation({\r\n      onSuccess: (res) => {\r\n        refetch();\r\n      },\r\n    });\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Vous n'avez aucun rendez vous\r\n        </Heading>\r\n        <Text mt=\"4\" fontSize=\"lg\">\r\n          si vous voulez r√©server un rendez-vous , consulter le lien suivant :\r\n        </Text>\r\n        <Linkurl>\r\n          Reserver un rendez-vous <ExternalLinkIcon mx=\"2px\" />\r\n        </Linkurl>\r\n      </>\r\n    );\r\n  };\r\n  const [fntable, setFntable] = useState({\r\n    fn2: (data) => (\r\n      <G_Alert\r\n        Header=\"Supprimer la r√©servation\"\r\n        Body={`Voulez-vous vraiment supprimer cette r√©servation avec ${data.nom} ${data.prenom}`}\r\n        icon={<CloseIcon />}\r\n        colorScheme=\"teal\"\r\n        bg=\"red.300\"\r\n        target={{ id: data.id }}\r\n        fnTodo={DeleteMutate}\r\n        btOK=\"Effacer\"\r\n        btNon=\"Annuler\"\r\n      />\r\n    ),\r\n    fn: (data) => <MedecinInfo data={data} />,\r\n  });\r\n  let header = [\"Nom Prenom\", \"Date\"];\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box\r\n        display={isLoading ? `none` : ``}\r\n        as=\"section\"\r\n        py={{ base: 0, md: \"12\" }}\r\n        w=\"100%\"\r\n      >\r\n        <Box\r\n          maxW={{ base: \"xl\", md: \"7xl\" }}\r\n          mx=\"auto\"\r\n          px={{ base: \"1\", md: \"8\" }}\r\n        >\r\n          <Box overflowX=\"auto\">\r\n            <TableContent\r\n              header={header}\r\n              content={content}\r\n              fntable={fntable}\r\n              message={message}\r\n            />\r\n            <TablePagination\r\n              total={total}\r\n              next_page_url={next}\r\n              prev_page_url={prev}\r\n              page={page}\r\n              setPage={setPage}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MonRendezvous;\r\n","import { Select2 } from \"./../../components/formInput/select\";\r\nimport { useState } from \"react\";\r\nimport { useForm, Formiz } from \"@formiz/core\";\r\nimport { useSousDomaine } from \"../../services/api/domaine\";\r\nimport { MdCall } from \"react-icons/md\";\r\nimport { EmailIcon, SearchIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Box,\r\n  useToast,\r\n  Heading,\r\n  Spinner,\r\n  Center,\r\n  Popover,\r\n  PopoverTrigger,\r\n  Portal,\r\n  PopoverContent,\r\n  PopoverArrow,\r\n  PopoverHeader,\r\n  PopoverCloseButton,\r\n  PopoverBody,\r\n  Avatar,\r\n  Text,\r\n  PopoverFooter,\r\n} from \"@chakra-ui/react\";\r\nimport { useDomaine } from \"./../../services/api/domaine\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\nimport { useFindeDoctor } from \"./../../services/api/Trouver un medecin\";\r\nimport ReserverUnRendezVous from \"../../components/reserver un rendez-vous\";\r\nimport { link, userImage } from \"./../../services/api\";\r\nimport { TableActions } from \"./../../components/table/TableActions\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiInfoCircle } from \"react-icons/bi\";\r\nimport MedecinInfo from \"./../../components/InformationsSurLeMedecin/FromData\";\r\nconst TrouverUnMedecin = (props) => {\r\n  let header = [\"Nom Prenom\", \"domaine\"];\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const [content, setContent] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [domaine, setDomaine] = useState([]);\r\n  const [DomaineSelected, setDomaineSelected] = useState(-1);\r\n  const [sousDomaineSelected, setSousDomaineSelected] = useState(-1);\r\n  const [sousDomaine, setSousDomaine] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const toast = useToast();\r\n  const MyForm = useForm();\r\n  const { values } = MyForm;\r\n  const params = {\r\n    search,\r\n    DomaineSelected,\r\n    sousDomaineSelected,\r\n    page,\r\n  };\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <ReserverUnRendezVous data={data} />,\r\n    fn2: (data) => <MedecinInfo data={data} />,\r\n  });\r\n  const { isLoading: isLoadingFindeDoctor, refetch: refetchFindeDoctor } =\r\n    useFindeDoctor({\r\n      params,\r\n      onError: (error) => {\r\n        toast({\r\n          title: \"üåê Probl√®me de connexion\",\r\n          description: \" Il y a un probl√®me de connexion\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      },\r\n      onSuccess: (res) => {\r\n        setTotal(res.data.total);\r\n        setNext(res.data.next_page_url);\r\n        setPrev(res.data.prev_page_url);\r\n        setContent((!!res.data.data && res.data.data) || []);\r\n      },\r\n    });\r\n  const { isLoading, refetch } = useDomaine({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setDomaine(res.data);\r\n      refetchFindeDoctor();\r\n    },\r\n  });\r\n  const param = { id: values.SelectDomaine };\r\n  const { isLoading: isLoadingSousD, mutate: mutateSousD } = useSousDomaine({\r\n    param,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setSousDomaine(res.data);\r\n      refetchFindeDoctor();\r\n    },\r\n  });\r\n  const handleSubmit = (values) => {\r\n    // console.log(values);\r\n  };\r\n  const message = () => {\r\n    return (\r\n      <>\r\n        <Heading as=\"h2\" size=\"lg\" fontWeight=\"extrabold\" letterSpacing=\"tight\">\r\n          Aucun medecin n'existe sous cette sp√©cialit√©\r\n        </Heading>\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n        <form noValidate onSubmit={MyForm.submit}>\r\n          <Grid\r\n            p={3}\r\n            templateColumns={{ base: \"repeat(1, 1fr)\", md: \"repeat(3, 1fr)\" }}\r\n            gap={3}\r\n          >\r\n            <Select2\r\n              data={domaine}\r\n              label=\"Domaine\"\r\n              onChange={(event) => {\r\n                setDomaineSelected(event.value);\r\n                setSousDomaine([]);\r\n                setSousDomaineSelected(-1);\r\n                mutateSousD({ domaine_id: event.value });\r\n              }}\r\n              name=\"SelectDomaine\"\r\n            />\r\n            <Select2\r\n              onChange={(event) => {\r\n                setSousDomaineSelected(event.value);\r\n                refetch();\r\n              }}\r\n              data={sousDomaine}\r\n              label=\"Sous Domaine\"\r\n              name=\"selectSousDomaine\"\r\n            />\r\n            <Button\r\n              top=\"45%\"\r\n              onClick={() => {\r\n                setSousDomaineSelected(-1);\r\n                setDomaineSelected(-1);\r\n              }}\r\n            >\r\n              Tous les m√©decins\r\n            </Button>\r\n          </Grid>\r\n          <Box>\r\n            <Center>\r\n              <Spinner\r\n                display={!isLoadingFindeDoctor ? `none` : ``}\r\n                textAlign=\"center\"\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n            </Center>\r\n            <Box display={isLoadingFindeDoctor ? `none` : ``}>\r\n              <TableActions\r\n                buttonText=\"Chercher\"\r\n                buttonIcon={<SearchIcon />}\r\n                chercherFn={setSearch}\r\n              />\r\n              <TableContent\r\n                header={header}\r\n                content={content}\r\n                fntable={fntable}\r\n                message={message}\r\n              />\r\n              <TablePagination\r\n                total={total}\r\n                next_page_url={next}\r\n                prev_page_url={prev}\r\n                page={page}\r\n                setPage={setPage}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </form>\r\n      </Formiz>\r\n    </>\r\n  );\r\n};\r\nexport default TrouverUnMedecin;\r\n","import { useMutation, useQuery } from \"react-query\";\r\nimport axios from \"./../\";\r\nexport const useFindeDoctor = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    [\"Trouver un medecin\", params],\r\n    () => axios.get(\"tm\", { params }),\r\n    config\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Prix } from \"../../formInput/Prix\";\r\nimport { useCreateActe } from \"./../../../services/api/acte\";\r\nimport { MyField } from \"./../../formInput\";\r\n\r\nconst AjoutActe = (props) => {\r\n  const { user, refetch } = props;\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useCreateActe({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type d'acte ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir dans 'Liste d'acte'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        Ajouter un acte\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent bgColor={mode(\"green.50\", \"gray.700\")}>\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>D√©finit votre acte</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <Prix\r\n                        name=\"price\"\r\n                        label=\"Price\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AjoutActe;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Box } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Button, useToast, useColorModeValue as mode } from \"@chakra-ui/react\";\r\nimport { Spinner } from \"@chakra-ui/react\";\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Prix } from \"../../formInput/Prix\";\r\nimport { MyField } from \"./../../formInput\";\r\nimport { useUpdateActe } from \"../../../services/api/acte\";\r\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\r\nimport { BiSync } from \"react-icons/bi\";\r\n\r\nconst UpdateAct = (props) => {\r\n  const { data, refetch } = props;\r\n  const isMobile = useBreakpointValue({ base: true, lg: false });\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useUpdateActe({\r\n    onError: (error) => {\r\n      // setMessage(\"V√©rifier l'information qui vous inseri ou votre liste\");\r\n    },\r\n    onSuccess: (res) => {\r\n      onClose();\r\n      toast({\r\n        title: \"Type de certification ajout√© avec succ√®s\",\r\n        description:\r\n          \"Vous pouvez le s√©lectionner nouveau √† partir de 'Type de certificat'\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n      if (refetch != undefined) {\r\n        refetch();\r\n      }\r\n    },\r\n  });\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const btnRef = React.useRef();\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    values.id = data.id;\r\n    mutate(values);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        ref={btnRef}\r\n        colorScheme={mode(\"green\", \"gray\")}\r\n        // bgColor={mode(\"teal\", \"gray.50\")}\r\n        onClick={onOpen}\r\n      >\r\n        {isMobile ? <BiSync fontSize=\"30px\" /> : `Mettre √† jour`}\r\n      </Button>\r\n\r\n      <Drawer\r\n        isOpen={isOpen}\r\n        placement=\"right\"\r\n        onClose={onClose}\r\n        size=\"md\"\r\n        finalFocusRef={btnRef}\r\n      >\r\n        <DrawerOverlay>\r\n          <DrawerContent\r\n          //  bgColor={mode(\"green.50\", \"gray.700\")}\r\n          >\r\n            <DrawerCloseButton />\r\n            <DrawerHeader>Mettre √† jour votre acte</DrawerHeader>\r\n            <DrawerBody>\r\n              <Spinner\r\n                display={!isLoading ? `none` : `block`}\r\n                size=\"xl\"\r\n                m=\"auto\"\r\n                color=\"red.500\"\r\n              />\r\n              <Box display={isLoading ? `none` : `block`}>\r\n                <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n                  <form noValidate onSubmit={MyForm.submit}>\r\n                    <Box mb={5}>\r\n                      <MyField\r\n                        name=\"code\"\r\n                        label=\"Code\"\r\n                        dtValue={data.code}\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <MyField\r\n                        name=\"designation\"\r\n                        dtValue={data.designation}\r\n                        label=\"Designation\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                      <Prix\r\n                        dtValue={data.price}\r\n                        name=\"price\"\r\n                        label=\"Price\"\r\n                        required=\"Il est requis de compl√©ter ce champ\"\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box py={3}>\r\n                      <Button colorScheme=\"green\" type=\"submit\">\r\n                        Sauvegarder {!MyForm.isValid ? `` : `üëå`}\r\n                      </Button>\r\n                    </Box>\r\n                  </form>\r\n                </Formiz>\r\n              </Box>\r\n            </DrawerBody>\r\n\r\n            <DrawerFooter>\r\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\r\n                Annuler\r\n              </Button>\r\n            </DrawerFooter>\r\n          </DrawerContent>\r\n        </DrawerOverlay>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default UpdateAct;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport AjoutActe from \"../../components/Acte/_parcial/AjoutActe\";\r\nimport { useGetListActe } from \"../../services/api/acte\";\r\nimport UpdateAct from \"./../../components/Acte/_parcial/UpdateAct\";\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\nconst ListeDact = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [params, setParams] = useState({ page });\r\n  const { isLoading, refetch } = useGetListActe({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  const [fntable, setFntable] = useState({\r\n    fn: (data) => <UpdateAct data={data} refetch={refetch} />,\r\n  });\r\n  let header = [\"code\", \"designation\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <AjoutActe refetch={refetch} user={user} />\r\n        </Center>\r\n        <Stack\r\n          pt={10}\r\n          spacing=\"4\"\r\n          direction={{ base: \"column\", md: \"row\" }}\r\n          justify=\"space-between\"\r\n        >\r\n          <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n            <Tooltip\r\n              label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n            >\r\n              <FormControl w=\"100%\" id=\"search\">\r\n                <InputGroup size=\"sm\">\r\n                  <FormLabel srOnly>Filtrer:</FormLabel>\r\n                  <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                    <BsSearch />\r\n                  </InputLeftElement>\r\n                  <Input\r\n                    rounded=\"base\"\r\n                    type=\"search\"\r\n                    onChange={(value) => setInputValue(value.target.value)}\r\n                    placeholder=\"Filtrer\"\r\n                  />\r\n                </InputGroup>\r\n              </FormControl>\r\n            </Tooltip>\r\n\r\n            <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  w=\"100%\"\r\n                  onClick={() => {\r\n                    setParams({ page, recherche: inputValue });\r\n                    // refetch();\r\n                  }}\r\n                  iconSpacing=\"1\"\r\n                  leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                >\r\n                  {\"Chercher\"}\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Stack>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <TableContent header={header} content={content} fntable={fntable} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default ListeDact;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  useToast,\r\n  Center,\r\n  Box,\r\n  Spinner,\r\n  Button,\r\n  ButtonGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  Stack,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport { useListMedicament } from \"../../services/api/list medicament\";\r\nimport AjoutMedicament from \"./../../components/medicament\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { TableContent } from \"./../../components/table/TableContent\";\r\nimport { TablePagination } from \"./../../components/table/TablePagination\";\r\n\r\nimport { RiFolderUserLine } from \"react-icons/ri\";\r\nimport { BsSearch } from \"react-icons/bs\";\r\nconst ListeMedicament = () => {\r\n  const { user } = useContext(TbibyContext);\r\n  const [content, setContent] = useState([[\"\"]]);\r\n  const [total, setTotal] = useState(0);\r\n  const [next, setNext] = useState(\"\");\r\n  const [prev, setPrev] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const toast = useToast();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [params, setParams] = useState({ page });\r\n  const { isLoading, refetch } = useListMedicament({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setTotal(res.data.total);\r\n      setNext(res.data.next_page_url);\r\n      setPrev(res.data.prev_page_url);\r\n      setContent((!!res.data.data && res.data.data) || []);\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    refetch();\r\n  }, [params]);\r\n  let header = [\"nom\"];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box>\r\n        <Center>\r\n          <AjoutMedicament refetch={refetch} />\r\n        </Center>\r\n        <Stack\r\n          pt={10}\r\n          spacing=\"4\"\r\n          direction={{ base: \"column\", md: \"row\" }}\r\n          justify=\"space-between\"\r\n        >\r\n          <Grid templateColumns=\"repeat(2, 1fr)\" w=\"100%\" gap={2}>\r\n            <Tooltip\r\n              label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n              aria-label={`√âcrivez le nom du certificat que vous avez recherch√© sur ce`}\r\n            >\r\n              <FormControl w=\"100%\" id=\"search\">\r\n                <InputGroup size=\"sm\">\r\n                  <FormLabel srOnly>Filtrer:</FormLabel>\r\n                  <InputLeftElement pointerEvents=\"none\" color=\"gray.400\">\r\n                    <BsSearch />\r\n                  </InputLeftElement>\r\n                  <Input\r\n                    rounded=\"base\"\r\n                    type=\"search\"\r\n                    onChange={(value) => setInputValue(value.target.value)}\r\n                    placeholder=\"Filtrer\"\r\n                  />\r\n                </InputGroup>\r\n              </FormControl>\r\n            </Tooltip>\r\n\r\n            <Tooltip label={`Rechercher üîé`} aria-label={`Rechercher üîé`}>\r\n              <ButtonGroup size=\"sm\" variant=\"outline\">\r\n                <Button\r\n                  w=\"100%\"\r\n                  onClick={() => {\r\n                    setParams({ page, recherche: inputValue });\r\n                    // refetch();\r\n                  }}\r\n                  iconSpacing=\"1\"\r\n                  leftIcon={<RiFolderUserLine fontSize=\"1.25em\" />}\r\n                >\r\n                  {\"Chercher\"}\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Tooltip>\r\n          </Grid>\r\n        </Stack>\r\n        <Spinner\r\n          pt={3}\r\n          display={!isLoading ? `none` : `block`}\r\n          size=\"xl\"\r\n          m=\"auto\"\r\n          color=\"red.500\"\r\n        />\r\n        <Box display={isLoading ? `none` : ``}>\r\n          <TableContent header={header} content={content} />\r\n          <TablePagination\r\n            total={total}\r\n            next_page_url={next}\r\n            prev_page_url={prev}\r\n            page={page}\r\n            setPage={setPage}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default ListeMedicament;\r\n","import React, { useContext } from \"react\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport Accountmanagement from \"./../../gestion de compte/\";\r\nimport { PrivateRoute } from \"./../../../router/_partials/PrivateRoute\";\r\nimport Rappel from \"./../../rappel\";\r\nimport ListPatients from \"./../../Mes patients\";\r\nimport CalendarDashboard from \"./../../calendar\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\nimport MonMedecin from \"./../../Mon medecin\";\r\nimport Consultation from \"../../consultation\";\r\nimport CertificatPage from \"../../Certificat\";\r\nimport MonRendezvous from \"./../../Mon rendez vous\";\r\nimport TrouverUnMedecin from \"../../Trouver un m√©decin\";\r\nimport ListeDact from \"../../ListeDact\";\r\nimport ListeMedicament from \"./../../Liste Medicament\";\r\nconst ActivityArea = () => {\r\n  const { user } = useContext(TbibyContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        flex=\"1\"\r\n        borderWidth=\"2px\"\r\n        rounded=\"xl\"\r\n        // overflowX=\"scroll\"\r\n        px={{ base: 0, md: 1 }}\r\n        py={{ base: 2, md: 1 }}\r\n      >\r\n        <PrivateRoute\r\n          path=\"/dashboard\"\r\n          component={CalendarDashboard}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n\r\n        <PrivateRoute\r\n          path=\"/dashboard/Consultation\"\r\n          component={Consultation}\r\n          isAuth={user.fonctionnalite == \"medecin\"}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mod√®le de certificat\"\r\n          component={CertificatPage}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Liste d'actes\"\r\n          component={ListeDact}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Gestion de compte\"\r\n          component={Accountmanagement}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes rendez vous\"\r\n          component={MonRendezvous}\r\n          isAuth={\r\n            user.fonctionnalite == \"patient\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Rappel\"\r\n          component={Rappel}\r\n          isAuth={user.fonctionnalite == \"patient\"}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes patients\"\r\n          component={ListPatients}\r\n          isAuth={user.fonctionnalite == \"medecin\"}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Mes m√©decins\"\r\n          component={MonMedecin}\r\n          isAuth={\r\n            user.fonctionnalite == \"patient\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Trouver un m√©decin\"\r\n          component={TrouverUnMedecin}\r\n          isAuth={true}\r\n          exact\r\n        />\r\n        <PrivateRoute\r\n          path=\"/dashboard/Liste medicament\"\r\n          component={ListeMedicament}\r\n          isAuth={\r\n            user.fonctionnalite == \"medecin\" ||\r\n            user.fonctionnalite == \"secretaire\"\r\n          }\r\n          exact\r\n        />\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ActivityArea;\r\n","import { Box, Divider, useToast } from \"@chakra-ui/react\";\r\nimport { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { useRemoveNotification } from \"./../../../services/api/notification\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { IconButton } from \"@chakra-ui/button\";\r\nimport { useSeeNotification } from \"./../../../services/api/notification\";\r\nimport { useColorModeValue as mode } from \"@chakra-ui/react\";\r\n\r\nconst OneNotification = (props) => {\r\n  let history = useHistory();\r\n  const { notif, refetch, removeElement } = props;\r\n  const toast = useToast();\r\n  const handleClick = () => {\r\n    history.push(notif.url || \"/dashboard\");\r\n  };\r\n\r\n  const { isLoading, mutate } = useRemoveNotification({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      refetch();\r\n\r\n      //   setNotification(res.data);\r\n    },\r\n  });\r\n  const { mutate: seeNotifMutate } = useSeeNotification({\r\n    onSuccess: (res) => {\r\n      refetch();\r\n    },\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        p={2}\r\n        onClick={() => handleClick()}\r\n        onMouseEnter={() => {\r\n          if (notif.is_read == 0) {\r\n            seeNotifMutate({ id: notif.id });\r\n            notif.is_read = 1;\r\n          }\r\n        }}\r\n        color={mode(\"green.900\", \"gray.100\")}\r\n        bgColor={notif.is_read == 1 ? `` : mode(\"green.50\", \"gray.500\")}\r\n      >\r\n        <Box float=\"right\" fontSize=\"10px\" colorScheme=\"red\">\r\n          <IconButton\r\n            size=\"xs\"\r\n            m={1}\r\n            bg=\"red.300\"\r\n            colorScheme=\"teal\"\r\n            fontSize=\"10px\"\r\n            icon={<CloseIcon />}\r\n            onClick={(event) => {\r\n              removeElement(notif);\r\n              event.stopPropagation();\r\n              mutate({ id: notif.id });\r\n            }}\r\n          />\r\n        </Box>\r\n        {notif.content}\r\n      </Box>\r\n      <Divider />\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default OneNotification;\r\n","import { useQuery, useMutation } from \"react-query\";\r\nimport axios from \"./../\";\r\n\r\nexport const useNotification = ({ params, ...config } = {}) => {\r\n  return useQuery(\r\n    \"notification\",\r\n    () => axios.get(\"notification\", { params }),\r\n    config\r\n  );\r\n};\r\nexport const useRemoveNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"rmnot\", { id }), config);\r\n};\r\nexport const useRemoveAllNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"rmanotif\", { id }), config);\r\n};\r\nexport const useSeeNotification = ({ ...config } = {}) => {\r\n  return useMutation(({ id }) => axios.post(\"vnotif\", { id }), config);\r\n};\r\n","import { useNotification } from \"./../../services/api/notification\";\r\nimport { TbibyContext } from \"./../../router/context\";\r\nimport { useContext, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Popover,\r\n  PopoverArrow,\r\n  PopoverBody,\r\n  PopoverCloseButton,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Tag,\r\n  Text,\r\n  TagLabel,\r\n  Divider,\r\n  useToast,\r\n  Button,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\nimport OneNotification from \"./_partials/One notification\";\r\nimport { useRemoveAllNotification } from \"./../../services/api/notification\";\r\nconst Notification = (props) => {\r\n  const { user } = useContext(TbibyContext);\r\n  const toast = useToast();\r\n  const [notification, setNotification] = useState([]);\r\n  const params = { id: user.id };\r\n  const { isLoading, refetch } = useNotification({\r\n    params,\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      setNotification(res.data);\r\n    },\r\n  });\r\n  const { mutate: removeAllNotificationMutate } = useRemoveAllNotification({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n  });\r\n  const removeElement = (element) => {\r\n    let array = [...notification];\r\n    array.splice(array.indexOf(element), 1);\r\n    // console.log(array);\r\n    setNotification(array);\r\n  };\r\n  return notification.length ? (\r\n    <Popover>\r\n      <PopoverTrigger>\r\n        <Tag\r\n          mx={3}\r\n          size=\"lg\"\r\n          colorScheme=\"gray\"\r\n          borderRadius=\"full\"\r\n          _hover={{ cursor: \"pointer\" }}\r\n        >\r\n          <Tooltip label=\"Notification\" aria-label=\"Notification\">\r\n            üîî\r\n          </Tooltip>\r\n\r\n          <TagLabel>\r\n            {notification.length != 0 ? notification.length : ``}\r\n          </TagLabel>\r\n        </Tag>\r\n      </PopoverTrigger>\r\n      <PopoverContent mx={2}>\r\n        <PopoverArrow />\r\n        <PopoverCloseButton />\r\n        <PopoverHeader>\r\n          <Text fontSize=\"2xl\"> Notification</Text>\r\n          {notification.length != 0 ? (\r\n            <Button\r\n              fontSize=\"13px\"\r\n              onClick={() => {\r\n                removeAllNotificationMutate({ id: user.id });\r\n                setNotification([]);\r\n              }}\r\n              float=\"right\"\r\n              mr={2}\r\n            >\r\n              Effacer tout\r\n            </Button>\r\n          ) : (\r\n            ``\r\n          )}\r\n        </PopoverHeader>\r\n        <PopoverBody overflowY=\"scroll\" maxH=\"70vh\">\r\n          {notification.map((element) => (\r\n            <OneNotification\r\n              removeElement={removeElement}\r\n              refetch={refetch}\r\n              notif={element}\r\n            ></OneNotification>\r\n          ))}\r\n        </PopoverBody>\r\n        <Divider />\r\n      </PopoverContent>\r\n    </Popover>\r\n  ) : null;\r\n};\r\nexport default Notification;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Tooltip,\r\n  useBoolean,\r\n  useBreakpointValue,\r\n  useColorMode,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { NavBreadcrumb } from \"./_partials\";\r\nimport * as React from \"react\";\r\nimport { HiMenu, HiX } from \"react-icons/hi\";\r\nimport ScrollArea from \"./ScrollArea\";\r\nimport Menu from \"./menu\";\r\nimport UserAvatar from \"./userAvatar\";\r\nimport ActivityArea from \"./activityArea\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Notification from \"./../../components/notification\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nconst Dashboard = () => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const { pathname } = useLocation();\r\n  const { isOpen, toggle, actions } = useMobileMenuState();\r\n  const handlers = useSwipeable({\r\n    onSwipedLeft: () => toggle(),\r\n    onSwipedRight: () => toggle(),\r\n    preventDefaultTouchmoveEvent: true,\r\n    trackMouse: true,\r\n  });\r\n  return (\r\n    <Flex\r\n      {...handlers}\r\n      height=\"100vh\"\r\n      w=\"100vw\"\r\n      bg={mode(\"green.500\", \"inherit\")}\r\n      overflow=\"hidden\"\r\n      sx={{ \"--sidebar-width\": \"230px\" }}\r\n    >\r\n      <Box\r\n        as=\"nav\"\r\n        display=\"block\"\r\n        flex=\"1\"\r\n        width=\"var(--sidebar-width)\"\r\n        left=\"0\"\r\n        py=\"5\"\r\n        px=\"1\"\r\n        color=\"gray.200\"\r\n        position=\"fixed\"\r\n      >\r\n        <Box fontSize=\"sm\" lineHeight=\"tall\">\r\n          <UserAvatar />\r\n          <ScrollArea pt=\"5\" pb=\"6\">\r\n            <Menu toggle={toggle} />\r\n          </ScrollArea>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        flex=\"1\"\r\n        p={{ base: \"0\", md: \"6\" }}\r\n        marginStart={{ md: \"var(--sidebar-width)\" }}\r\n        position=\"relative\"\r\n        left={isOpen ? \"var(--sidebar-width)\" : \"0\"}\r\n        transition=\"left 0.2s\"\r\n      >\r\n        <Box\r\n          maxW=\"2560px\"\r\n          bg={mode(\"white\", \"gray.700\")}\r\n          height=\"100%\"\r\n          pb=\"6\"\r\n          rounded={{ md: \"lg\" }}\r\n        >\r\n          <Flex direction=\"column\" height=\"full\">\r\n            <Flex\r\n              w=\"full\"\r\n              py=\"4\"\r\n              justify=\"space-between\"\r\n              align=\"center\"\r\n              px=\"10\"\r\n            >\r\n              <Flex align=\"center\" minH=\"8\">\r\n                <MobileMenuButton onClick={toggle} isOpen={isOpen} />\r\n                <NavBreadcrumb path={pathname} />\r\n              </Flex>\r\n              <Flex align=\"center\" minH=\"8\">\r\n                <Notification />\r\n                <Box\r\n                  display=\"inline\"\r\n                  _hover={{ cursor: \"pointer\" }}\r\n                  onClick={toggleColorMode}\r\n                >\r\n                  <Tooltip label=\"Mode sombre\" aria-label=\"Mode sombre\">\r\n                    {colorMode === \"light\" ? \"‚òÄÔ∏è\" : \"üåô\"}\r\n                  </Tooltip>\r\n                </Box>\r\n              </Flex>\r\n            </Flex>\r\n            <Flex\r\n              direction=\"column\"\r\n              flex=\"1\"\r\n              overflow=\"auto\"\r\n              px={{ base: 1, md: 6, lg: 8 }}\r\n            >\r\n              <ScrollArea>\r\n                <ActivityArea />\r\n              </ScrollArea>\r\n            </Flex>\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nconst MobileMenuButton = (props) => {\r\n  const { onClick, isOpen } = props;\r\n  return (\r\n    <Box\r\n      display={{ base: \"block\", md: \"none\" }}\r\n      ml=\"-8\"\r\n      mr=\"2\"\r\n      as=\"button\"\r\n      type=\"button\"\r\n      rounded=\"md\"\r\n      p=\"1\"\r\n      fontSize=\"xl\"\r\n      color=\"gray.500\"\r\n      _hover={{ bg: \"gray.100\" }}\r\n      onClick={onClick}\r\n    >\r\n      <Box srOnly>{isOpen ? \"Close Menu\" : \"Open Menu\"}</Box>\r\n      {isOpen ? <HiX /> : <HiMenu />}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useMobileMenuState = () => {\r\n  const [isOpen, actions] = useBoolean();\r\n  const isMobile = useBreakpointValue({ base: true, md: false });\r\n  React.useEffect(() => {\r\n    if (isMobile == false) {\r\n      actions.off();\r\n    }\r\n  }, [isMobile, actions]);\r\n  return { isOpen, ...actions };\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formiz, useForm } from \"@formiz/core\";\r\n\r\nimport {\r\n  useToast,\r\n  Box,\r\n  Text,\r\n  FormControl,\r\n  Button,\r\n  Spinner,\r\n  useColorModeValue as mode,\r\n} from \"@chakra-ui/react\";\r\nimport { MyField } from \"../../../components/formInput/\";\r\nimport { MyFieldPassword } from \"../../../components/formInput/password\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLogin } from \"./../../../services/api/auth\";\r\nimport { TbibyContext } from \"./../../../router/context\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const { setUser } = useContext(TbibyContext);\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useLogin({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      let data = { ...res.data };\r\n      if (Object.entries(res.data).length !== 0 && data.status == \"Active\") {\r\n        data.isAuthenticated = true;\r\n        localStorage.setItem(\"user\", JSON.stringify(data));\r\n        setUser(data);\r\n        toast({\r\n          title:\r\n            \"üë®‚Äç‚öïÔ∏è Bienvenue \" +\r\n            (data.sexes == \"homme\" ? `Mr ` : `Mrs `) +\r\n            data.nom,\r\n          description: \" Vous √™tes maintenant connect√© √† votre compte.\",\r\n          status: \"success\",\r\n          duration: `4000`,\r\n          isClosable: true,\r\n        });\r\n      } else {\r\n        toast({\r\n          titre: \"V√©rifiez vos informationsüîê\",\r\n          description:\r\n            \"Entrez votre e-mail, t√©l√©phone ou CIN et votre mot de passe\",\r\n          status: \"success\",\r\n          duration: 4000,\r\n          isClosable: true,\r\n        });\r\n      }\r\n      history.push(\"/dashboard\");\r\n    },\r\n  });\r\n\r\n  const MyForm = useForm();\r\n  const handleSubmit = (values) => {\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Box display={isLoading ? `none` : ``}>\r\n        <Formiz connect={MyForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={MyForm.submit}>\r\n            <MyField\r\n              name=\"user\"\r\n              label=\"Nom d'utilisateur\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              note=\"Connectez-vous avec  N¬∞ T√©l√©phone ou votre N¬∞ C.I.N ou E-mail\"\r\n            />\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              type=\"password\"\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                w=\"40%\"\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!MyForm.isValid}\r\n              >\r\n                Se connecter\r\n                {!MyForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n\r\n        <Text mt=\"4\" align=\"center\" maxW=\"md\" fontWeight=\"medium\">\r\n          <Box\r\n            marginStart=\"1\"\r\n            color={mode(\"blue.600\", \"blue.200\")}\r\n            _hover={{ color: \"blue.600\" }}\r\n            display={{ base: \"block\", sm: \"revert\" }}\r\n          >\r\n            <Link to=\"singup\">Cr√©ez votre compte ‚ú®</Link>\r\n          </Box>\r\n        </Text>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Formiz, useForm } from \"@formiz/core\";\r\nimport {\r\n  FormControl,\r\n  Radio,\r\n  Stack,\r\n  RadioGroup,\r\n  Button,\r\n  Center,\r\n  useToast,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  isEmail,\r\n  isLength,\r\n  isNumber,\r\n  isPattern,\r\n  isMinLength,\r\n} from \"@formiz/validations\";\r\nimport { InputDate } from \"./../../../components/formInput/date\";\r\nimport { MyField } from \"../../../components/formInput\";\r\nimport { MyFieldPassword } from \"../../../components/formInput/password\";\r\nimport React, { useState } from \"react\";\r\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSingup } from \"./../../../services/api/auth\";\r\n\r\nconst Singup = () => {\r\n  let history = useHistory();\r\n\r\n  const toast = useToast();\r\n  const { mutate, isLoading } = useSingup({\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"üåê Probl√®me de connexion\",\r\n        description: \" Il y a un probl√®me de connexion\",\r\n        status: \"success\",\r\n        duration: `4000`,\r\n        isClosable: true,\r\n      });\r\n    },\r\n    onSuccess: (res) => {\r\n      res = res.data;\r\n      if (res.api_status == 1) {\r\n        if (res.exists) {\r\n          toast({\r\n            title: res.elementExists + \" existe d√©ja\",\r\n            description: \"choisir un autre \" + res.elementExists + \" üí≠\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n        } else {\r\n          toast({\r\n            title: \" ‚ú® \",\r\n            description: \"üéâVotre compte a √©t√© enregistr√©\",\r\n            status: \"success\",\r\n            duration: `4000`,\r\n            isClosable: true,\r\n          });\r\n          history.push(\"/login\");\r\n        }\r\n      }\r\n    },\r\n  });\r\n  const [fonctionnalite, setFonctionnalite] = useState(\"patient\");\r\n  const [sexes, setSexes] = useState(\"homme\");\r\n\r\n  const myForm = useForm();\r\n  const { values } = myForm;\r\n  const handleSubmit = (values) => {\r\n    values.sexes = sexes;\r\n    values.id_cms_privileges = fonctionnalite;\r\n    mutate(values);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner\r\n        display={!isLoading ? `none` : ``}\r\n        size=\"xl\"\r\n        m=\"auto\"\r\n        color=\"red.500\"\r\n      />\r\n      <Stack\r\n        maxW={400}\r\n        display={isLoading ? `none` : ``}\r\n        margin=\"auto\"\r\n        spacing={5}\r\n      >\r\n        <Formiz connect={myForm} onValidSubmit={handleSubmit}>\r\n          <form noValidate onSubmit={myForm.submit}>\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup\r\n                  onChange={setFonctionnalite}\r\n                  value={fonctionnalite}\r\n                  name=\"id_cms_privileges\"\r\n                >\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"patient\" py={3} mx={5}>\r\n                      üôã‚Äç‚ôÇ Patient\r\n                    </Radio>\r\n                    <Radio value=\"medecin\" py={3} mx={5}>\r\n                      ü©∫ M√©decin\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n\r\n            <MyField\r\n              name=\"nom\"\r\n              label=\"Nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le nom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"prenom\"\r\n              label=\"Pr√©nom\"\r\n              required=\"Il est requis de compl√©ter ce champ\"\r\n              validations={[\r\n                {\r\n                  rule: isPattern(\"^[a-zA-Z ]*$\"),\r\n                  message: \"Le prenom ne contient que des lettres\",\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl>\r\n              <Center>\r\n                <RadioGroup onChange={setSexes} value={sexes} name=\"sexes\">\r\n                  <Stack direction=\"row\" size=\"lg\">\r\n                    <Radio value=\"homme\" py={3} mx={5}>\r\n                      Homme üë®‚Äçü¶∞\r\n                    </Radio>\r\n                    <Radio value=\"femme\" py={3} mx={5}>\r\n                      Femme üë©‚Äçü¶∞\r\n                    </Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Center>\r\n            </FormControl>\r\n            <InputDate\r\n              name=\"date_naissance\"\r\n              label=\"Date de naissance\"\r\n              //required=\"Il est requis de compl√©ter le champ correspondant au date_naissance\"\r\n            />\r\n\r\n            <MyField\r\n              name=\"email\"\r\n              label=\"E-mail\"\r\n              validations={[\r\n                {\r\n                  rule: isEmail(),\r\n                  message: \"Veuillez v√©rifier le format de l'E-mail\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.telephone,\r\n                  message: 'Le champ E-mail doit contenir \"@\" et \".\" ',\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"cin\"\r\n              label=\"C.I.N\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message: \"La carte d'identit√© ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.email || !!values.telephone,\r\n                  message:\r\n                    \"La carte d'identit√© doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.email, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <MyField\r\n              name=\"telephone\"\r\n              label=\"T√©l√©phone\"\r\n              validations={[\r\n                {\r\n                  rule: isLength(8),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                },\r\n                {\r\n                  rule: isNumber(),\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone  ne contient que des chiffres\",\r\n                },\r\n                {\r\n                  rule: (val) => !!val || !!values.cin || !!values.email,\r\n                  message:\r\n                    \"La num√©ro de t√©l√©phone doit √™tre constitu√©e  de 8 chiffres\",\r\n                  deps: [values.cin, values.email],\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"password\"\r\n              label=\"Mot de passe\"\r\n              required=\"Il est requis de compl√©ter ce champ \"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: isMinLength(6),\r\n                  message:\r\n                    \"Le mot de passe doit contenir au moins 6 caract√®res\",\r\n                },\r\n              ]}\r\n            />\r\n            <MyFieldPassword\r\n              name=\"R_password\"\r\n              label=\"R√©p√©ter le mot de passe\"\r\n              required=\"Il est requis de compl√©ter le champ correspondant au r√©p√©ter mot de passe\"\r\n              type=\"password\"\r\n              validations={[\r\n                {\r\n                  rule: (val) => val == values.password,\r\n                  message: \"Le mot de passe r√©p√©t√© doit √™tre le m√™me.\",\r\n                  deps: [values.cin, values.telephone],\r\n                },\r\n              ]}\r\n            />\r\n            <FormControl mt={5} align=\"center\">\r\n              <Button\r\n                type=\"submit\"\r\n                borderColor=\"green.500\"\r\n                disabled={!myForm.isValid}\r\n              >\r\n                Cr√©er mon compte\r\n                {!myForm.isValid ? `` : `üëå`}\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </Formiz>\r\n        <Center>\r\n          <Link to=\"login\">\r\n            Se connecter\r\n            <ExternalLinkIcon mx=\"2px\" />\r\n          </Link>\r\n        </Center>\r\n      </Stack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Singup;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  useColorModeValue as mode,\r\n  Heading,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport Login from \"./Login\";\r\nimport Singup from \"./Sing up\";\r\nimport { Route } from \"react-router\";\r\n\r\nconst log = () => {\r\n  return (\r\n    <Box\r\n      bg={mode(\"green.50\", \"inherit\")}\r\n      minH=\"100vh\"\r\n      py=\"12\"\r\n      px={{ sm: \"6\", lg: \"8\" }}\r\n    >\r\n      <Box maxW={{ sm: \"md\" }} mx={{ sm: \"auto\" }} w={{ sm: \"full\" }}>\r\n        <Box>\r\n          <Box>\r\n            <Image\r\n              maxW={[\"140px\", \"140px\", \"140px\", \"275px\"]}\r\n              // maxWidth=\"140px\"\r\n              m=\"auto\"\r\n              src=\"./logo192.png\"\r\n              alt=\"Tbiby\"\r\n            />\r\n          </Box>\r\n          <Heading mt=\"6\" textAlign=\"center\" size=\"xl\" fontWeight=\"extrabold\">\r\n            Bienvenue √† Tbiby\r\n          </Heading>\r\n        </Box>\r\n        <Box maxW={{ sm: \"md\" }} mx={{ sm: \"auto\" }} mt=\"8\" w={{ sm: \"full\" }}>\r\n          <Box\r\n            bg={mode(\"white\", \"gray.700\")}\r\n            py=\"8\"\r\n            px={{ base: \"4\", md: \"10\" }}\r\n            shadow=\"base\"\r\n            rounded={{ sm: \"lg\" }}\r\n          >\r\n            <Route component={Login} exact path=\"/login\" />\r\n            <Route component={Singup} exact path=\"/Singup\" />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default log;\r\n","import React from \"react\";\r\nimport { Center, Box, Image, Button } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Error404 = () => {\r\n  let history = useHistory();\r\n\r\n  return (\r\n    <Center minH=\"100vh\" textAlign=\"center\">\r\n      <Box>\r\n        <Box>\r\n          <Image src=\"\" w=\"100%\" src=\"./image/404.png\" />\r\n        </Box>\r\n        <Box mt={10}>\r\n          <Button\r\n            onClick={() => history.push(\"/dashboard\")}\r\n            variant=\"outline\"\r\n            size=\"lg\"\r\n            colorScheme=\"green\"\r\n          >\r\n            üö¶ Page d'accueil üö¶\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Center>\r\n  );\r\n};\r\nexport default Error404;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nexport const PublicRoute = ({ isAuth, ...otherProps }) => {\r\n  if (!isAuth) {\r\n    return <Route {...otherProps} />;\r\n  }\r\n\r\n  return (\r\n    <Redirect\r\n      to={{\r\n        pathname: \"/dashboard\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Dashboard from \"./../pages/dashboard\";\r\nimport { ReactQueryDevtools as ApiDevtools } from \"react-query/devtools\";\r\nimport log from \"../pages/log\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nimport PrivateRoute from \"./_partials/PrivateRoute\";\r\n\r\nimport Error404 from \"./../pages/404\";\r\nimport TheContext, { TbibyContext } from \"./context\";\r\nimport PublicRoute from \"./_partials/PublicRoute\";\r\nfunction MainRouter() {\r\n  const { user } = useContext(TbibyContext);\r\n  // const { isAuthenticated } = useContext(TbibyContext);\r\n  // const auth = new Auth();\r\n  const queryClient = new QueryClient();\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Redirect to=\"/dashboard\" />\r\n          </Route>\r\n          <PublicRoute\r\n            component={log}\r\n            path=\"/login\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <PublicRoute\r\n            component={log}\r\n            path=\"/singup\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <PrivateRoute\r\n            component={Dashboard}\r\n            path=\"/dashboard\"\r\n            isAuth={user.isAuthenticated}\r\n          />\r\n          <Route component={Error404} path=\"*\" />\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default MainRouter;\r\n","import React from \"react\";\r\nimport { ReactQueryDevtools as ApiDevtools } from \"react-query/devtools\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport TheContext from \"./router/context\";\r\nimport MainRouter from \"./router\";\r\n\r\nfunction App() {\r\n  // const { isAuthenticated } = useContext(TbibyContext);\r\n  // console.log(isAuthenticated);\r\n  // const auth = new Auth();\r\n\r\n  const queryClient = new QueryClient();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <QueryClientProvider client={queryClient}>\r\n        <TheContext>\r\n          <MainRouter />\r\n          {/* <ApiDevtools initialIsOpen={false} /> */}\r\n        </TheContext>\r\n      </QueryClientProvider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const globalStyle = {\r\n  \".chakra-collapse\": {\r\n    overflow: \"visible!important\",\r\n  },\r\n  \".chakra-accordion .css-0 > * \": {\r\n    display: \"block\",\r\n  },\r\n};\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\nimport { globalStyle } from \"./globalStyle\";\r\n\r\nconst config = {\r\n  initialColorMode: \"light\",\r\n  useSystemColorMode: false,\r\n};\r\nconst theme = extendTheme({ config });\r\nexport default theme;\r\nconst overwrite = {\r\n  styles: {\r\n    global: () => ({\r\n      ...globalStyle,\r\n    }),\r\n  },\r\n};\r\nexport const customTheme = extendTheme(overwrite);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider, ColorModeScript, CSSReset } from \"@chakra-ui/react\";\r\nimport App from \"./app\";\r\nimport theme, { customTheme } from \"./theme\";\r\nconst startApp = () => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n      <ChakraProvider theme={customTheme}>\r\n        <CSSReset />\r\n        <App />\r\n      </ChakraProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n  reportWebVitals();\r\n};\r\nif (window.cordova) {\r\n  document.addEventListener(\"deviceready\", startApp, false);\r\n} else {\r\n  startApp();\r\n}\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}